<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue-刷新当前页面</title>
      <link href="/blog/1506/"/>
      <url>/blog/1506/</url>
      
        <content type="html"><![CDATA[<p>前端页面在用户执行某个动作之后，可能更新了些数据或者状态，此时就需要重新刷新页面来渲染出最新结果。</p><a id="more"></a><h2 id="推荐写法"><a href="#推荐写法" class="headerlink" title="推荐写法"></a>推荐写法</h2><p>这种方式用于执行某个动作之后刷新当前页面，并且页面不会有一闪的不好体验。</p><p>首先，在文件 <code>App.vue</code> 写上如下代码。通过控制 <code>router-view</code> 的显示或隐藏，达到控制页面再次加载的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view v-if&#x3D;&quot;isRouterAlive&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      reload: this.reload</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isRouterAlive: true</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reload() &#123;</span><br><span class="line">      this.isRouterAlive &#x3D; false;</span><br><span class="line">      this.$nextTick(function() &#123;</span><br><span class="line">        this.isRouterAlive &#x3D; true;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在需要刷新的页面，先注入 <code>reload</code> 依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inject: [&quot;reload&quot;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在执行操作的动作里直接调用 <code>this.reload();</code> 即可刷新当前页面。</p><h2 id="其他写法"><a href="#其他写法" class="headerlink" title="其他写法"></a>其他写法</h2><p>下面是刷新页面的其他写法，强制刷新页面，会有短暂的闪烁。存储在 <code>store</code> 的数据会丢失，需要注意处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.reload();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.go(0);</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>我在写登录跳转，并且需要刷新跳转页的时候，使用上面的方法并没有达到我想要的效果，不是没有跳转过去就是跳转之后页面没有刷新。然后找到了下面的写法解决了我的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.open(&quot;&#x2F;dashboard&quot;, &quot;_self&quot;);</span><br></pre></td></tr></table></figure><p>登录之后数据会存储到 <code>localStorage</code> 中，这个跳转，相当于关闭了登录页直接在本页打开新跳转页。在 <code>App.vue</code> 的 <code>created</code> 方法里会从 <code>localStorage</code> 重新加载数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    if (localStorage.getItem(&quot;store&quot;)) &#123;</span><br><span class="line">      this.$store.replaceState(</span><br><span class="line">        Object.assign(</span><br><span class="line">          &#123;&#125;,</span><br><span class="line">          this.$store.state,</span><br><span class="line">          JSON.parse(localStorage.getItem(&quot;store&quot;))</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    window.addEventListener(&quot;beforeunload&quot;, () &#x3D;&gt; &#123;</span><br><span class="line">      localStorage.setItem(&quot;store&quot;, JSON.stringify(this.$store.state));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果A，那么B</title>
      <link href="/blog/cee/"/>
      <url>/blog/cee/</url>
      
        <content type="html"><![CDATA[<p>如果A那么B，本身很简单的一个句子，按照逻辑推理的分类，该属于充分条件的句子，只是，实践起来，不一定那么顺畅了～</p><a id="more"></a><p>既然是充分条件，并不是后者成败的关键，但往往生活中很多时候，这个充分条件没能成立，即便后者成立了，多多少少，感觉少了点啥，因为，有时候，你的关注点更在于前面的充分条件，名义上是充分条件句，实际想要成立的是A～</p><p>比如说，如果收入增长了，那么，我就买件漂亮的裙子～看起来是个充分条件的论述，实际上，收入即便不增长，你一定不买新裙子么？不会的，还是会，只是略略少了点啥而已，说这句话的同时，其实更想侧重的是前者😂～</p><p>不知道有没有注意过，有时候如果A那么B，很多时候，A就很不给面子，反而出来了C，当然，C也是你所期盼的，正是有心栽花花不开，无心插柳柳成荫～</p><p>比如说，最近一直想着探路线，虽说上班的路线本身挺简单的，无奈于公交永远是堵在路上的，当遇到同一个地段整整堵了一个小时时，心累了～不要说开车吧，路上跑的大车都躲不了堵车的尴尬～电动车应该是不堵的，无奈不太敢骑，也只能放弃～思来想去，小单车可行，刚好可以减肥了～在娃他爸的引路之下，找到了一条畅通的路线，刚好也绕过了堵车地段，可以顺利搭车～</p><p>路线是确定了，但是一直在想着另外一条路线，近不少，想着，如果走这条近路，那么应该会更快的到达～刚好，这天，小区门口没有小单车，于是搭车到了地铁站，开始尝试～但是很快，就见识到了弊端，车流太多，人流量太大，红绿灯也多，这条路线刚好是堵车的一个重要地段，没法畅快的骑行，只能兜兜转转，交叉路口还要停下来问个路～走走停停，总算通过了堵车地段，赶上了公交车～或许是太忘神了，一不小心，坐过了站台，兜兜转转，下了车，好在过的站不多～走到马路对面，突然发现，还有公共自行车，略惊喜，一直想着附近哪里有车，可以无缝对接上学校门口的公共自行车，这会可以如愿了～于是，快速取车，跨上，奔往学校～</p><p>没有实现“如果近一点，我就可以更快的到达目的地～”倒是，无意中，坐过了站，发现了无缝对接的公共自行车😂</p><p>所以，生活就是这样，没有应该怎么样，只有就是这样～</p><p>如果A那么B，只能是一种假设，假设就存在不确定性，就存在各种状况，所以，没有如果，只有这样～</p><p>想到了，就往前冲～</p>]]></content>
      
      
      <categories>
          
          <category> 心情物语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-使用axios发起http请求</title>
      <link href="/blog/9643/"/>
      <url>/blog/9643/</url>
      
        <content type="html"><![CDATA[<p>服务端提供好接口，前端需要发起 http 请求调用服务端接口。本文介绍在 Vue 中如何使用 axios 发起 http 请求来调用服务端接口。</p><a id="more"></a><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br><span class="line">npm install vue-axios --save</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中引入 axios</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import VueAxios from &#39;vue-axios&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure><p>在 <code>component</code> 文件中可以通过下面的方式发起 <code>GET</code> 请求，<code>POST</code> 请求将 <code>get</code> 改成 <code>post</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.axios.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">this.axios.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">this.$http.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="我的写法"><a href="#我的写法" class="headerlink" title="我的写法"></a>我的写法</h2><p>首先在 <code>consts/api.js</code>里定义好接口名称地址常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const Api &#x3D; &#123;</span><br><span class="line">    BASE_URL: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">    USER_LIST: &#39;&#x2F;user&#x2F;list&#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Api</span><br></pre></td></tr></table></figure><p>可以在 <code>main.js</code> 里配置好全局 <code>baseURL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL &#x3D; consts.Api.BASE_URL;</span><br></pre></td></tr></table></figure><p>在 <code>common/user.js</code> 里封装好调用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import Consts from &#39;..&#x2F;consts&#39;</span><br><span class="line"></span><br><span class="line">const User &#x3D; &#123;</span><br><span class="line">    async list(params) &#123;</span><br><span class="line">        let res &#x3D; await axios.post(Consts.Api.USER_LIST, params);</span><br><span class="line">        return res.data;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default User</span><br></pre></td></tr></table></figure><p>在 <code>component</code> 里先引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import UserApi from &quot;..&#x2F;..&#x2F;common&#x2F;user&quot;;</span><br></pre></td></tr></table></figure><p>直接调用就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let res &#x3D; await UserApi.list(&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>这里先记录一下 Vue 调用服务端接口的方式，关于 <code>axios</code> 的高阶使用还是要看看官方文档的。目前的写法也够基本使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孟母三迁都是为了娃</title>
      <link href="/blog/73d4/"/>
      <url>/blog/73d4/</url>
      
        <content type="html"><![CDATA[<p>娃快两岁了，意味着快要开始他的求学生涯了，最近听的最多的就是教育，兴趣班，学区房……，烧钱的路感觉已经在眼前了，就看有没有了～</p><a id="more"></a><p>虽说龙生龙凤生凤，但是，所有父母总归会有期盼，倒不是说一定成龙成凤，只是作为一个老母亲，希望他以后可以尽量生活的开心幸福～</p><p>闲来大概查了下南京的学区，价格就不说了，都是我这样的平民买不起的；其实都是双向的，能买在学区的，首先家庭起码有那个底子，其次家长重视子女教育，再次就是小孩本身资质不差。大概理了一下，嗯，学区房意味着大资本，重视意味着是有资本且舍得花心力财力投资的，至于孩子的资质，想来现在这个时代，除了个别的天才，那没的说，大部分孩子应该是差不多水平的，所以，大概率水平，还是要靠积累的资本，这里，资本不仅仅是经济上的，还有人脉上的以及精力上的，当然，都要排除一些个例，毕竟也会有天才的～</p><p>放眼现在我们自己，有时会想，我们那会都是自己上上学，也没花特别资本去做什么，现在也还好啊！但想想，时代早就不同了，我们父母那代，只要考上大学，就是一路前程似锦了，当然，能考上的，那会本身也是龙凤了，到了我们这代，已经没有分房分配工作啥的了，学业会划分层次，顺利完成学业只是完成了一部分任务而已，还有积累资本的工作还没完成，这个时候就是划分大层次的时候了，这里还是要排除那些特殊人物，毕竟，大部分还是我们这号普通人～但是学业好坏多多少少还是会与工作挂钩的，比如说，你是名校毕业，满身才华，意味着你已经积累了一部分资本，你是普通院校毕业，谁都看得出来差距了，不要较真说是北大也出来卖猪肉的，你想想，北大出来卖猪肉，他卖的水平也是不一样的，人家也开连锁创品牌了～</p><p>孟母三迁，还是有道理的，所谓近朱者赤，近墨者黑。只是有时也疑惑，不一定每个人孟母三迁都会成功吧？我不知道，是不是现在每个孟母三迁都会成功，但是之前有看过，迁到融不进去的圈子，那怎么办？看到过一个月薪5000，想给娃上5万幼儿园的帖子，我不知道帖子的真实性，但是作为举例还是可以的，我能想象的到的是，父母只能靠各种借款来支撑这样的日子，除非月薪改成日薪或者时薪吧！再者，这个圈子里确实有优秀，但是，如果我们自己没有那么优秀的时候，能融进去么？别人上这个幼儿园的同时，也是花了重金和精力在外面有辅导的，我们还有额外精力和重金么？</p><p>乱七八糟的写，想想，不能排除学区房的优势，首先，符合孟母三迁的文化熏陶，毕竟，买学区房的都是相对比较重视的，学校师资力量相对也是优秀的，只是，学区房的前提是资本，我们只能在能力范围内，择优选择好的学区，言传身教，身教很重要～还有，能力范围内，尽量给予好的教育吧，不要说以前，以前与现在早就十万八千里的差距，我们出来都看到差距了，更何况他们的未来，谁看得清？现在吃的苦，才有以后的甜，可能～凡事没有一定，只能从概率上来说，是大概率～</p>]]></content>
      
      
      <categories>
          
          <category> 心情物语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 育儿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简笔画-20200520</title>
      <link href="/blog/57eb/"/>
      <url>/blog/57eb/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/57eb/01.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 简笔画 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FireAlpaca-免费绘画软件</title>
      <link href="/blog/d53d/"/>
      <url>/blog/d53d/</url>
      
        <content type="html"><![CDATA[<p>推荐一款免费的轻量级图像编辑和图像绘画软件</p><a id="more"></a><blockquote><p>FireAlpaca,是款能立即「轻松且简单」使用的绘画软件。我们为了使世界上更多的人都能亲身体验，所以采用免费下载。当然，也不存在迄今令人困扰的麦金塔用户 / 微软用户的使用限制。希望在向人学习此软件前，您能爱用此软件到能教导他人程度。<br><em>– FireAlpaca</em></p></blockquote><p>先来看看软件首页截图<br><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/d53d/01.png" alt></p><p>这个软件的图标就是一只羊驼</p><p>百闻不如一见，百见不如一用。这款软件本来就是希望让小白都会使用，抖动修正功能还是不错的，手残党最容易手抖了。</p><p>接下来，我可能会使用这款软件试着创作一些漫画，教程就先不列举了，我也是新手小白，都要从头开始熟悉。加油！</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-记一次http转发https配置错误</title>
      <link href="/blog/8e63/"/>
      <url>/blog/8e63/</url>
      
        <content type="html"><![CDATA[<p>这是一次由于 nginx 配置错误导致的网页无法访问事故。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在浏览器通过 <code>http</code> 访问网址会在地址栏左边提示 <code>不安全</code> 字样，而通过 <code>https</code> 则会显示一个带 🔒 的图标。我的网站刚建的时候就已经可以同时支持 <code>http</code> 和 <code>https</code> 了。</p><p>由于百度收录站点要填写好多个人隐私信息，不高兴填，于是就只提交了首页地址，也没抱什么希望，有次搜索出了我的网站，不过是通过 <code>http</code>方式访问的，于是我就想能不能做个跳转，把 <code>http</code> 请求全部转发到 <code>https</code>上。</p><h2 id="搞事"><a href="#搞事" class="headerlink" title="搞事"></a>搞事</h2><p>我查到了下面的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^(.*)$ https:&#x2F;&#x2F;$host$1 permanent;</span><br></pre></td></tr></table></figure><p>然后我就直接复制到我的配置文件里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name mojipanda.com www.mojipanda.com;</span><br><span class="line">    rewrite ^(.*)$ https:&#x2F;&#x2F;$host$1 permanent;</span><br><span class="line">    ssl_certificate cert&#x2F;mojipanda.com_chain.crt;</span><br><span class="line">    ssl_certificate_key cert&#x2F;mojipanda.com_key.key;</span><br><span class="line">    ssl_session_timeout 4h;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    error_page 500 502 503 504 404 &#x2F;404.html;</span><br><span class="line">    location &#x2F; &#123; </span><br><span class="line">        alias &#x2F;mojipanda&#x2F;blog&#x2F;;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行一下 <code>nginx</code> 的热加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>从百度搜索 <code>磨叽熊猫</code> 然后点击我的主页地址 <a href="http://mojipanda.com">http://mojipanda.com</a> ，果然跳转到 <a href="https://mojipanda.com">https://mojipanda.com</a> 。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>这下可以休息一会了，于是我拿起手机，随手访问了一下我的网站，无法加载！！！</p><p>什么情况！微信试了，两个不同的手机浏览器也试了都不行，急忙打开电脑，电脑浏览器访问又是正常的。想想刚刚只改了那一个配置，赶紧先撤回修改查查原因。</p><p>恢复到之前版本之后，发现微信还是打开不了，不过手机浏览器已经可以访问了，这应该是微信缓存问题，先不管了，查查配置原因。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>原来 <code>http</code> 的 配置要和 <code>https</code> 的配置分开，在 <code>http</code> 的配置里做跳转到 <code>https</code> 就可以了。推荐使用 301 重定向方式，而不是 <code>rewrite</code> 网址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 301 https:&#x2F;&#x2F;mojipanda.com$request_uri;</span><br></pre></td></tr></table></figure><p>修改后的配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">    listen 80;</span><br><span class="line">    server_name mojipanda.com www.mojipanda.com;</span><br><span class="line">    return 301 https:&#x2F;&#x2F;mojipanda.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name mojipanda.com www.mojipanda.com;</span><br><span class="line">    ssl_certificate cert&#x2F;mojipanda.com_chain.crt;</span><br><span class="line">    ssl_certificate_key cert&#x2F;mojipanda.com_key.key;</span><br><span class="line">    ssl_session_timeout 4h;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    error_page 500 502 503 504 404 &#x2F;404.html;</span><br><span class="line">    location &#x2F; &#123; </span><br><span class="line">        alias &#x2F;mojipanda&#x2F;blog&#x2F;;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>首先电脑浏览器访问正常，<code>http</code> 请求也成功跳转到 <code>https</code> 了。</p><p>再试试手机浏览器访问也正常，<code>http</code> 请求也成功跳转到 <code>https</code> 了。</p><p>再打开微信，点一点以前的连接，发现还是不行，也没找到清缓存的地方，退出重启清后台，还是没有效果，最后只能等等看了。（当时应该找另外一个手机验证的）。等了一会，链接终于访问成功了，而分享的旧链接还不行，再等一会，终于恢复正常。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到问题不用慌，对于不熟悉的地方，多尝试，多找找资料，还有多备份。发现问题，先恢复，在收集信息查找原因，定位问题找到解决办法，最后充分验证。遇到问题并没有啥，发现问题解决问题之后，感觉自己又积累了一份经验啦～</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-添加Gitalk评论系统</title>
      <link href="/blog/da9d/"/>
      <url>/blog/da9d/</url>
      
        <content type="html"><![CDATA[<p>Gitalk - 一个基于 Github Issue 和 Preact 开发的评论插件</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>静态博客其实有很多评论系统，每种评论系统都有自己各自的优势。我使用的这套主题已经可以支持下面这些评论系统了。</p><ul><li><a href="https://disqus.com/" target="_blank" rel="external nofollow noopener noreferrer">Disqus</a></li><li><a href="https://github.com/gitalk/gitalk" target="_blank" rel="external nofollow noopener noreferrer">Gitalk</a></li><li><a href="https://valine.js.org" target="_blank" rel="external nofollow noopener noreferrer">Valine</a></li><li><a href="https://github.com/MiniValine/MiniValine/" target="_blank" rel="external nofollow noopener noreferrer">MiniValine</a></li><li><a href="https://www.livere.com/" target="_blank" rel="external nofollow noopener noreferrer">Livere</a></li><li><a href="https://vssue.js.org/zh/" target="_blank" rel="external nofollow noopener noreferrer">Vssue</a></li></ul><h2 id="我为什么选择Gitalk"><a href="#我为什么选择Gitalk" class="headerlink" title="我为什么选择Gitalk"></a>我为什么选择Gitalk</h2><p><code>Disqus</code> 还是不错的，以前使用过，不过现在在国内访问不了。</p><p><code>Valine</code> 第一次看到的时候还是很惊艳的，我也发现有不少博客都在使用，在使用方面，支持 <code>markdown</code> 语法，可以发一些内置表情包，不需要登录认证就可以进行评论。最后一点我个人比较介意，所以忍痛放弃。</p><p><code>Gitalk</code> 是基于 <code>Github Issue</code> 的，评论必须使用 <code>Github</code> 账号登录。我这个博客目前技术内容偏多，所以受众也很明确。即使没有账号进行评论，还是可以通过微博，邮件或者公众号等方式进行联系。而且部署也比较简单，所以就选择它了，剩下几个也就没了解了，感兴趣的可以去看看。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先登录你的 <code>Github</code> 账号，直接访问下面的地址：</p><div class="note link"><p><a href="https://github.com/settings/applications/new" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/settings/applications/new</a></p></div><p>填写 <code>*</code> 号内容并提交，注意这两个 URL 是填写你要使用评论系统的网址。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/01.png" alt></p><p>提交完成你会获得 <code>Client ID</code> 和 <code>Client Secret</code>，这两个是用来填写在配置里的。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/02.png" alt></p><p>我用的主题配置文件 <code>themes/volantis/_config.yml</code> 修改下面几项。</p><ul><li><code>clientID</code> 和 <code>clientSecret</code> 是上面获取的</li><li><code>repo</code> 填写你的github建的仓库名称，因为要用到 <code>issues</code></li><li><code>owner</code>和 <code>admin</code> 写自己账号就行了，注意 <code>admin</code> 格式是数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># https:&#x2F;&#x2F;gitalk.github.io&#x2F;</span><br><span class="line">gitalk:</span><br><span class="line">  clientID: yourClientID</span><br><span class="line">  clientSecret: yourClientSecret</span><br><span class="line">  repo: blog</span><br><span class="line">  owner: cocosongying</span><br><span class="line">  admin: [cocosongying]</span><br></pre></td></tr></table></figure></li></ul><p>配置完成执行 <code>hexo clean &amp;&amp; hexo g</code> 来重新生成网站，<code>hexo s</code> 本地看一下效果。这个时候显示 <code>未找到相关的 Issues 进行评论</code> <code>请联系 @yourname 初始化创建</code>，点击 <code>使用 Github 登录</code> 会跳转到网站首页，没有用。</p><p>所以，这一步很重要，先执行 <code>hexo d</code> 把网站部署上去。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/03.png" alt></p><p>在部署到线上的网站点击 <code>使用 Github 登录</code> 会跳转到下面的页面提示你授权。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/04.png" alt></p><p>授权完成再看你的评论框就已经部署成功了。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/05.png" alt></p><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>部署起来还是挺简单的，而对于使用评论者而言，需要 <code>使用 Github 登录</code> 之后进行授权才可以评论。</p><p>我这个流量小的网站，评论可能会一直是 <code>0 条评论</code> 吧 😂</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs-如何使用MongoDB</title>
      <link href="/blog/4ef0/"/>
      <url>/blog/4ef0/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍在 Nodejs 中如何连接并使用 MongoDB</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>我们需要安装 <code>mongoose</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose --save</span><br></pre></td></tr></table></figure><p>可以在项目中新建一个 <code>mongo</code> 文件夹用来管理 <code>mongodb</code> 的相关操作。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在 <code>mongo</code> 文件夹下新建 <code>connection.js</code>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> mongoUrl = <span class="string">"mongodb://username:123456@localhost:27017/demo"</span>;</span><br><span class="line"></span><br><span class="line">mongoose.Promise = global.Promise;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOptions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        useCreateIndex: <span class="literal">true</span>,</span><br><span class="line">        useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">        useFindAndModify: <span class="literal">false</span>,</span><br><span class="line">        useUnifiedTopology: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mongoose.connect(mongoUrl, getOptions());</span><br><span class="line"><span class="keyword">const</span> client = mongoose.connection;</span><br><span class="line">client.on(<span class="string">'connected'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"mongo connected"</span>) &#125;);</span><br><span class="line">client.on(<span class="string">'reconnected'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"mongo reconnected"</span>) &#125;);</span><br><span class="line">client.on(<span class="string">'disconnected'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"mongo disconnected"</span>) &#125;);</span><br><span class="line">client.on(<span class="string">'error'</span>, (error) =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"connect to "</span> + mongoUrl + <span class="string">"failed"</span>) &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    client,</span><br><span class="line">    close</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>mongo</code> 文件夹下创建文件夹 <code>model</code> 用来记录表定义，<code>mongo/model/demo.js</code> 举例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> demoSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    desc: <span class="built_in">String</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mongoose.model(<span class="string">'demo'</span>, demoSchema, <span class="string">'demo'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = db;</span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在需要操作 <code>mongodb</code> 的文件中先引入，如果是 web 接口服务，可以在主程序中引入一次，后面直接操作 <code>model</code> 就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const conn &#x3D; require(&#39;.&#x2F;connection&#39;);</span><br></pre></td></tr></table></figure><p>举一个查询的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const DemoDB &#x3D; require(&#39;.&#x2F;model&#x2F;demo&#39;);</span><br><span class="line">async function getAll() &#123;</span><br><span class="line">    let res &#x3D; await DemoDB.find();</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>推荐在 <code>mongo</code> 文件夹下编写数据库连接操作部分，为每个 <code>model</code> 编写好操作方法，统一管理，这样代码看起来更清晰，维护起来更方便。</p><p>在接口服务中使用 <code>mongodb</code> 操作按照上面操作就可以了，如果是脚本操作，使用完毕需要关闭连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.close();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs-如何使用MySQL</title>
      <link href="/blog/56c7/"/>
      <url>/blog/56c7/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍在 Nodejs 中如何连接并使用 MySQL</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>我们需要安装 <code>mysql2</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql2 --save</span><br></pre></td></tr></table></figure><p>可以在项目中新建一个 <code>mysql</code> 文件夹用来管理 <code>mysql</code> 的相关操作。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在 <code>mysql</code> 文件夹下新建 <code>connection.js</code>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql2'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>);</span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(config.mysql);</span><br><span class="line"><span class="keyword">const</span> client = pool.promise();</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    pool,</span><br><span class="line">    client</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里 <code>mysql</code> 的连接配置写在 <code>config.js</code> 文件中，示例配置项如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const initVal &#x3D; &#123;</span><br><span class="line">    mysql: &#123;</span><br><span class="line">        host: &#39;localhost&#39;,</span><br><span class="line">        port: 3306,</span><br><span class="line">        user: &#39;username&#39;,</span><br><span class="line">        password: &#39;123456&#39;,</span><br><span class="line">        database: &#39;demo&#39;,</span><br><span class="line">        charset: &#39;utf8mb4&#39;,</span><br><span class="line">        connectionLimit: 5,</span><br><span class="line">        dateStrings: true,</span><br><span class="line">        decimalNumbers: true,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; initVal;</span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在需要操作 <code>mysql</code> 的文件中先引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; client &#125; &#x3D; require(&#39;.&#x2F;connection&#39;);</span><br></pre></td></tr></table></figure><p>之后就可以使用 sql 语句进行愉快的操作了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">async function getById(id) &#123;</span><br><span class="line">    let sql &#x3D; &#96;select * from demo where id &#x3D; ?&#96;;</span><br><span class="line">    let args &#x3D; [id];</span><br><span class="line">    let res &#x3D; await client.query(sql, args);</span><br><span class="line">    return res[0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是 <code>return res[0]</code> 是返回的结果集，即对于查询有数据时，它返回的是数组。</p><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>推荐在 <code>mysql</code> 文件夹下编写数据库连接操作部分，这样代码看起来更清晰。</p><p>在接口服务中使用 <code>mysql</code> 操作按照上面操作就可以了，如果是脚本操作，使用完毕需要关闭连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.end();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs-如何使用Redis</title>
      <link href="/blog/1ab7/"/>
      <url>/blog/1ab7/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍在 Nodejs 中如何连接并使用 Redis，通过 Nodejs 操作使用 Redis 还是相对比较简单的。</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>我们需要安装 <code>redis</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redis --save</span><br></pre></td></tr></table></figure><p>可以在项目中新建一个 <code>cache</code> 文件夹用来管理 <code>redis</code> 的相关操作。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在 <code>cache</code> 文件夹下新建 <code>connection.js</code>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">const</span> client = redis.createClient(&#123;</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    password: <span class="string">"123456"</span>,</span><br><span class="line">    db: <span class="number">1</span>,</span><br><span class="line">    retry_strategy: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (options.error &amp;&amp; options.error.code === <span class="string">'ECONNREFUSED'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'The server refused the connection'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.total_retry_time &gt; <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Retry time exhausted'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.attempt &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.min(options.attempt * <span class="number">100</span>, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> expire = promisify(client.expire).bind(client);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">get</span> = promisify(client.<span class="keyword">get</span>).bind(client);</span><br><span class="line">const <span class="keyword">set</span> = promisify(client.<span class="keyword">set</span>).bind(client);</span><br><span class="line">const del = promisify(client.del).bind(client);</span><br><span class="line"></span><br><span class="line">class Cache &#123;</span><br><span class="line">    Timeout = &#123;</span><br><span class="line">        Default: <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">get</span>(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">get</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    async <span class="keyword">set</span>(key, value, timeout) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">set</span>(key, value);</span><br><span class="line">        if (timeout) &#123;</span><br><span class="line">            <span class="keyword">await</span> expire(key, timeout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> del(key) &#123;</span><br><span class="line">        <span class="keyword">await</span> del(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> Cache();</span><br></pre></td></tr></table></figure><p>这里主要是 <code>redis</code> 的连接以及 <code>redis</code> 的几个简单操作，如获取，设置，删除，如果需要其他功能可以继续封装。</p><p>关于 <code>redis</code> 的连接配置可以单独写到配置文件里，这里为了方便介绍，把配置写死在示例代码里了。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在需要操作 <code>redis</code> 的文件中先引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Cache &#x3D; require(&#39;.&#x2F;connection&#39;);</span><br></pre></td></tr></table></figure><p>获取某个 key 对应的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await Cache.get(key);</span><br></pre></td></tr></table></figure><p>设置一个 key 对应的 value：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await Cache.set(key, value);</span><br></pre></td></tr></table></figure><p>如果需要指定缓存有效期限，比如 1 天：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await Cache.set(key, value, 24 * 60 * 60);</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>推荐在 <code>cache</code> 文件夹下为每个 <code>key</code> 新建对应的文件程序来操作 <code>redis</code>，把这个 <code>cache</code> 当成一个缓存模块，其他地方使用只要引入这个模块操作就好了。这样管理起来方便，代码看起来更清晰。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs-基于Koa框架写个简单的接口</title>
      <link href="/blog/fb4f/"/>
      <url>/blog/fb4f/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍如何使用 Nodejs 快速搭建服务端并提供简单的接口程序。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先我们创建一个项目文件夹 <code>demo</code>，进入这个文件夹，运行 <code>npm init</code> 初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>执行 <code>npm init</code> 命令会让你填写项目相关信息，可以一路默认，之后再改都可以。它主要就是在项目中新建一个 <code>package.json</code> 的文件并初始化一些项目信息。</p><p>其次需要安装 <code>Koa</code> 框架及一些插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install koa --save</span><br><span class="line">npm install koa-router --save</span><br><span class="line">npm install koa-bodyparser --save</span><br></pre></td></tr></table></figure><h2 id="编写主程序"><a href="#编写主程序" class="headerlink" title="编写主程序"></a>编写主程序</h2><p>新建文件 <code>index.js</code>，这个文件名可以修改，同步修改一下 <code>package.json</code> 里 <code>main</code>项对应的文件名，表示这个文件是启动入口。<code>index.js</code> 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const Koa &#x3D; require(&#39;koa&#39;);</span><br><span class="line">const router &#x3D; require(&#39;koa-router&#39;)();</span><br><span class="line">const bodyParser &#x3D; require(&#39;koa-bodyparser&#39;);</span><br><span class="line">const app &#x3D; new Koa();</span><br><span class="line"></span><br><span class="line">const index &#x3D; router.get(&#39;&#x2F;demo&#39;, ctx &#x3D;&gt; &#123;</span><br><span class="line">    ctx.response.body &#x3D; &#123; code: 0, data: &#39;Hello World!&#39; &#125;;</span><br><span class="line">&#125;).routes();</span><br><span class="line"></span><br><span class="line">app.use(index);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 捕获未定义路由</span><br><span class="line">app.use((ctx) &#x3D;&gt; &#123;</span><br><span class="line">    ctx.response.body &#x3D; &#123; code: 404 &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动项目</span><br><span class="line">app.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#96;Server is starting at port 3000&#96;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="运行使用"><a href="#运行使用" class="headerlink" title="运行使用"></a>运行使用</h2><p>在 node 环境中可以直接通过下面的命令启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>项目启动完毕就可以访问我们刚刚定义的接口 <code>http://localhost:3000/demo</code> 来查看返回信息了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;code: 0, data: &quot;Hello World!&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>前端页面调用接口可能会有跨域问题，解决方案有好几种，这里介绍简单一点的。</p><p>先安装一个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install koa2-cors --save</span><br></pre></td></tr></table></figure><p>在启动入口文件 <code>index.js</code> 加上这两句就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const cors = require(<span class="string">'koa2-cors'</span>);</span><br><span class="line">app.use(cors());</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>Nodejs 这个脚本语言还是很强大的，能写前端就算了，居然还能写服务端。想想之前用 java 的时候要写好多东西，还有各种配置，最后打包运行花费好长时间。</p><p>当然 java 有它的强大，如果只是学习写写简单的接口，像 <code>Nodejs</code> <code>Python</code> <code>Go</code> 都有很简单的操作方法，也够简单的使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-使用全局静态常量</title>
      <link href="/blog/aa27/"/>
      <url>/blog/aa27/</url>
      
        <content type="html"><![CDATA[<p>有很多共通的东西，需要我们使用全局静态常量。在 Vue 中是如何实现的呢？一起来看看吧～</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>服务端定义了接口给前端调用，各个模块可能会调用到相同的接口，即使是不同的接口，如果服务端修改了接口定义，前端就要跟着改，这个时候，如果这些定义在一个指定文件，那么我们只要修改这一个文件就好了，其他模块都可以调用到。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先在 <code>src</code> 目录新建文件夹 <code>consts</code> 并创建 <code>index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Api &#x3D;  &#123;</span><br><span class="line">    BASE_URL: &#39;https:&#x2F;&#x2F;mojipanda.com&#39;,</span><br><span class="line">    DEMO_SHOW: &#39;&#x2F;demo&#x2F;show&#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    Api</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line">import consts from &#39;.&#x2F;consts&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line">Vue.prototype.Global &#x3D; consts</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><p>主要是添加下面两行，这里 <code>Global</code> 的名字可以修改成其他命名，当然 <code>consts</code> 文件夹命名也可以修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import consts from &#39;.&#x2F;consts&#39;</span><br><span class="line">Vue.prototype.Global &#x3D; consts</span><br></pre></td></tr></table></figure><p>准备工作已经完成，接下来只要通过下面的语句就可以获取到我们在 <code>consts/index.js</code> 中定义的常量了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.Global.Api.BASE_URL</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>总体感觉还是比较简单的，对于 <code>consts/index.js</code>，当常量越来越多，也是不方便管理的，我们可以进行拆分。对例子中的 <code>Api</code> 来说，我们可以在 <code>consts</code> 文件夹新建一个 <code>api.js</code>，在这里定义常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const Api &#x3D; &#123;</span><br><span class="line">    BASE_URL: &#39;https:&#x2F;&#x2F;mojipanda.com&#39;,</span><br><span class="line">    DEMO_SHOW: &#39;&#x2F;demo&#x2F;show&#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Api</span><br></pre></td></tr></table></figure><p>修改 <code>consts/index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Api from &#39;@&#x2F;consts&#x2F;api&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    Api</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样拆分就完成了，当我们需要新增其他类型的常量，只要再新建一个文件并在 <code>consts/index.js</code> 引入就可以正常使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-状态管理模式Vuex</title>
      <link href="/blog/6604/"/>
      <url>/blog/6604/</url>
      
        <content type="html"><![CDATA[<p>简单介绍一下在 Vue 项目中如何使用 Vuex 实现状态管理。比如我从服务端获取的个人信息，有很多模块都用到，这个时候相当于全局存储，方便各个模块调用。</p><a id="more"></a><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我在学习使用 <code>Vue</code> 的过程中，遇到了一个存储问题，在登录的时候获取到个人信息，我需要在多个模块展示，容易想到的就是弄个全局变量，各个模块都方便调用。这个时候我查到了 <code>Vuex</code>，下面我们就来看看如何使用。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p>为了结合 <code>cookie</code> 使用我们还可以安装一下 <code>vue-cookies</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cookies --save</span><br></pre></td></tr></table></figure><p>在 <code>src</code> 文件夹下创建文件夹 <code>store</code> 并新建文件 <code>index.js</code></p><p>举个例子用，先上代码，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import Vuex from &#39;vuex&#39;;</span><br><span class="line">import cookie from &#39;vue-cookies&#39;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        userInfo: &#123;&#125;,</span><br><span class="line">        isLogin: cookie.get(&#39;isLogin&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        userInfo: state &#x3D;&gt; state.userInfo,</span><br><span class="line">        isLogin: state &#x3D;&gt; state.isLogin</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        setUserInfo(state, data) &#123;</span><br><span class="line">            state.userInfo &#x3D; data;</span><br><span class="line">        &#125;,</span><br><span class="line">        setLoginState(state, data) &#123;</span><br><span class="line">            state.isLogin &#x3D; data;</span><br><span class="line">            cookie.set(&#39;isLogin&#39;, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        setUserInfo(&#123; commit &#125;, data) &#123;</span><br><span class="line">            commit(&#39;setUserInfo&#39;, data);</span><br><span class="line">        &#125;,</span><br><span class="line">        setLoginState(&#123; commit &#125;, data) &#123;</span><br><span class="line">            commit(&#39;setLoginState&#39;, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中将 <code>store</code> 引入进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>在 <code>store/index.js</code> 文件中</p><p><code>state</code> 表示要要管理的状态，以 key-value 键值对的形式存储。</p><p><code>getters</code> 是提供我们获取状态的入口。可以使用下面的语句获取信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let userInfo &#x3D; this.$store.getters.userInfo;</span><br></pre></td></tr></table></figure><p><code>mutations</code> 是用来修改 <code>state</code> 管理的值。</p><p><code>actions</code> 支持异步操作，官方简易通过这里提交修改信息，最终会调用 <code>mutations</code>。可以使用下面的语句修改信息，这里就是调用的 <code>actions</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.dispatch(&quot;setLoginState&quot;, true);</span><br></pre></td></tr></table></figure><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>使用上面的方法操作之后，我发现刷新一下页面就会导致之前存储的状态全部丢失。然后找到了下面的解决方案，就是在 <code>localStorage</code> 中存储 <code>store</code> 的值，创建的时候再获取。这样前端的状态信息就不会丢了。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    if (localStorage.getItem(&quot;store&quot;)) &#123;</span><br><span class="line">      this.$store.replaceState(</span><br><span class="line">        Object.assign(</span><br><span class="line">          &#123;&#125;,</span><br><span class="line">          this.$store.state,</span><br><span class="line">          JSON.parse(localStorage.getItem(&quot;store&quot;))</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    window.addEventListener(&quot;beforeunload&quot;, () &#x3D;&gt; &#123;</span><br><span class="line">      localStorage.setItem(&quot;store&quot;, JSON.stringify(this.$store.state));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>特性</th><th>数据生命周期</th><th>数据存放大小</th><th>与服务器通信</th></tr></thead><tbody><tr><td>cookie</td><td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td><td>4K左右</td><td>每次都会携带在HTTP头中，如果使用cookie保存过多数据，会带来性能问题</td></tr><tr><td>sessionStorage</td><td>仅在当前会话下有效，关闭页面或浏览器后被清除</td><td>一般5M</td><td>仅在浏览器中保存，不参与和服务器的通信</td></tr><tr><td>localStorage</td><td>除非被清除，否则永久保存</td><td>同上</td><td>同上</td></tr></tbody></table><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>当 <code>store/index.js</code> 管理的状态越来越多时，这个文件肯定会很长，不方便维护。可以将 <code>getters</code> <code>mutations</code> <code>actions</code> 单独拆分出来。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-集成AdminLTE</title>
      <link href="/blog/3c0d/"/>
      <url>/blog/3c0d/</url>
      
        <content type="html"><![CDATA[<p>本文介绍使用 <code>vue-cli3</code> 集成 <code>AdminLTE-2.4.18</code></p><a id="more"></a><blockquote><p>AdminLTE 是基于 Bootstrap 的开源响应式前端模板。</p></blockquote><p>我个人比较喜欢这套模板的原因主要有：</p><ul><li>美观，众多模板中一眼就看中它了</li><li>开源免费</li><li>响应式支持很好</li></ul><p>我不是前端开发人员，搞样式这种繁琐的事情还是交给现成的吧。虽然 AdminLTE3 也发布了，但是看起来个人感觉没有 AdminLTE2好，响应式处理也有点问题。感兴趣可以去官网看看不同版本的效果。</p><h2 id="使用vue-cli3创建项目"><a href="#使用vue-cli3创建项目" class="headerlink" title="使用vue-cli3创建项目"></a>使用vue-cli3创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><p>初始化项目步骤就不介绍了，按照vue-cli一步步操作就完成了。</p><h2 id="引入AdminLTE"><a href="#引入AdminLTE" class="headerlink" title="引入AdminLTE"></a>引入AdminLTE</h2><p>接下来我们先安装 <code>admin-lte</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i admin-lte@2.4.18 --save</span><br></pre></td></tr></table></figure><p>修改 <code>public/index.html</code> 给 body 加上样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body class&#x3D;&quot;hold-transition skin-blue sidebar-mini&quot;&gt;</span><br></pre></td></tr></table></figure><p>修改 <code>src/main.js</code></p><figure class="highlight plain"><figcaption><span>src/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line"></span><br><span class="line">import &#39;admin-lte&#x2F;bower_components&#x2F;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.min.css&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;bower_components&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;bower_components&#x2F;Ionicons&#x2F;css&#x2F;ionicons.min.css&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;dist&#x2F;css&#x2F;skins&#x2F;_all-skins.min.css&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;dist&#x2F;css&#x2F;AdminLTE.min.css&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;bower_components&#x2F;bootstrap&#x2F;dist&#x2F;js&#x2F;bootstrap.min.js&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;dist&#x2F;js&#x2F;adminlte.min.js&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><p>修改 <code>src/App.vue</code></p><figure class="highlight plain"><figcaption><span>src/App.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>引入部分到这里就完成了，新页面需要新建模板文件，对照源码复制就好了。<br>空白模板可以查看 admin-lte 源码包里的 <code>starter.html</code>，把 body 里面的 <code>&lt;div class=&quot;wrapper&quot;&gt;...&lt;/div&gt;</code> 部分拷贝到新建的页面 <code>&lt;template&gt;&lt;/template&gt;</code> 中。</p><h2 id="启动预览"><a href="#启动预览" class="headerlink" title="启动预览"></a>启动预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>这个时候网页还有错误，Bootstrap 需要引入 JQuery，新建一个文件 <code>vue.config.js</code> 配置一下就行了。</p><figure class="highlight plain"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">            new webpack.ProvidePlugin(&#123;</span><br><span class="line">                $: &#39;jquery&#39;,</span><br><span class="line">                jQuery: &#39;jquery&#39;,</span><br><span class="line">                &#39;window.jQuery&#39;: &#39;jquery&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>由于要对照预览样式来查看自己想要的组件，我先下载了一份源码，在浏览器中打开 <code>index.html</code>，这个时候可以看到官方提供的所有的组件样式，然后浏览器右键显示网页源代码，就可以找到需要的组件的代码是怎么写的了。</p><p>为了后续使用方便，因为有不少组件都是通用的，所以我将各部分组件拆开了，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;Header &#x2F;&gt;</span><br><span class="line">    &lt;MainSidebar &#x2F;&gt;</span><br><span class="line">    &lt;ContentWrapper &#x2F;&gt;</span><br><span class="line">    &lt;Footer &#x2F;&gt;</span><br><span class="line">    &lt;ControlSidebar &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>由于 ContentWrapper 部分是每个页面独有的，可以做成路由，这样新写页面时只要写这部分就行了，头部底部，菜单导航之类的都不用修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- Content Wrapper. Contains page content --&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content-wrapper&quot;&gt;</span><br><span class="line">    &lt;router-view &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;!-- &#x2F;.content-wrapper --&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>胡言乱语</title>
      <link href="/blog/8827/"/>
      <url>/blog/8827/</url>
      
        <content type="html"><![CDATA[<p>母亲节快乐～</p><a id="more"></a><p>一晃，工作已经快5年了，算得上是中长的工作年龄了吧！疫情的原因，今年过年休息了1个多月，3月份回南京，原先安排的同事有其他工作，临时被作为替补的，安排跟了审计厅的项目，工作也渐渐忙碌起来了</p><p>按理，应该是休息期间写点啥的，只是，啥都没写，你说期间都干了啥，我也不知道，好像就是吃饭，睡觉，带娃，有时工作，一天天也都过去了，最近工作忙碌起来了，反而想写点啥</p><p>一直在学校，接触外界不多，加上工作性质原因，见世面相对更窄了～很多时候，感觉已经像温水煮青蛙，我就是那只青蛙🐸；啥都没变，只是，少了当初刚开始的激情和动力，不得不说，这是可耻的，也是恐怖的，不折不扣的成了一个没有情调、没有梦想的行尸走肉～</p><p>海豚宝宝已经快两岁了，如果说父母的高度决定子女的高度，似乎已经想象到他的未来，有点恐慌；再回头看看自己，不知觉中，很多都已经失去了兴趣，夸张点，与社会似乎脱节了已经，要资产，不好意思，木的；要底蕴，不好意思，木的；要能力，不好意思，还是木的……别人增长的是知识与阅历，而我唯一增长的是渐渐上调的年龄数字，这么多年，我都干什么了？</p><p>或许以前一直是那只青蛙，没有太察觉落差，而这次出来，接触到了不同的人，接触到了不同的事，这种对比和落差更加暴露无遗，相形见绌～</p><p>且不说资本的差距，也不说业务能力的差距，单论最直白的沟通交流能力吧，每个人的行事作风或许都不一致，但是，的确符合一个定律，当你的知识面够广时，你可以带动话题的走向，可以从他人的叙述中择取到你想要的信息，筛选出有用的信息；而当你的知识积累及专业水平远远超越对方时，或许不能实现每一句都是真理，但是至少可以实现即便你是在挑对方的错，也可以让对方心悦诚服的认理～很多时候，盲目的聊天，我听不到啥或者都听到了，却不知道是啥，但是他们却可以敏锐的提炼出有用的信息，这是落差之一；有时候与他人沟通，我完全盲目应该如何带动话题，只能听着，或者，就此沉默，而他们，可以让话题一直不停，这是落差之二；有时候提出对方不足，我可能最后是被说服的一方或者是提高音量的一方，而他们可以做到一直是平淡温和的语气，带动对方跟上他们的思路，这是落差之三……比如说，经常会被审计单位是带着一肚子的不满和理由过来的，有时候阵势挺大，甚至有点教训的气场，但最后都被他们以云淡风轻的气场和温润如玉的语句给说服了～想想如果是我，很多时候，要么是被对方说服，要么是与对方争吵，我所能做的往往是无话可说或者是提升音量，落差着实大～</p><p>很多时候，我们之所以迷茫、彷徨，只是因为能力欠佳、欲望太多，想想，确实有点符合自己的现状～传说中的：能力撑不起野心～心思涌动，能力欠缺～</p><p>现在的自己已经是三个身份：一个是女儿，一个是母亲，一个是妻子～于女儿，要有孝，于母亲，要担责，于妻子，要有责～如果说信命，那么，也就认了；但是，真心是没有拿的出手的亮点，明显是自己失责……嗯，还是应该做点啥吧，可以想想～</p><p>当然，今天是母亲节，还是要说一句，所有妈妈们，母亲节快乐！</p>]]></content>
      
      
      <categories>
          
          <category> 心情物语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝宝教爸爸快捷输入</title>
      <link href="/blog/7055/"/>
      <url>/blog/7055/</url>
      
        <content type="html"><![CDATA[<p>宝宝在爸爸的电脑上随便乱按，意外教会了爸爸一种快捷输入方式。</p><a id="more"></a><p>事情上这样的，我的苹果笔记本打开在一旁，开着一个浏览器的空白页，正在思索着查点资料，然后临时有事离开了座位。</p><p>刚走出房门没一会，就看见宝宝兴冲冲的趴上我的电脑，一边喊着“帮忙，帮忙”，一边在键盘上随便乱按。接着就看到了下面这个样子。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/7055/01.png" alt></p><p>好像也没啥是吧，就是浏览器里输入里几个字符而已。再仔细看看，这个大于等于号，还有这个除号是怎么敲出来的。</p><p>我思索了一会，因为我并不知道这个快捷键，而且输入法并不是智能模式，于是我尝试输入了一下，可单个按键的敲怎么也敲不出来这种组合符号啊。那么只能是组合按键了，最终被我试出来了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * ┌────────┐   ┌─────┐ </span><br><span class="line"> * │ option │ + │ &gt; . │ &#x3D; ≥</span><br><span class="line"> * └────────┘   └─────┘ </span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * ┌────────┐   ┌─────┐ </span><br><span class="line"> * │ option │ + │ ? &#x2F; │ &#x3D; ÷</span><br><span class="line"> * └────────┘   └─────┘ </span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p>仔细看看这三个键确实在一块呢，也难怪宝宝这小手还能按出组合快捷键来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * ┬─┴─┬─┴─┬</span><br><span class="line"> * │&gt; .│? &#x2F;│</span><br><span class="line"> * ┼───┴──┬┴</span><br><span class="line"> * │option│</span><br><span class="line"> * └──────┘</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p>好吧，宝宝你让爸爸奇奇怪怪的知识点又增加了呢。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * ┌───────┐   ┌────────┐   ┌─────┐ </span><br><span class="line"> * │ shift │ + │ option │ + │  K  │ &#x3D; </span><br><span class="line"> * └───────┘   └────────┘   └─────┘ </span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装MongoDB</title>
      <link href="/blog/ac76/"/>
      <url>/blog/ac76/</url>
      
        <content type="html"><![CDATA[<p>介绍一下如何通过 docker 安装 mongodb</p><a id="more"></a><p>MongoDB 是一个基于分布式文件存储的数据库。这里介绍一下如何通过 docker 来安装。</p><h2 id="查看可用版本"><a href="#查看可用版本" class="headerlink" title="查看可用版本"></a>查看可用版本</h2><p>我们首先通过 MongoDB 镜像库来查询有哪些可用版本。</p><div class="note link"><p><a href="https://hub.docker.com/_/mongo?tab=tags" target="_blank" rel="external nofollow noopener noreferrer">MongoDB 镜像库</a></p></div><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>可以通过下面的命令获取最新版本的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo:latest</span><br></pre></td></tr></table></figure><p>往往我们需要知道版本号，可以通过指定版本号的方式获取指定镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo:4.2</span><br></pre></td></tr></table></figure><h2 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h2><p>下面两种执行命令都可以查看本地获取的镜像列表，检查一下是否获取成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>镜像获取完毕就可以启动容器了，下面是我安装的时候使用的执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 27017:27017 \</span><br><span class="line">    -v /mojipanda/docker/mongo/conf:/data/configdb \</span><br><span class="line">    -v /mojipanda/docker/mongo/data:/data/db \</span><br><span class="line">    --name mongo \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -d mongo:4.2 \</span><br><span class="line">    --auth</span><br></pre></td></tr></table></figure><p>介绍一下主要执行参数：</p><table><thead><tr><th align="left">执行参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-p 27017:27017</code></td><td align="left">指定端口号</td></tr><tr><td align="left"><code>-v</code></td><td align="left">挂载本地目录</td></tr><tr><td align="left"><code>--name mongo</code></td><td align="left">设置容器名称为 mongo</td></tr><tr><td align="left"><code>--restart=always</code></td><td align="left">设置容器重启后自动启动</td></tr><tr><td align="left"><code>-d mongo:4.2</code></td><td align="left">指定镜像</td></tr><tr><td align="left"><code>--auth</code></td><td align="left">设置访问需要授权</td></tr></tbody></table><h2 id="启动成功"><a href="#启动成功" class="headerlink" title="启动成功"></a>启动成功</h2><p>通过下面的命令查看容器的运行信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="创建用户和设置密码"><a href="#创建用户和设置密码" class="headerlink" title="创建用户和设置密码"></a>创建用户和设置密码</h2><p>首先执行下面的命令行进入到容器里并使用 MongoDB 的 shell 连接到 admin 数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mongo mongo admin</span><br></pre></td></tr></table></figure><p>执行语句创建一个用户名为 <code>root</code>，密码为 <code>123456</code> 的用户，并授权可以操作所有数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; user:&#39;root&#39;,pwd:&#39;123456&#39;,roles:[ &#123; role:&#39;userAdminAnyDatabase&#39;, db: &#39;admin&#39;&#125;]&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>到这里我们的 mongodb 就已经成功安装部署好了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装MySQL</title>
      <link href="/blog/ef32/"/>
      <url>/blog/ef32/</url>
      
        <content type="html"><![CDATA[<p>介绍一下如何通过 docker 安装 mysql</p><a id="more"></a><p>MySQL 是最流行的关系型数据库管理系统。这里介绍一下如何通过 docker 来安装。</p><h2 id="查看可用版本"><a href="#查看可用版本" class="headerlink" title="查看可用版本"></a>查看可用版本</h2><p>我们首先通过 MySQL 镜像库来查询有哪些可用版本。</p><div class="note link"><p><a href="https://hub.docker.com/_/mysql?tab=tags" target="_blank" rel="external nofollow noopener noreferrer">MySQL 镜像库</a></p></div><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>可以通过下面的命令获取最新版本的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure><p>往往我们需要知道版本号，可以通过指定版本号的方式获取指定镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br></pre></td></tr></table></figure><h2 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h2><p>下面两种执行命令都可以查看本地获取的镜像列表，检查一下是否获取成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>镜像获取完毕就可以启动容器了，下面是我安装的时候使用的执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 3306:3306 \</span><br><span class="line">    -v /mojipanda/docker/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">    -v /mojipanda/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">    --name mysql \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -d mysql:8.0</span><br></pre></td></tr></table></figure><p>介绍一下主要执行参数：</p><table><thead><tr><th align="left">执行参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-p 3306:3306</code></td><td align="left">指定端口号</td></tr><tr><td align="left"><code>-v</code></td><td align="left">挂载本地目录</td></tr><tr><td align="left"><code>-e MYSQL_ROOT_PASSWORD=123456</code></td><td align="left">设置root用户的密码 123456</td></tr><tr><td align="left"><code>--name mysql</code></td><td align="left">设置容器名称为 mysql</td></tr><tr><td align="left"><code>--restart=always</code></td><td align="left">设置容器重启后自动启动</td></tr><tr><td align="left"><code>-d mysql:8.0</code></td><td align="left">指定镜像</td></tr></tbody></table><h2 id="启动成功"><a href="#启动成功" class="headerlink" title="启动成功"></a>启动成功</h2><p>通过下面的命令查看容器的运行信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><blockquote><p>到这里我们的 mysql 就已经成功安装部署好了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Redis</title>
      <link href="/blog/a342/"/>
      <url>/blog/a342/</url>
      
        <content type="html"><![CDATA[<p>介绍一下如何通过 docker 安装 redis</p><a id="more"></a><p>Redis 是一个高性能的 <code>key-value</code> 数据库。这里介绍一下如何通过 docker 来安装。</p><h2 id="查看可用版本"><a href="#查看可用版本" class="headerlink" title="查看可用版本"></a>查看可用版本</h2><p>我们首先通过 Redis 镜像库来查询有哪些可用版本。</p><div class="note link"><p><a href="https://hub.docker.com/_/redis?tab=tags" target="_blank" rel="external nofollow noopener noreferrer">Redis 镜像库</a></p></div><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>可以通过下面的命令获取最新版本的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p>往往我们需要知道版本号，可以通过指定版本号的方式获取指定镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:6.0</span><br></pre></td></tr></table></figure><h2 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h2><p>下面两种执行命令都可以查看本地获取的镜像列表，检查一下是否获取成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>镜像获取完毕就可以启动容器了，下面是我安装的时候使用的执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 6379:6379 \</span><br><span class="line">    -v /mojipanda/docker/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">    -v /mojipanda/docker/redis/data:/data \</span><br><span class="line">    --name redis \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -d redis:6.0 \</span><br><span class="line">    redis-server --appendonly yes --requirepass <span class="string">"123456"</span></span><br></pre></td></tr></table></figure><p>介绍一下主要执行参数：</p><table><thead><tr><th align="left">执行参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-p 6379:6379</code></td><td align="left">指定端口号</td></tr><tr><td align="left"><code>-v</code></td><td align="left">挂载本地目录</td></tr><tr><td align="left"><code>--name redis</code></td><td align="left">设置容器名称为 redis</td></tr><tr><td align="left"><code>--restart=always</code></td><td align="left">设置容器重启后自动启动</td></tr><tr><td align="left"><code>-d redis:6.0</code></td><td align="left">指定镜像</td></tr><tr><td align="left"><code>--appendonly yes</code></td><td align="left">数据持久化</td></tr><tr><td align="left"><code>--requirepass &quot;123456&quot;</code></td><td align="left">设置访问需要的密码 123456</td></tr></tbody></table><h2 id="启动成功"><a href="#启动成功" class="headerlink" title="启动成功"></a>启动成功</h2><p>通过下面的命令查看容器的运行信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><blockquote><p>到这里我们的 redis 就已经成功安装部署好了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下阿里云服务器和域名购买以及备案</title>
      <link href="/blog/ef9e/"/>
      <url>/blog/ef9e/</url>
      
        <content type="html"><![CDATA[<p>从 <code>2020-05-01</code> 购买阿里云服务器及域名到 <code>2020-05-08</code> 备案成功。记录一下其中的历程。</p><a id="more"></a><blockquote><p>问：为什么突然想要购买服务器和域名搭建网站？</p></blockquote><blockquote><p>答：作为一名开发人员，我觉得能够拥有属于自己的网站是一件很酷的事情。可以搭建博客来记录我想记录的，可以自己实现有趣的内容分享给朋友，可以更加深入的去学习，总之，就是这样了。</p></blockquote><blockquote><p>问：怎么选择的云服务器和域名？</p></blockquote><blockquote><p>答：目前使用阿里云服务器比较普遍，厂商方面就没有特别挑选了。起步阶段除了搭建博客还没想到可以做别的什么，因此配置上不用太挑剔。至于域名，随便搜索了一下 <code>mojipanda</code>，看到还有 <code>.com</code> 域名，那就这样吧。</p></blockquote><table><thead><tr><th align="left">名称</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">实例规格</td><td align="left">ecs.s6-c1m1.small</td></tr><tr><td align="left">CPU</td><td align="left">1核</td></tr><tr><td align="left">内存</td><td align="left">1G</td></tr><tr><td align="left">操作系统</td><td align="left">Ubuntu 18.04 64位</td></tr><tr><td align="left">贷款</td><td align="left">固定带宽 1M</td></tr></tbody></table><blockquote><p>问：一共花费了多少钱？</p></blockquote><blockquote><p>答：听说是购买的年限越长越优惠，阿里云还有券之类的，还有新人优惠，看网上别人在双十一购买的比较便宜，我这个呢，服务器和域名都是买了3年，云服务器 <code>¥937.6</code>，英文域名 <code>¥193.0</code>，因此一共 <code>¥1130.6</code>，差不多一天一块钱的样子。</p></blockquote><blockquote><p>问：从购买到备案成功需要多久？</p></blockquote><blockquote><p>答：感觉比预想中的要快，从 <code>05-01</code> 上午 到 <code>05-08</code> 上午一共 7 整天。</p></blockquote><blockquote><p>问：都是什么流程？</p></blockquote><blockquote><p>答：购买域名需要填写实名认证信息，这个填一下很快就好了，审核也快，之后购买域名，购买云服务器，选好下单付钱就行了。然后把域名绑定到服务器（操作步骤有点忘记了，总之不复杂，就是填信息）。这个时候可以去服务器上随便部署个 <code>Hello World</code> 看看能不能访问。由于域名没有备案，因此只能通过公网IP访问。所以接下来就是备案，在阿里云App搜索备案，然后按照实际信息填吧。由于域名信息需要2-3天才能同步到阿里这边，然后在 <code>05-03</code> 早上我发现可以提交初审了，果断提交，说是24h内有阿里工作人员电话核实备案信息，果然才刚到中午就接到了电话，核实了一下个人信息，网站信息。初审之后阿里自己会复核之后提交到管局，6-20个工作日通知审核结果，本来以为会很长，结果 <code>05-08</code> 上午就收到备案成功的短信了，收到短信之后需要再等一会阿里同步到备案信息，网站域名就可以正式访问了。</p></blockquote><blockquote><p>问：网站如何支持https访问？</p></blockquote><blockquote><p>答：购买阿里云的SSL服务好像有点贵，然后网上搜索了一下免费的，用这个填写下网站信息，下载证书，先提交到阿里云后台（这个网站提供了一键操作），再放到服务器里配置一下。</p></blockquote><div class="note link"><p><a href="https://freessl.cn/" target="_blank" rel="external nofollow noopener noreferrer">免费 SSL</a></p></div><blockquote><p>问：备案成功之后需要做什么？</p></blockquote><blockquote><p>答：我收到备案成功通知之后，先把备案号按照要求放到网页底部链接到备案系统网站，部署到服务器，正好这个时候阿里云已收到备案信息，域名正式可以访问了，然后通知好友网站上线啦，最后写下了这篇博文。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 经验小结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-快速简约高效的博客框架</title>
      <link href="/blog/1f8f/"/>
      <url>/blog/1f8f/</url>
      
        <content type="html"><![CDATA[<p>Hexo - 一个快速简约且高效的静态博客框架</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo 是一个静态博客框架，将 Markdown 文件渲染转换成 html，支持很多功能强大的插件，支持很多各种有趣的主题，总有一款适合你。</p><h2 id="简易教程"><a href="#简易教程" class="headerlink" title="简易教程"></a>简易教程</h2><p>安装 <code>hexo-cli</code> 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>初始化项目 <code>blog</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>启动项目，通过 <code>http://localhost:4000</code> 访问预览效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>写一篇新博客，推荐使用下面的命令行创建，也可以在 <code>source/_posts/</code> 文件夹内自行创建。命令行创建的文件会根据 <code>scaffolds</code> 文件夹里的模板创建。这里的模板可以自行修改，添加一些通用配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">"这是文章名称"</span></span><br></pre></td></tr></table></figure><p>如果写的博客还不想立即发布，推荐使用下面的命令行创建草稿。也可以在 <code>source/_drafts/</code> 文件夹内自行创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft <span class="string">"这是文章名称"</span></span><br></pre></td></tr></table></figure><p>草稿写完可以执行命令来发布，当然也可以直接移动到 <code>source/_posts/</code> 文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish post <span class="string">"这是文章名称"</span></span><br></pre></td></tr></table></figure><p>写一个新的页面，例如关于页面，可以通过下面的命令行创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure><p>写好的文章需要执行下面的命令来将 Markdown 文件生成 html 文件。第一条用来清空之前生成好的，如果只是文章修改可以直接执行第二条。如果主题有修改，推荐两条语句都执行一下。<br><code>hexo g</code> 是 <code>hexo generate</code> 的缩写，效果一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>最后执行启动命令就可以预览了。<br><code>hexo s</code> 是 <code>hexo server</code> 的缩写，效果一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在 <code>_config.yml</code> 文件配置 <code>deploy</code> 信息之后，可以通过下面的命令行直接将生成好的博客网站部署到 <code>git</code> 上。<br><code>hexo d</code> 是 <code>hexo deploy</code> 的缩写，效果一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>需要安装下面这个插件才能使用 git 进行自动部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><p>Hexo 有很多有趣的主题，每个人审美不同，需要自己去选择自己喜欢的主题，如果有开发能力，也可以自己写一套主题。先来看一波官方推荐的主题吧，还可以在 <a href="https://github.com/" target="_blank" rel="external nofollow noopener noreferrer">Github</a> 上通过 <code>hexo</code> 关键词进行搜索，发现更多主题。</p><div class="note link"><p><a href="https://hexo.io/themes/" target="_blank" rel="external nofollow noopener noreferrer">Hexo 官方推荐主题</a></p></div><p>将主题拷贝到 <code>themes</code> 文件夹下，在 <code>_config.yml</code> 配置 <code>theme</code> 项来指定主题。</p><p>Hexo 还提供了很多插件来使博客更加丰富有趣。使用插件需要先安装再配置最后生成并预览。</p><div class="note link"><p><a href="https://hexo.io/plugins/" target="_blank" rel="external nofollow noopener noreferrer">Hexo 插件</a></p></div><h2 id="高级教程"><a href="#高级教程" class="headerlink" title="高级教程"></a>高级教程</h2><div class="note blue"><p>更多功能及使用请参考官方文档，官方地址见下方参考资料。不同主题也有不同的配置，需要学习一下该主题作者制定的规则。</p></div><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>我对前端样式之类的不怎么熟悉，想要搞一套好的博客出来只能膜拜前辈们的心血。当文章达到一定数量的时候，Hexo 可能在执行转换命令时会比较慢，但这个不怎么影响使用。而且不需要复杂的部署就可以呈现如此优美的博客站点，并且适配多端环境，本人可以说非常喜欢了。</p><p>在选择主题方面，我看了很多主题，官方推荐的主题也全部都预览过，还搜索过其他主题，其中有很多有趣的样式，可毕竟只能选择一个，最终选择了现在使用的样式 <a href="https://volantis.js.org/" target="_blank" rel="external nofollow noopener noreferrer">Volantis</a> 。选主题这种事，随缘，看对眼了就行。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docsify-文档网站生成工具</title>
      <link href="/blog/942f/"/>
      <url>/blog/942f/</url>
      
        <content type="html"><![CDATA[<p>Docsify - 一个神奇的文档网站生成工具</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Docsify 是一个动态生成文档网站的工具。只需要一个 <code>index.html</code> 就可以写文档并部署成文档网站，Markdown 文件会在运行时自动转换。</p><h2 id="简易教程"><a href="#简易教程" class="headerlink" title="简易教程"></a>简易教程</h2><p>安装 <code>docsify-cli</code> 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure><p>在项目的 <code>./docs</code> 目录里写文档，通过 <code>init</code> 初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure><p>项目初始化成功后，会在项目的 <code>./docs</code> 目录创建如下几个文件：</p><ul><li><code>index.html</code> 文档网站入口文件</li><li><code>README.md</code> 主页内容</li><li><code>.nojekyll</code> 用于阻止 GitHub Pages 会忽略掉下划线开头的文件</li></ul><p>本地预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify serve ./docs</span><br></pre></td></tr></table></figure><p>执行完毕可以通过 <code>http://localhost:3000</code> 访问预览效果，<code>docsify serve</code> 让网站处于实时预览状态，本地有更新，网站会实时刷新。<br>如果不需要实时刷新，可以使用 <code>docsify start</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify start ./docs</span><br></pre></td></tr></table></figure><p>默认端口号是 <code>3000</code>，如果需要更改端口号，可以通过在命令行后加 <code>--port 3001</code> 来指定端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify serve ./docs --port 3001</span><br></pre></td></tr></table></figure><p><code>index.html</code> 里插件使用的源文件 cdn 加速地址，可以将文件下载到本地来引用，这样无法连接外网的环境一样可以部署啦。</p><h2 id="高级教程"><a href="#高级教程" class="headerlink" title="高级教程"></a>高级教程</h2><div class="note blue"><p>支持结合 Github 实现在线编辑，添加评论功能等等，更多定制化功能及插件使用请参考官方文档，官方地址见下方参考资料。</p></div><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>我本人还是很喜欢这种简约的文档网站的，文档系统主要是简洁，既方便写也方便看。Markdown 本身就适合写文档，结合 Docsify 使用简直完美。不需要调整复杂的样式，专注于写就好了。</p><p>我在以前的工作中使用过 Docsify 一手搭建部署了文档系统，既可以通过脚本生成接口文档，也可以人工书写设计文档，迭代文档，优化方案等等。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收藏有趣的注释</title>
      <link href="/blog/877a/"/>
      <url>/blog/877a/</url>
      
        <content type="html"><![CDATA[<p>看看程序员都生产过哪些神级注释</p><a id="more"></a><p>这里只列举很小一部分我喜欢的内容，想要查看更多丰富的神级注释，可点击文末友情链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span><br><span class="line"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P&#x2F;S│S L│P&#x2F;B│  ┌┐    ┌┐    ┌┐</span><br><span class="line"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span><br><span class="line"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span><br><span class="line"> * │~ &#96;│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ &#x3D;│ BacSp │ │Ins│Hom│PUp│ │N L│ &#x2F; │ * │ - │</span><br><span class="line"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span><br><span class="line"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span><br><span class="line"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span><br><span class="line"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#39;│ Enter  │               │ 4 │ 5 │ 6 │   │</span><br><span class="line"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span><br><span class="line"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? &#x2F;│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span><br><span class="line"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span><br><span class="line"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span><br><span class="line"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> *                    _ooOoo_</span><br><span class="line"> *                   o8888888o</span><br><span class="line"> *                   88&quot; . &quot;88</span><br><span class="line"> *                   (| -_- |)</span><br><span class="line"> *                    O\ &#x3D; &#x2F;O</span><br><span class="line"> *                ____&#x2F;&#96;---&#39;\____</span><br><span class="line"> *              .   &#39; \\| |&#x2F;&#x2F; &#96;.</span><br><span class="line"> *               &#x2F; \\||| : |||&#x2F;&#x2F; \</span><br><span class="line"> *             &#x2F; _||||| -:- |||||- \</span><br><span class="line"> *               | | \\\ - &#x2F;&#x2F;&#x2F; | |</span><br><span class="line"> *             | \_| &#39;&#39;\---&#x2F;&#39;&#39; | |</span><br><span class="line"> *              \ .-\__ &#96;-&#96; ___&#x2F;-. &#x2F;</span><br><span class="line"> *           ___&#96;. .&#39; &#x2F;--.--\ &#96;. . __</span><br><span class="line"> *        .&quot;&quot; &#39;&lt; &#96;.___\_&lt;|&gt;_&#x2F;___.&#39; &gt;&#39;&quot;&quot;.</span><br><span class="line"> *       | | : &#96;- \&#96;.;&#96;\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |</span><br><span class="line"> *         \ \ &#96;-. \_ __\ &#x2F;__ _&#x2F; .-&#96; &#x2F; &#x2F;</span><br><span class="line"> * &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> *                    &#96;&#x3D;---&#x3D;&#39;</span><br><span class="line"> *</span><br><span class="line"> * .............................................</span><br><span class="line"> *          佛祖保佑             永无BUG</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * _ooOoo_</span><br><span class="line"> * o8888888o</span><br><span class="line"> * 88&quot; . &quot;88</span><br><span class="line"> * (| -_- |)</span><br><span class="line"> *  O\ &#x3D; &#x2F;O</span><br><span class="line"> * ___&#x2F;&#96;---&#39;\____</span><br><span class="line"> * .   &#39; \\| |&#x2F;&#x2F; &#96;.</span><br><span class="line"> * &#x2F; \\||| : |||&#x2F;&#x2F; \</span><br><span class="line"> * &#x2F; _||||| -:- |||||- \</span><br><span class="line"> * | | \\\ - &#x2F;&#x2F;&#x2F; | |</span><br><span class="line"> * | \_| &#39;&#39;\---&#x2F;&#39;&#39; | |</span><br><span class="line"> * \ .-\__ &#96;-&#96; ___&#x2F;-. &#x2F;</span><br><span class="line"> * ___&#96;. .&#39; &#x2F;--.--\ &#96;. . __</span><br><span class="line"> * .&quot;&quot; &#39;&lt; &#96;.___\_&lt;|&gt;_&#x2F;___.&#39; &gt;&#39;&quot;&quot;.</span><br><span class="line"> * | | : &#96;- \&#96;.;&#96;\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |</span><br><span class="line"> * \ \ &#96;-. \_ __\ &#x2F;__ _&#x2F; .-&#96; &#x2F; &#x2F;</span><br><span class="line"> * &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> * &#96;&#x3D;---&#x3D;&#39;</span><br><span class="line"> * .............................................</span><br><span class="line"> *           佛曰：bug 泛滥，我已瘫痪！</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> *  佛曰:</span><br><span class="line"> *          写字楼里写字间，写字间里程序员；</span><br><span class="line"> *          程序人员写程序，又拿程序换酒钱。</span><br><span class="line"> *          酒醒只在网上坐，酒醉还来网下眠；</span><br><span class="line"> *          酒醉酒醒日复日，网上网下年复年。</span><br><span class="line"> *          但愿老死电脑间，不愿鞠躬老板前；</span><br><span class="line"> *          奔驰宝马贵者趣，公交自行程序员。</span><br><span class="line"> *          别人笑我忒疯癫，我笑自己命太贱；</span><br><span class="line"> *          不见满街漂亮妹，哪个归得程序员？</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> *</span><br><span class="line"> *   █████▒█    ██  ▄████▄   ██ ▄█▀       ██████╗ ██╗   ██╗ ██████╗</span><br><span class="line"> * ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒        ██╔══██╗██║   ██║██╔════╝</span><br><span class="line"> * ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░        ██████╔╝██║   ██║██║  ███╗</span><br><span class="line"> * ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄        ██╔══██╗██║   ██║██║   ██║</span><br><span class="line"> * ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄       ██████╔╝╚██████╔╝╚██████╔╝</span><br><span class="line"> *  ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒       ╚═════╝  ╚═════╝  ╚═════╝</span><br><span class="line"> *  ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░</span><br><span class="line"> *  ░ ░    ░░░ ░ ░ ░        ░ ░░ ░</span><br><span class="line"> *           ░     ░ ░      ░  ░</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> *      ┌─┐       ┌─┐</span><br><span class="line"> *   ┌──┘ ┴───────┘ ┴──┐</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   │       ───       │</span><br><span class="line"> *   │  ─┬┘       └┬─  │</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   │       ─┴─       │</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   └───┐         ┌───┘</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         └──────────────┐</span><br><span class="line"> *       │                        │</span><br><span class="line"> *       │                        ├─┐</span><br><span class="line"> *       │                        ┌─┘</span><br><span class="line"> *       │                        │</span><br><span class="line"> *       └─┐  ┐  ┌───────┬──┐  ┌──┘</span><br><span class="line"> *         │ ─┤ ─┤       │ ─┤ ─┤</span><br><span class="line"> *         └──┴──┘       └──┴──┘</span><br><span class="line"> *                神兽保佑</span><br><span class="line"> *               代码无BUG!</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> *      ┌─┐       ┌─┐</span><br><span class="line"> *   ┌──┘ ┴───────┘ ┴──┐</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   │       ───       │</span><br><span class="line"> *   │   &gt;        &lt;    │</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   │   ...  ⌒  ...   │</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   └───┐         ┌───┘</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         └──────────────┐</span><br><span class="line"> *       │                        │</span><br><span class="line"> *       │                        ├─┐</span><br><span class="line"> *       │                        ┌─┘</span><br><span class="line"> *       │                        │</span><br><span class="line"> *       └─┐  ┐  ┌───────┬──┐  ┌──┘</span><br><span class="line"> *         │ ─┤ ─┤       │ ─┤ ─┤</span><br><span class="line"> *         └──┴──┘       └──┴──┘</span><br><span class="line"> *                神兽保佑</span><br><span class="line"> *               代码无BUG!</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> *      ┌─┐       ┌─┐ + +</span><br><span class="line"> *   ┌──┘ ┴───────┘ ┴──┐++</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   │       ───       │++ + + +</span><br><span class="line"> *   ███████───███████ │+</span><br><span class="line"> *   │                 │+</span><br><span class="line"> *   │       ─┴─       │</span><br><span class="line"> *   │                 │</span><br><span class="line"> *   └───┐         ┌───┘</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         │   + +</span><br><span class="line"> *       │         │</span><br><span class="line"> *       │         └──────────────┐</span><br><span class="line"> *       │                        │</span><br><span class="line"> *       │                        ├─┐</span><br><span class="line"> *       │                        ┌─┘</span><br><span class="line"> *       │                        │</span><br><span class="line"> *       └─┐  ┐  ┌───────┬──┐  ┌──┘  + + + +</span><br><span class="line"> *         │ ─┤ ─┤       │ ─┤ ─┤</span><br><span class="line"> *         └──┴──┘       └──┴──┘  + + + +</span><br><span class="line"> *                神兽保佑</span><br><span class="line"> *               代码无BUG!</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> *                  ___&#x3D;&#x3D;&#x3D;&#x3D;-_  _-&#x3D;&#x3D;&#x3D;&#x3D;___</span><br><span class="line"> *            _--^^^#####&#x2F;&#x2F;      \\#####^^^--_</span><br><span class="line"> *         _-^##########&#x2F;&#x2F; (    ) \\##########^-_</span><br><span class="line"> *        -############&#x2F;&#x2F;  |\^^&#x2F;|  \\############-</span><br><span class="line"> *      _&#x2F;############&#x2F;&#x2F;   (@::@)   \\############\_</span><br><span class="line"> *     &#x2F;#############((     \\&#x2F;&#x2F;     ))#############\</span><br><span class="line"> *    -###############\\    (oo)    &#x2F;&#x2F;###############-</span><br><span class="line"> *   -#################\\  &#x2F; VV \  &#x2F;&#x2F;#################-</span><br><span class="line"> *  -###################\\&#x2F;      \&#x2F;&#x2F;###################-</span><br><span class="line"> * _#&#x2F;|##########&#x2F;\######(   &#x2F;\   )######&#x2F;\##########|\#_</span><br><span class="line"> * |&#x2F; |#&#x2F;\#&#x2F;\#&#x2F;\&#x2F;  \#&#x2F;\##\  |  |  &#x2F;##&#x2F;\#&#x2F;  \&#x2F;\#&#x2F;\#&#x2F;\#| \|</span><br><span class="line"> * &#96;  |&#x2F;  V  V  &#96;   V  \#\| |  | |&#x2F;#&#x2F;  V   &#39;  V  V  \|  &#39;</span><br><span class="line"> *    &#96;   &#96;  &#96;      &#96;   &#x2F; | |  | | \   &#39;      &#39;  &#39;   &#39;</span><br><span class="line"> *                     (  | |  | |  )</span><br><span class="line"> *                    __\ | |  | | &#x2F;__</span><br><span class="line"> *                   (vvv(VVV)(VVV)vvv)                </span><br><span class="line"> *                        神兽保佑</span><br><span class="line"> *                       代码无BUG!</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *                                                    __----~~~~~~~~~~~------___</span><br><span class="line"> *                                   .  .   ~~&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;......          __--~ ~~</span><br><span class="line"> *                   -.            \_|&#x2F;&#x2F;     |||\\  ~~~~~~::::... &#x2F;~</span><br><span class="line"> *                ___-&#x3D;&#x3D;_       _-~o~  \&#x2F;    |||  \\            _&#x2F;~~-</span><br><span class="line"> *        __---~~~.&#x3D;&#x3D;~||\&#x3D;_    -_--~&#x2F;_-~|-   |\\   \\        _&#x2F;~</span><br><span class="line"> *    _-~~     .&#x3D;~    |  \\-_    &#39;-~7  &#x2F;-   &#x2F;  ||    \      &#x2F;</span><br><span class="line"> *  .~       .~       |   \\ -_    &#x2F;  &#x2F;-   &#x2F;   ||      \   &#x2F;</span><br><span class="line"> * &#x2F;  ____  &#x2F;         |     \\ ~-_&#x2F;  &#x2F;|- _&#x2F;   .||       \ &#x2F;</span><br><span class="line"> * |~~    ~~|--~~~~--_ \     ~&#x3D;&#x3D;-&#x2F;   | \~--&#x3D;&#x3D;&#x3D;~~        .\</span><br><span class="line"> *          &#39;         ~-|      &#x2F;|    |-~\~~       __--~~</span><br><span class="line"> *                      |-~~-_&#x2F; |    |   ~\_   _-~            &#x2F;\</span><br><span class="line"> *                           &#x2F;  \     \__   \&#x2F;~                \__</span><br><span class="line"> *                       _--~ _&#x2F; | .-~~____--~-&#x2F;                  ~~&#x3D;&#x3D;.</span><br><span class="line"> *                      ((-&gt;&#x2F;~   &#39;.|||&#39; -_|    ~~-&#x2F; ,              . _||</span><br><span class="line"> *                                 -_     ~\      ~~---l__i__i__i--~~_&#x2F;</span><br><span class="line"> *                                 _-~-__   ~)  \--______________--~~</span><br><span class="line"> *                               &#x2F;&#x2F;.-~~~-~_--~- |-------~~~~~~~~</span><br><span class="line"> *                                      &#x2F;&#x2F;.-~~~--\</span><br><span class="line"> *                               神兽保佑</span><br><span class="line"> *                              代码无BUG!</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> *                                         ,s555SB@@&amp;                          </span><br><span class="line"> *                                      :9H####@@@@@Xi                        </span><br><span class="line"> *                                     1@@@@@@@@@@@@@@8                       </span><br><span class="line"> *                                   ,8@@@@@@@@@B@@@@@@8                      </span><br><span class="line"> *                                  :B@@@@X3hi8Bs;B@@@@@Ah,                   </span><br><span class="line"> *             ,8i                  r@@@B:     1S ,M@@@@@@#8;                 </span><br><span class="line"> *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@@S                </span><br><span class="line"> *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5               </span><br><span class="line"> *            ;@&amp;i,58r5                 rGSS:     :B@@@@@@@@@@A               </span><br><span class="line"> *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1               </span><br><span class="line"> *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@@B1                </span><br><span class="line"> *               .h8h.,A@@@MXSs,           #@H1:    3ssSSX@1                  </span><br><span class="line"> *               s ,@@@@@@@@@@@@Xhi,       r#@@X1s9M8    .GA981               </span><br><span class="line"> *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@@BS;i;          </span><br><span class="line"> *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS        </span><br><span class="line"> *                s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;,      </span><br><span class="line"> *              :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B,     </span><br><span class="line"> *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8     </span><br><span class="line"> *          :3B@@@@@@@@@@@&amp;9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="line"> *      s&amp;HA#@@@@@@@@@@@@@@M89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r    </span><br><span class="line"> *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i    </span><br><span class="line"> *  5#@@#&amp;@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@;    </span><br><span class="line"> *  9@@@X:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="line"> *   SH#@B9.rM@@@@@@@@@@@@@B       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5    </span><br><span class="line"> *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@@B    </span><br><span class="line"> *           ,ssirhSM@&amp;1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@@S   </span><br><span class="line"> *              ,,,rHAri1h1rh&amp;@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#:  </span><br><span class="line"> *            .A3hH@#5S553&amp;@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@@A.</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *    又看源码，看你妹妹呀！</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　</span><br><span class="line"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　　　　　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　　　　　頂頂頂　</span><br><span class="line"> * 　　　頂頂　　　　　　頂頂　頂頂　頂頂</span><br><span class="line"> * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂</span><br><span class="line"> * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * ░░░░░░░░░░░░░░░░░░░░░░░░▄░░</span><br><span class="line"> * ░░░░░░░░░▐█░░░░░░░░░░░▄▀▒▌░</span><br><span class="line"> * ░░░░░░░░▐▀▒█░░░░░░░░▄▀▒▒▒▐</span><br><span class="line"> * ░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐</span><br><span class="line"> * ░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐</span><br><span class="line"> * ░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌</span><br><span class="line"> * ░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒</span><br><span class="line"> * ░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐</span><br><span class="line"> * ░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄</span><br><span class="line"> * ░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒</span><br><span class="line"> * ▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒</span><br><span class="line"> * 单身狗就这样默默地看着你，一句话也不说。</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> *                 .-~~~~~~~~~-._       _.-~~~~~~~~~-.</span><br><span class="line"> *             __.&#39;              ~.   .~              &#96;.__</span><br><span class="line"> *           .&#39;&#x2F;&#x2F;                  \.&#x2F;                  \\&#96;.</span><br><span class="line"> *         .&#39;&#x2F;&#x2F;                     |                     \\&#96;.</span><br><span class="line"> *       .&#39;&#x2F;&#x2F; .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._     |     _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\&#96;.</span><br><span class="line"> *     .&#39;&#x2F;&#x2F;.-&quot;                 &#96;-.  |  .-&#39;                 &quot;-.\\&#96;.</span><br><span class="line"> *   .&#39;&#x2F;&#x2F;______.&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-..   \ | &#x2F;   ..-&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;.______\\&#96;.</span><br><span class="line"> * .&#39;______________________________\|&#x2F;______________________________&#96;.</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * You may think you know what the following code does.</span><br><span class="line"> * But you dont. Trust me.</span><br><span class="line"> * Fiddle with it, and youll spend many a sleepless</span><br><span class="line"> * night cursing the moment you thought youd be clever</span><br><span class="line"> * enough to &quot;optimize&quot; the code below.</span><br><span class="line"> * Now close this file and go play with something else.</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * For the brave souls who get this far: You are the chosen ones,</span><br><span class="line"> * the valiant knights of programming who toil away, without rest,</span><br><span class="line"> * fixing our most awful code. To you, true saviors, kings of men,</span><br><span class="line"> * I say this: never gonna give you up, never gonna let you down,</span><br><span class="line"> * never gonna run around and desert you. Never gonna make you cry,</span><br><span class="line"> * never gonna say goodbye. Never gonna tell a lie and hurt you.</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * Dear maintainer:</span><br><span class="line"> *</span><br><span class="line"> * Once you are done trying to &#39;optimize&#39; this routine,</span><br><span class="line"> * and have realized what a terrible mistake that was,</span><br><span class="line"> * please increment the following counter as a warning</span><br><span class="line"> * to the next guy:</span><br><span class="line"> *</span><br><span class="line"> * total_hours_wasted_here &#x3D; 42</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * When I wrote this, only God and I understood what I was doing</span><br><span class="line"> * Now, God only knows</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; drunk, fix later</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Magic. Do not touch.</span><br><span class="line">&#x2F;&#x2F; 麻鸡。勿动。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Here be dragons --&gt;</span><br><span class="line">&lt;!-- 前方高能 --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* You are not expected to understand this *&#x2F;</span><br><span class="line">&#x2F;* 你绝不会明白的 *&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> awesome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在飘，你在守</title>
      <link href="/blog/d539/"/>
      <url>/blog/d539/</url>
      
        <content type="html"><![CDATA[<p>我在飘，你在守</p><a id="more"></a><p>大二那年，转专业考试正好与西校区新生报道是同一天，考试结束后，闲着没事，于是心血来潮的跑到西校区凑热闹。同学说，来来来，有安徽的老乡，你接不？站在亭子里，连续来了两个安徽，第一个印象不深，个不高，第二个正好亭子盖住了脸，只觉得腿长，应该挺高（哈哈，允许我外貌协会一次），然后我就说我接第二个吧！进到亭子里，我就后悔了，妈呀，怎么这么小，本来以为是个大高个，结果是个小脸娃娃，心里嘀咕了一下，但还是接了。没接受培训，完全茫然接新生要有哪些事情，还好，同学帮忙一起带路，大概介绍了有哪些事情，后来听这货抱怨，去洗澡时刷卡没水，幸好他和同学一起去的澡堂，因为我没说过还要洗澡要转卡😄</p><p>一段时间后，这货发来短信，可以认你做姐姐么？想着这货跟个小屁孩一样，于是母性大发，同意了。然后开始发现这货还是挺黏人的，不过也是个比较认真的小屁孩，没有想象中那么不会生活自理，相反还是挺自立了，就是感觉情商太低，想事情太天真。那会比较无聊，没事喜欢泡图书馆或者逛街，看他无聊，会和同伴带上他，顺便熟悉熟悉镇江环境，我觉得我有时候就是太多事😄</p><p>大三那年，和前任分了，听了一个多月的单曲循环，想想无聊，于是报了注会，他倒是挺乖，啥也不问，只是会陪着一起自习，特意报了东区的课，然后晚上过来，再回西区，也召集他以前同学一起集体出游了一天。有一天，这货发神经似的，在当时火的人人网上私密留言：你好好忙你自己的事，以后我娶你~我愣了，因为这货一直就是一个小男孩，在我看来，啥都不懂，还没发育完全，更别提感情，于是立马打电话，我们不可能的事情，你好好学习，正常找你女朋友。</p><p>后面还是会一起自习，会和同学一起泡图书馆，他执意坚持，我说不可能，然后不联系了几个月~</p><p>后面就是一直这样，因为始终觉得像小孩，我觉得他还是弟弟，始终没法像男朋友一样看待~</p><p>后来我继续读研，他毕业先工作了，感觉略微成熟一些，还是会闹，分分合合，吵吵闹闹，他把工作调回了南京，为人处事风格也比以前成熟不少，也就差不多这个时候才开始真正男女朋友一样感觉，这已经是2016年了，虽然闹，但是好歹是男朋友身份了~</p><p>2017年6月10号，他在新屋里布置了求婚，确实有些意外，虽然简单，但是多少还是有些惊喜，想想女生有时候挺好哄的~</p><p>2017年6月22日，我们结婚了，婚礼准备比较仓促，但是还是有些紧张。婚后两人都不会做饭，好在上班，基本单位饮食，节假日或者周末了，才偶尔在家吃饭，我不喜欢做菜，于是做饭任务就在他手上，从刚开始的各种蛋包饭，花式面条，到后来渐渐会做几样炒菜</p><p>2018年7月5日，我们收获了我们的小礼物，男宝一枚，希望宝宝健康平安快乐的成长，也希望以后的生活会越来越好~不知道会不会夸了他几句，他就会变坏了</p><p>我一直想说，最幸运的事情是：我在飘，你一直在守；最感动的话语是：飘够了，你就会回来~</p><hr><p>后续：心情写在2018年7月，娃还没满月，时间是真的不经意就溜走了，已经快两年过去了，娃都快2岁了～～～<br>生活依旧很简单，财米油盐酱醋茶，加上一只狗娃娃，可能本身都是那种比较安静的人吧；也会失落，因为会有各种各样的事情，但是，生活本身就是酸甜苦辣咸五味杂坛～～～</p><p>也会生气，尽管我是个暴脾气，但很少吵的起来，因为这货是个闷葫芦，最大的憋屈就是你火气冲天了，他都不知道发生了啥事，简直要爆仓！！！</p>]]></content>
      
      
      <categories>
          
          <category> 心情物语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客个性化-看板娘</title>
      <link href="/blog/5645/"/>
      <url>/blog/5645/</url>
      
        <content type="html"><![CDATA[<p>在博客右下角放一个萌萌的卡通人物，可根据鼠标位置摇头</p><a id="more"></a><h2 id="如何添加"><a href="#如何添加" class="headerlink" title="如何添加"></a>如何添加</h2><p>以本博客为例</p><p>输入如下命令获取 live2d :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>输入如下命令获取 shizuku 模型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure><p>在站点目录下的 _config.yml 文件，添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  model: </span><br><span class="line">    use: live2d-widget-model-shizuku #模型选择</span><br><span class="line">    scale: 1</span><br><span class="line">  display: </span><br><span class="line">    superSample: 2</span><br><span class="line">    position: right  #模型位置</span><br><span class="line">    hOffset: 90</span><br><span class="line">    width: 200       #模型宽度</span><br><span class="line">    height: 400      #模型高度</span><br><span class="line">  mobile: </span><br><span class="line">    show: false      #是否在手机端显示</span><br><span class="line">  react:</span><br><span class="line">    opacity: 1</span><br><span class="line">  dialog:</span><br><span class="line">    enable: true</span><br><span class="line">    hitokoto: true</span><br></pre></td></tr></table></figure><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><p>点击 <a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="external nofollow noopener noreferrer">hexo-helper-live2d</a> 进入项目地址</p><p>点击 <a href="https://l2dwidget.js.org/dev.html" target="_blank" rel="external nofollow noopener noreferrer">https://l2dwidget.js.org/dev.html</a> 查看官方Demo</p><p>点击 <a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="external nofollow noopener noreferrer">https://huaji8.top/post/live2d-plugin-2.0/</a> 查看更多模型</p><p>模型设置API参阅 <a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" rel="external nofollow noopener noreferrer">live2d-widget.js API</a></p><p>更多模型包通过如下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install packagename</span><br></pre></td></tr></table></figure><p>其中 packagename 包括</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 个性化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客个性化-鼠标点击效果</title>
      <link href="/blog/22e3/"/>
      <url>/blog/22e3/</url>
      
        <content type="html"><![CDATA[<p>添加鼠标点击动态效果，包括爱心效果，字体效果，烟花爆炸效果</p><a id="more"></a><h2 id="爱心效果"><a href="#爱心效果" class="headerlink" title="爱心效果"></a>爱心效果</h2><p>新建文件 love.js，在 love.js 文件中添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e&#x3D;0;e&lt;d.length;e++)d[e].alpha&lt;&#x3D;0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+&#x3D;.004,d[e].alpha-&#x3D;.013,d[e].el.style.cssText&#x3D;&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t&#x3D;&quot;function&quot;&#x3D;&#x3D;typeof e.onclick&amp;&amp;e.onclick;e.onclick&#x3D;function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a&#x3D;t.createElement(&quot;div&quot;);a.className&#x3D;&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a&#x3D;t.createElement(&quot;style&quot;);a.type&#x3D;&quot;text&#x2F;css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText&#x3D;e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d&#x3D;[];e.requestAnimationFrame&#x3D;function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3&#x2F;60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;love.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="字体效果"><a href="#字体效果" class="headerlink" title="字体效果"></a>字体效果</h2><p>新建文件 click_show_text.js，在 click_show_text.js 文件中添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var a_idx &#x3D; 0;</span><br><span class="line">jQuery(document).ready(function($) &#123;</span><br><span class="line">    $(&quot;body&quot;).click(function(e) &#123;</span><br><span class="line">        var a &#x3D; new Array</span><br><span class="line">        (&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot;, &quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;);</span><br><span class="line">        var $i &#x3D; $(&quot;&lt;span&#x2F;&gt;&quot;).text(a[a_idx]);</span><br><span class="line">        a_idx &#x3D; (a_idx + 1) % a.length;</span><br><span class="line">        var x &#x3D; e.pageX,</span><br><span class="line">        y &#x3D; e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            &quot;z-index&quot;: 5,</span><br><span class="line">            &quot;top&quot;: y - 20,</span><br><span class="line">            &quot;left&quot;: x,</span><br><span class="line">            &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">            &quot;font-weight&quot;: &quot;bold&quot;,</span><br><span class="line">            &quot;color&quot;: &quot;#FF0000&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">        $(&quot;body&quot;).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            &quot;top&quot;: y - 180,</span><br><span class="line">            &quot;opacity&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">            3000,</span><br><span class="line">            function() &#123;</span><br><span class="line">                $i.remove();</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(&#39;delay()&#39;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function delay() &#123;</span><br><span class="line">    $(&quot;.buryit&quot;).removeAttr(&quot;onclick&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--单击显示文字--&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;click_show_text.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="烟花爆炸效果"><a href="#烟花爆炸效果" class="headerlink" title="烟花爆炸效果"></a>烟花爆炸效果</h2><p>新建文件 fireworks.js，在 fireworks.js 文件中添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;0.1,a.alpha&#x3D;0.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;0.1,a.alpha&#x3D;0.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt; </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt; </span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 个性化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客个性化-背景线条动画</title>
      <link href="/blog/9844/"/>
      <url>/blog/9844/</url>
      
        <content type="html"><![CDATA[<p>博客背景添加线条动画效果</p><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--动态线条背景--&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;</span><br><span class="line">  color&#x3D;&quot;220,220,220&quot; opacity&#x3D;&#39;0.7&#39; zIndex&#x3D;&quot;-2&quot; count&#x3D;&quot;200&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>线条颜色，(R,G,B)，默认：(0,0,0)</td></tr><tr><td>opacity</td><td>线条透明度（0~1），默认：0.5</td></tr><tr><td>count</td><td>线条的总数量，默认：150</td></tr><tr><td>zIndex</td><td>背景的z-index属性，默认：-1</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 样式一（鼠标点击更换样式） --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;g.joyinshare.com&#x2F;hc&#x2F;ribbon.min.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 样式二（飘动的彩带） --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;g.joyinshare.com&#x2F;hc&#x2F;piao.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 个性化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客个性化-一言</title>
      <link href="/blog/489f/"/>
      <url>/blog/489f/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hitokoto.cn/" target="_blank" rel="external nofollow noopener noreferrer">一言网(Hitokoto.cn)</a>创立于 2016 年，隶属于萌创 Team，目前网站主要提供一句话服务。一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。或是感动，或是开心，有或是单纯的回忆。来到这里，留下你所喜欢的那一句句话，与大家分享，这就是一言存在的目的。</p><a id="more"></a><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p id="hitokoto">:D 获取中...</p><script src="https://v1.hitokoto.cn/?encode=js&select=%23hitokoto" defer></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id&#x3D;&quot;hitokoto&quot;&gt;:D 获取中...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;v1.hitokoto.cn&#x2F;?encode&#x3D;js&amp;select&#x3D;%23hitokoto&quot; defer&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><p>请求地址：<a href="https://v1.hitokoto.cn/" target="_blank" rel="external nofollow noopener noreferrer">https://v1.hitokoto.cn/</a></p><p>参数：</p><table><thead><tr><th>返回参数名称</th><th>描述</th></tr></thead><tbody><tr><td>c=a</td><td>Anime - 动画</td></tr><tr><td>c=b</td><td>Comic – 漫画</td></tr><tr><td>c=c</td><td>Game – 游戏</td></tr><tr><td>c=d</td><td>Novel – 小说</td></tr><tr><td>c=e</td><td>Myself – 原创</td></tr><tr><td>c=f</td><td>Internet – 来自网络</td></tr><tr><td>c=g</td><td>Other – 其他</td></tr></tbody></table><p>更多参数参考：<a href="https://hitokoto.cn/api" target="_blank" rel="external nofollow noopener noreferrer">https://hitokoto.cn/api</a></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（从7种分类中随机抽取）</span><br><span class="line">https:&#x2F;&#x2F;v1.hitokoto.cn&#x2F;</span><br><span class="line"></span><br><span class="line">（请求获得一个分类是漫画的句子）</span><br><span class="line">https:&#x2F;&#x2F;v1.hitokoto.cn&#x2F;?c&#x3D;b</span><br><span class="line"></span><br><span class="line">（请求获得一个来自网络的句子，并以纯文本格式输出）</span><br><span class="line">https:&#x2F;&#x2F;v1.hitokoto.cn&#x2F;?c&#x3D;f&amp;encode&#x3D;text</span><br></pre></td></tr></table></figure><p>接口返回的 JSON 正常数据格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: 540,</span><br><span class="line">  &quot;hitokoto&quot;: &quot;在灾难面前，如果连英雄都逃跑了，那还有谁能站出来？&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;a&quot;,</span><br><span class="line">  &quot;from&quot;: &quot;一拳超人&quot;,</span><br><span class="line">  &quot;creator&quot;: &quot;没了&quot;,</span><br><span class="line">  &quot;created_at&quot;: &quot;1472551464&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>返回参数名称</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>本条一言的id</td></tr><tr><td>hitokoto</td><td>一言正文</td></tr><tr><td>type</td><td>类型</td></tr><tr><td>from</td><td>一言的出处</td></tr><tr><td>creator</td><td>添加者</td></tr><tr><td>created_at</td><td>添加时间</td></tr></tbody></table><p>网页使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id&#x3D;&quot;hitokoto&quot;&gt;:D 获取中...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;!-- 以下写法，选取一种即可 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 现代写法，推荐 --&gt;</span><br><span class="line">&lt;!-- 兼容低版本浏览器 (包括 IE)，可移除 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bluebird@3&#x2F;js&#x2F;browser&#x2F;bluebird.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;whatwg-fetch@2.0.3&#x2F;fetch.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!--End--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  fetch(&#39;https:&#x2F;&#x2F;v1.hitokoto.cn&#39;)</span><br><span class="line">    .then(function (res)&#123;</span><br><span class="line">      return res.json();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(function (data) &#123;</span><br><span class="line">      var hitokoto &#x3D; document.getElementById(&#39;hitokoto&#39;);</span><br><span class="line">      hitokoto.innerText &#x3D; data.hitokoto; </span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(function (err) &#123;</span><br><span class="line">      console.error(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 老式写法，兼容性最忧 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var xhr &#x3D; new XMLHttpRequest();</span><br><span class="line">  xhr.open(&#39;get&#39;, &#39;https:&#x2F;&#x2F;v1.hitokoto.cn&#39;);</span><br><span class="line">  xhr.onreadystatechange &#x3D; function () &#123;</span><br><span class="line">    if (xhr.readyState &#x3D;&#x3D;&#x3D; 4) &#123;</span><br><span class="line">      var data &#x3D; JSON.parse(xhr.responseText);</span><br><span class="line">      var hitokoto &#x3D; document.getElementById(&#39;hitokoto&#39;);</span><br><span class="line">      hitokoto.innerText &#x3D; data.hitokoto;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.send();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 新 API 方法， 十分简洁 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;v1.hitokoto.cn&#x2F;?encode&#x3D;js&amp;select&#x3D;%23hitokoto&quot; defer&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢 <a href="https://hitokoto.cn/" target="_blank" rel="external nofollow noopener noreferrer">一言网(Hitokoto.cn)</a> 为我们提供的服务</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 个性化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客个性化-今日诗词</title>
      <link href="/blog/d67b/"/>
      <url>/blog/d67b/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jinrishici.com/" target="_blank" rel="external nofollow noopener noreferrer">今日诗词(https://www.jinrishici.com/)</a> API 是一个可以返回一句古诗词名句的接口。它可以通过图片和 JSON 格式调用。今日诗词 API 根据不同地点、时间、节日、季节、天气、景观、城市进行智能推荐。</p><a id="more"></a><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在 HTML 中需要加载诗词的地方放置以下加载代码即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id&#x3D;&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词...&lt;&#x2F;span&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;sdk.jinrishici.com&#x2F;v2&#x2F;browser&#x2F;jinrishici.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="普通示例"><a href="#普通示例" class="headerlink" title="普通示例"></a>普通示例</h2><p><a href="#" class="random_poem"><i class="fas fa-random" id="jinrishici_update"></i></a>&nbsp;<span id="jinrishici-sentence">正在加载今日诗词...</span></p><script>document.getElementById("jinrishici_update").onclick=function(){return jinrishici.load(function(n){ready(function(){var e=document.getElementById("jinrishici_update");e.className=e.className+" disabled",document.getElementById("jinrishici-sentence").innerText=n.data.content,setTimeout(function(){e.className=e.className.replace(" disabled","")},1e3)})}),!1}</script><script src="https://sdk.jinrishici.com/v2/browser/jinrishici.js" charset="utf-8"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&#39;random_poem&#39;&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;fas fa-random&quot; id&#x3D;&quot;jinrishici_update&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;&#x2F;a&gt;&amp;nbsp;</span><br><span class="line">  &lt;span id&#x3D;&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词...&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  document.getElementById(&#39;jinrishici_update&#39;).onclick &#x3D; function() &#123;</span><br><span class="line">    jinrishici.load(function(result) &#123;</span><br><span class="line">      ready(function() &#123;</span><br><span class="line">        var button &#x3D; document.getElementById(&quot;jinrishici_update&quot;)</span><br><span class="line">        button.className &#x3D; button.className + &#39; disabled&#39;</span><br><span class="line">        var sentence &#x3D; document.getElementById(&#39;jinrishici-sentence&#39;);</span><br><span class="line">        sentence.innerText &#x3D; result.data.content;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">          button.className &#x3D; button.className.replace(&#39; disabled&#39;,&#39;&#39;)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;sdk.jinrishici.com&#x2F;v2&#x2F;browser&#x2F;jinrishici.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="高级示例"><a href="#高级示例" class="headerlink" title="高级示例"></a>高级示例</h2><p><a href="#" class="random_poem"><i class="fas fa-random" id="jinrishici_advance"></i></a>&nbsp;<span id="jinrishici-sentence-advance">点这里刷新</span></p><script>document.getElementById("jinrishici_advance").onclick=function(){return jinrishici.load(function(o){ready(function(){var n=document.getElementById("jinrishici_advance");n.className=n.className+" disabled";for(var a=document.getElementById("jinrishici-sentence-advance"),t=o.data.content+"\n",e="",i=0;i<o.data.matchTags.length;i++)e+=o.data.matchTags[i]+" ";e+="\n\n";for(var c=o.data.origin.title+" "+o.data.origin.dynasty+" "+o.data.origin.author+"\n\n",d="",i=0;i<o.data.origin.content.length;i++)d+=o.data.origin.content[i]+"\n";a.innerText=t+e+c+d,setTimeout(function(){n.className=n.className.replace(" disabled","")},1e3)})}),!1}</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&#39;random_poem&#39;&gt;</span><br><span class="line">    &lt;i class&#x3D;&quot;fas fa-random&quot; id&#x3D;&quot;jinrishici_advance&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;&#x2F;a&gt;&amp;nbsp;</span><br><span class="line">  &lt;span id&#x3D;&quot;jinrishici-sentence&quot;&gt;点这里刷新&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  document.getElementById(&#39;jinrishici_advance&#39;).onclick &#x3D; function() &#123;</span><br><span class="line">    jinrishici.load(function(result) &#123;</span><br><span class="line">      ready(function() &#123;</span><br><span class="line">        var button &#x3D; document.getElementById(&quot;jinrishici_advance&quot;)</span><br><span class="line">        button.className &#x3D; button.className + &#39; disabled&#39;</span><br><span class="line">        var sentence &#x3D; document.getElementById(&#39;jinrishici-sentence&#39;);</span><br><span class="line">        var content &#x3D; result.data.content + &quot;\n&quot;;</span><br><span class="line">        var matchTags &#x3D; &quot;&quot;;</span><br><span class="line">        for (var i&#x3D;0; i&lt;result.data.matchTags.length;i++) &#123;</span><br><span class="line">            matchTags +&#x3D; result.data.matchTags[i] + &quot; &quot;</span><br><span class="line">        &#125;</span><br><span class="line">        matchTags +&#x3D; &quot;\n\n&quot;;</span><br><span class="line">        var origin &#x3D; result.data.origin.title + &quot; &quot;;</span><br><span class="line">        origin +&#x3D; result.data.origin.dynasty + &quot; &quot;;</span><br><span class="line">        origin +&#x3D; result.data.origin.author + &quot;\n\n&quot;;</span><br><span class="line">        var origin_content &#x3D; &quot;&quot;;</span><br><span class="line">        for (var i&#x3D;0; i&lt;result.data.origin.content.length;i++) &#123;</span><br><span class="line">            origin_content +&#x3D; result.data.origin.content[i] + &quot;\n&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        sentence.innerText &#x3D; content + matchTags + origin + origin_content;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">          button.className &#x3D; button.className.replace(&#39; disabled&#39;,&#39;&#39;)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;sdk.jinrishici.com&#x2F;v2&#x2F;browser&#x2F;jinrishici.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>高级 JSON 接口返回的正常的数据格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: &quot;5b8b9572e116fb3714e6faba&quot;,</span><br><span class="line">        &quot;content&quot;: &quot;君问归期未有期，巴山夜雨涨秋池。&quot;,</span><br><span class="line">        &quot;popularity&quot;: 1170000,</span><br><span class="line">        &quot;origin&quot;: &#123;</span><br><span class="line">            &quot;title&quot;: &quot;夜雨寄北&quot;,</span><br><span class="line">            &quot;dynasty&quot;: &quot;唐代&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;李商隐&quot;,</span><br><span class="line">            &quot;content&quot;: [</span><br><span class="line">                &quot;君问归期未有期，巴山夜雨涨秋池。&quot;,</span><br><span class="line">                &quot;何当共剪西窗烛，却话巴山夜雨时。&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;translate&quot;: [</span><br><span class="line">                &quot;您问归期，归期实难说准，巴山连夜暴雨，涨满秋池。&quot;,</span><br><span class="line">                &quot;何时归去，共剪西窗烛花，当面诉说，巴山夜雨况味。&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;matchTags&quot;: [</span><br><span class="line">            &quot;秋&quot;,</span><br><span class="line">            &quot;晚上&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;recommendedReason&quot;: &quot;&quot;,</span><br><span class="line">        &quot;cacheAt&quot;: &quot;2018-09-17T21:18:44.693645&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;token&quot;: &quot;6453911a-9ad7-457e-9b9d-c21011b85a0c&quot;,</span><br><span class="line">    &quot;ipAddress&quot;: &quot;162.248.93.154&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>返回参数名称</th><th>描述</th></tr></thead><tbody><tr><td>data.content</td><td>推荐的诗句</td></tr><tr><td>data.matchTags</td><td>标签</td></tr><tr><td>data.recommendedReason</td><td>推荐原因</td></tr><tr><td>data.cacheAt</td><td>缓存时间</td></tr><tr><td>data.popularity</td><td>这句诗的流行度评价</td></tr><tr><td>data.origin</td><td>源诗信息</td></tr><tr><td>data.origin.translate</td><td>整诗翻译</td></tr><tr><td>token</td><td>当前用户的 token</td></tr><tr><td>ipAddress</td><td>当前用户的 ip</td></tr></tbody></table><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢 <a href="https://www.jinrishici.com/" target="_blank" rel="external nofollow noopener noreferrer">今日诗词(https://www.jinrishici.com/)</a> 为我们提供的服务</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 个性化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/3eeb/"/>
      <url>/blog/3eeb/</url>
      
        <content type="html"><![CDATA[<p>Hello World</p><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external nofollow noopener noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external nofollow noopener noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external nofollow noopener noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external nofollow noopener noreferrer">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external nofollow noopener noreferrer">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external nofollow noopener noreferrer">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external nofollow noopener noreferrer">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="external nofollow noopener noreferrer">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
