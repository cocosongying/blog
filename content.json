{"meta":{"title":"磨叽熊猫","subtitle":"","description":"欢迎来到磨叽熊猫的主页，这里有精心制作的博客以及各种好玩的。mojipanda ～","author":"宋颖","url":"https://mojipanda.com","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-04-29T03:23:29.803Z","updated":"2020-04-29T03:23:29.803Z","comments":true,"path":"404.html","permalink":"https://mojipanda.com/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-04-28T13:44:22.000Z","updated":"2020-05-04T13:30:16.416Z","comments":true,"path":"about/index.html","permalink":"https://mojipanda.com/about/index.html","excerpt":"","text":"SongYing 一花一世界，一叶一追寻。一曲一场叹，一生为一人。 磨叽熊猫 原本用来形容我那个懒懒的国宝级女朋友，懒也不能说，否则咬你哦，因此得名磨叽熊猫。现在已经是我的老婆，并且诞生了一只小磨叽熊猫。 关于我的 服务端程序猿一只，日常挖坑写BUG。前端网页只能用现成的框架拼拼凑凑啦。 作为数学出身的开发，思维逻辑严谨。出其果必有其因。 喜欢动漫：海贼王，火影忍者，一人之下，迷域行者。。。 喜欢运动：跑步，象棋，篮球，乒乓球，羽毛球。。。 喜欢艺术：书法，素描，铅笔画。。。 喜欢推理、数独、数学、算法。。。 互相学习，互相交流，可以通过页脚的邮箱，GitHub，微博，B站联系我。 Java NodeJs Mysql MongoDB Redis RabbitMq Linux Docker Bash 微信公众号 微信扫码求关注 微信赞赏码 喜欢就打个赏吧"},{"title":"所有分类","date":"2020-04-21T11:22:57.886Z","updated":"2020-04-21T11:22:57.886Z","comments":true,"path":"categories/index.html","permalink":"https://mojipanda.com/categories/index.html","excerpt":"","text":""},{"title":"磨叽熊猫-收藏","date":"2020-05-05T09:31:04.000Z","updated":"2020-05-05T10:17:40.766Z","comments":true,"path":"collect/index.html","permalink":"https://mojipanda.com/collect/index.html","excerpt":"","text":"磨叽熊猫-网址收藏 教程 Bash速查 Git速查 Vim速查 Bash脚本教程 GitTips Fontawesome 菜鸟教程 有趣 GitHub中文排行榜 HelloGitHub月刊 科技爱好者周刊 中国古典颜色 工具 Unix时间戳 站长工具 在线工具 一个工具箱"},{"title":"磨叽熊猫-娱乐","date":"2020-05-05T10:26:28.000Z","updated":"2020-05-15T01:46:11.291Z","comments":true,"path":"fun/index.html","permalink":"https://mojipanda.com/fun/index.html","excerpt":"","text":"磨叽熊猫-放松一下 小游戏 彩虹钢琴 推荐在PC端打开，试试键盘弹奏。 管道工 将管道连接起来，就是这么简单。 井字棋 可以人机PK，也可以双人PK。 魔方3阶 在线玩的3阶魔方，Amazing!"},{"title":"磨叽熊猫-文稿","date":"2020-04-30T03:44:27.000Z","updated":"2020-04-30T05:04:55.730Z","comments":true,"path":"slide/index.html","permalink":"https://mojipanda.com/slide/index.html","excerpt":"","text":"磨叽熊猫-演示文稿 DEMO 简单例子 演示例子"},{"title":"所有标签","date":"2020-04-21T11:23:35.620Z","updated":"2020-04-21T11:23:35.620Z","comments":true,"path":"tags/index.html","permalink":"https://mojipanda.com/tags/index.html","excerpt":"","text":""},{"title":"磨叽熊猫-视频","date":"2020-04-30T04:51:08.000Z","updated":"2020-04-30T05:05:43.144Z","comments":true,"path":"video/index.html","permalink":"https://mojipanda.com/video/index.html","excerpt":"","text":"快来看看这些精彩视频吧～ 访问主站"},{"title":"磨叽熊猫-工具","date":"2020-04-30T05:09:19.000Z","updated":"2020-04-30T05:13:31.631Z","comments":true,"path":"tool/index.html","permalink":"https://mojipanda.com/tool/index.html","excerpt":"","text":"磨叽熊猫-工具 其他工具 亲戚关系计算器 图片工具 头像加口罩"}],"posts":[{"title":"Nodejs-如何使用MongoDB","slug":"Nodejs-如何使用MongoDB","date":"2020-05-18T01:54:41.000Z","updated":"2020-05-18T02:10:31.658Z","comments":true,"path":"blog/4ef0/","link":"","permalink":"https://mojipanda.com/blog/4ef0/","excerpt":"本文主要介绍在 Nodejs 中如何连接并使用 MongoDB","text":"本文主要介绍在 Nodejs 中如何连接并使用 MongoDB 安装准备我们需要安装 mongoose 依赖包 1npm install mongoose --save 可以在项目中新建一个 mongo 文件夹用来管理 mongodb 的相关操作。 具体实现在 mongo 文件夹下新建 connection.js，内容如下： 1234567891011121314151617181920212223242526272829const mongoose = require('mongoose');const mongoUrl = \"mongodb://username:123456@localhost:27017/demo\";mongoose.Promise = global.Promise;function getOptions() &#123; return &#123; useCreateIndex: true, useNewUrlParser: true, useFindAndModify: false, useUnifiedTopology: true &#125;;&#125;mongoose.connect(mongoUrl, getOptions());const client = mongoose.connection;client.on('connected', () =&gt; &#123; console.log(\"mongo connected\") &#125;);client.on('reconnected', () =&gt; &#123; console.log(\"mongo reconnected\") &#125;);client.on('disconnected', () =&gt; &#123; console.log(\"mongo disconnected\") &#125;);client.on('error', (error) =&gt; &#123; console.log(\"connect to \" + mongoUrl + \"failed\") &#125;);function close() &#123; client.close();&#125;module.exports = &#123; client, close&#125;; 在 mongo 文件夹下创建文件夹 model 用来记录表定义，mongo/model/demo.js 举例如下： 12345678910const mongoose = require('mongoose');const Schema = mongoose.Schema;const demoSchema = new Schema(&#123; name: String, desc: String,&#125;)const db = mongoose.model('demo', demoSchema, 'demo');module.exports = db; 如何使用在需要操作 mongodb 的文件中先引入，如果是 web 接口服务，可以在主程序中引入一次，后面直接操作 model 就可以了 1const conn &#x3D; require(&#39;.&#x2F;connection&#39;); 举一个查询的例子： 12345const DemoDB &#x3D; require(&#39;.&#x2F;model&#x2F;demo&#39;);async function getAll() &#123; let res &#x3D; await DemoDB.find(); return res;&#125; 使用心得推荐在 mongo 文件夹下编写数据库连接操作部分，为每个 model 编写好操作方法，统一管理，这样代码看起来更清晰，维护起来更方便。 在接口服务中使用 mongodb 操作按照上面操作就可以了，如果是脚本操作，使用完毕需要关闭连接 1conn.close();","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"https://mojipanda.com/tags/mongodb/"},{"name":"Nodejs","slug":"Nodejs","permalink":"https://mojipanda.com/tags/Nodejs/"}]},{"title":"Nodejs-如何使用MySQL","slug":"Nodejs-如何使用MySQL","date":"2020-05-16T07:28:21.000Z","updated":"2020-05-16T07:50:05.394Z","comments":true,"path":"blog/56c7/","link":"","permalink":"https://mojipanda.com/blog/56c7/","excerpt":"本文主要介绍在 Nodejs 中如何连接并使用 MySQL","text":"本文主要介绍在 Nodejs 中如何连接并使用 MySQL 安装准备我们需要安装 mysql2 依赖包 1npm install mysql2 --save 可以在项目中新建一个 mysql 文件夹用来管理 mysql 的相关操作。 具体实现在 mysql 文件夹下新建 connection.js，内容如下： 123456789const mysql = require('mysql2');const config = require('../config');const pool = mysql.createPool(config.mysql);const client = pool.promise();module.exports = &#123; pool, client&#125;; 这里 mysql 的连接配置写在 config.js 文件中，示例配置项如下： 123456789101112131415const initVal &#x3D; &#123; mysql: &#123; host: &#39;localhost&#39;, port: 3306, user: &#39;username&#39;, password: &#39;123456&#39;, database: &#39;demo&#39;, charset: &#39;utf8mb4&#39;, connectionLimit: 5, dateStrings: true, decimalNumbers: true, &#125;&#125;module.exports &#x3D; initVal; 如何使用在需要操作 mysql 的文件中先引入 1const &#123; client &#125; &#x3D; require(&#39;.&#x2F;connection&#39;); 之后就可以使用 sql 语句进行愉快的操作了 123456async function getById(id) &#123; let sql &#x3D; &#96;select * from demo where id &#x3D; ?&#96;; let args &#x3D; [id]; let res &#x3D; await client.query(sql, args); return res[0];&#125; 需要注意的是 return res[0] 是返回的结果集，即对于查询有数据时，它返回的是数组。 使用心得推荐在 mysql 文件夹下编写数据库连接操作部分，这样代码看起来更清晰。 在接口服务中使用 mysql 操作按照上面操作就可以了，如果是脚本操作，使用完毕需要关闭连接 1client.end();","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://mojipanda.com/tags/mysql/"},{"name":"Nodejs","slug":"Nodejs","permalink":"https://mojipanda.com/tags/Nodejs/"}]},{"title":"Nodejs-如何使用Redis","slug":"Nodejs-如何使用Redis","date":"2020-05-15T14:14:47.000Z","updated":"2020-05-16T07:43:40.700Z","comments":true,"path":"blog/1ab7/","link":"","permalink":"https://mojipanda.com/blog/1ab7/","excerpt":"本文主要介绍在 Nodejs 中如何连接并使用 Redis，通过 Nodejs 操作使用 Redis 还是相对比较简单的。","text":"本文主要介绍在 Nodejs 中如何连接并使用 Redis，通过 Nodejs 操作使用 Redis 还是相对比较简单的。 安装准备我们需要安装 redis 依赖包 1npm install redis --save 可以在项目中新建一个 cache 文件夹用来管理 redis 的相关操作。 具体实现在 cache 文件夹下新建 connection.js，内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445const redis = require('redis');const &#123; promisify &#125; = require('util');const client = redis.createClient(&#123; host: \"localhost\", password: \"123456\", db: 1, retry_strategy: function (options) &#123; if (options.error &amp;&amp; options.error.code === 'ECONNREFUSED') &#123; return new Error('The server refused the connection'); &#125; if (options.total_retry_time &gt; 1000 * 60 * 60) &#123; return new Error('Retry time exhausted'); &#125; if (options.attempt &gt; 100) &#123; return undefined; &#125; return Math.min(options.attempt * 100, 3000); &#125;&#125;);const expire = promisify(client.expire).bind(client);const get = promisify(client.get).bind(client);const set = promisify(client.set).bind(client);const del = promisify(client.del).bind(client);class Cache &#123; Timeout = &#123; Default: 24 * 60 * 60 &#125;; async get(key) &#123; return await get(key); &#125; async set(key, value, timeout) &#123; let res = await set(key, value); if (timeout) &#123; await expire(key, timeout); &#125; return res; &#125; async del(key) &#123; await del(key); &#125;&#125;module.exports = new Cache(); 这里主要是 redis 的连接以及 redis 的几个简单操作，如获取，设置，删除，如果需要其他功能可以继续封装。 关于 redis 的连接配置可以单独写到配置文件里，这里为了方便介绍，把配置写死在示例代码里了。 如何使用在需要操作 redis 的文件中先引入 1const Cache &#x3D; require(&#39;.&#x2F;connection&#39;); 获取某个 key 对应的值： 1await Cache.get(key); 设置一个 key 对应的 value： 1await Cache.set(key, value); 如果需要指定缓存有效期限，比如 1 天： 1await Cache.set(key, value, 24 * 60 * 60); 使用心得推荐在 cache 文件夹下为每个 key 新建对应的文件程序来操作 redis，把这个 cache 当成一个缓存模块，其他地方使用只要引入这个模块操作就好了。这样管理起来方便，代码看起来更清晰。","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://mojipanda.com/tags/redis/"},{"name":"Nodejs","slug":"Nodejs","permalink":"https://mojipanda.com/tags/Nodejs/"}]},{"title":"Nodejs-基于Koa框架写个简单的接口","slug":"Nodejs-基于Koa框架写个简单的接口","date":"2020-05-14T04:02:44.000Z","updated":"2020-05-14T04:39:16.701Z","comments":true,"path":"blog/fb4f/","link":"","permalink":"https://mojipanda.com/blog/fb4f/","excerpt":"本文主要介绍如何使用 Nodejs 快速搭建服务端并提供简单的接口程序。","text":"本文主要介绍如何使用 Nodejs 快速搭建服务端并提供简单的接口程序。 准备工作首先我们创建一个项目文件夹 demo，进入这个文件夹，运行 npm init 初始化项目 123mkdir democd demonpm init 执行 npm init 命令会让你填写项目相关信息，可以一路默认，之后再改都可以。它主要就是在项目中新建一个 package.json 的文件并初始化一些项目信息。 其次需要安装 Koa 框架及一些插件 123npm install koa --savenpm install koa-router --savenpm install koa-bodyparser --save 编写主程序新建文件 index.js，这个文件名可以修改，同步修改一下 package.json 里 main项对应的文件名，表示这个文件是启动入口。index.js 代码如下： 123456789101112131415161718192021const Koa &#x3D; require(&#39;koa&#39;);const router &#x3D; require(&#39;koa-router&#39;)();const bodyParser &#x3D; require(&#39;koa-bodyparser&#39;);const app &#x3D; new Koa();const index &#x3D; router.get(&#39;&#x2F;demo&#39;, ctx &#x3D;&gt; &#123; ctx.response.body &#x3D; &#123; code: 0, data: &#39;Hello World!&#39; &#125;;&#125;).routes();app.use(index);app.use(bodyParser());&#x2F;&#x2F; 捕获未定义路由app.use((ctx) &#x3D;&gt; &#123; ctx.response.body &#x3D; &#123; code: 404 &#125;;&#125;);&#x2F;&#x2F; 启动项目app.listen(3000, () &#x3D;&gt; &#123; console.log(&#96;Server is starting at port 3000&#96;);&#125;); 运行使用在 node 环境中可以直接通过下面的命令启动 1node index.js 项目启动完毕就可以访问我们刚刚定义的接口 http://localhost:3000/demo 来查看返回信息了。 1&#123;code: 0, data: &quot;Hello World!&quot;&#125; 跨域问题前端页面调用接口可能会有跨域问题，解决方案有好几种，这里介绍简单一点的。 先安装一个插件 1npm install koa2-cors --save 在启动入口文件 index.js 加上这两句就可以了。 12const cors = require('koa2-cors');app.use(cors()); 使用心得Nodejs 这个脚本语言还是很强大的，能写前端就算了，居然还能写服务端。想想之前用 java 的时候要写好多东西，还有各种配置，最后打包运行花费好长时间。 当然 java 有它的强大，如果只是学习写写简单的接口，像 Nodejs Python Go 都有很简单的操作方法，也够简单的使用了。","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"https://mojipanda.com/tags/Nodejs/"}]},{"title":"Vue-使用全局静态常量","slug":"Vue-使用全局静态常量","date":"2020-05-13T10:17:37.000Z","updated":"2020-05-14T04:39:58.152Z","comments":true,"path":"blog/aa27/","link":"","permalink":"https://mojipanda.com/blog/aa27/","excerpt":"有很多共通的东西，需要我们使用全局静态常量。在 Vue 中是如何实现的呢？一起来看看吧～","text":"有很多共通的东西，需要我们使用全局静态常量。在 Vue 中是如何实现的呢？一起来看看吧～ 背景服务端定义了接口给前端调用，各个模块可能会调用到相同的接口，即使是不同的接口，如果服务端修改了接口定义，前端就要跟着改，这个时候，如果这些定义在一个指定文件，那么我们只要修改这一个文件就好了，其他模块都可以调用到。 如何使用首先在 src 目录新建文件夹 consts 并创建 index.js 12345678const Api &#x3D; &#123; BASE_URL: &#39;https:&#x2F;&#x2F;mojipanda.com&#39;, DEMO_SHOW: &#39;&#x2F;demo&#x2F;show&#39;,&#125;export default &#123; Api&#125; 在 main.js 中引入 1234567891011121314import Vue from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import router from &#39;.&#x2F;router&#39;import store from &#39;.&#x2F;store&#39;import consts from &#39;.&#x2F;consts&#39;Vue.config.productionTip &#x3D; falseVue.prototype.Global &#x3D; constsnew Vue(&#123; store, router, render: h &#x3D;&gt; h(App),&#125;).$mount(&#39;#app&#39;) 主要是添加下面两行，这里 Global 的名字可以修改成其他命名，当然 consts 文件夹命名也可以修改 12import consts from &#39;.&#x2F;consts&#39;Vue.prototype.Global &#x3D; consts 准备工作已经完成，接下来只要通过下面的语句就可以获取到我们在 consts/index.js 中定义的常量了。 1this.Global.Api.BASE_URL 使用心得总体感觉还是比较简单的，对于 consts/index.js，当常量越来越多，也是不方便管理的，我们可以进行拆分。对例子中的 Api 来说，我们可以在 consts 文件夹新建一个 api.js，在这里定义常量 123456const Api &#x3D; &#123; BASE_URL: &#39;https:&#x2F;&#x2F;mojipanda.com&#39;, DEMO_SHOW: &#39;&#x2F;demo&#x2F;show&#39;,&#125;export default Api 修改 consts/index.js 12345import Api from &#39;@&#x2F;consts&#x2F;api&#39;export default &#123; Api&#125; 这样拆分就完成了，当我们需要新增其他类型的常量，只要再新建一个文件并在 consts/index.js 引入就可以正常使用了。","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://mojipanda.com/tags/Vue/"}]},{"title":"Vue-状态管理模式Vuex","slug":"Vue-状态管理模式Vuex","date":"2020-05-13T08:35:32.000Z","updated":"2020-05-13T10:30:29.539Z","comments":true,"path":"blog/6604/","link":"","permalink":"https://mojipanda.com/blog/6604/","excerpt":"简单介绍一下在 Vue 项目中如何使用 Vuex 实现状态管理。比如我从服务端获取的个人信息，有很多模块都用到，这个时候相当于全局存储，方便各个模块调用。","text":"简单介绍一下在 Vue 项目中如何使用 Vuex 实现状态管理。比如我从服务端获取的个人信息，有很多模块都用到，这个时候相当于全局存储，方便各个模块调用。 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。 背景我在学习使用 Vue 的过程中，遇到了一个存储问题，在登录的时候获取到个人信息，我需要在多个模块展示，容易想到的就是弄个全局变量，各个模块都方便调用。这个时候我查到了 Vuex，下面我们就来看看如何使用。 如何使用先安装 1npm install vuex --save 为了结合 cookie 使用我们还可以安装一下 vue-cookies 1npm install vue-cookies --save 在 src 文件夹下创建文件夹 store 并新建文件 index.js 举个例子用，先上代码，内容如下： 12345678910111213141516171819202122232425262728293031323334import Vue from &#39;vue&#39;;import Vuex from &#39;vuex&#39;;import cookie from &#39;vue-cookies&#39;;Vue.use(Vuex);const store &#x3D; new Vuex.Store(&#123; state: &#123; userInfo: &#123;&#125;, isLogin: cookie.get(&#39;isLogin&#39;) &#125;, getters: &#123; userInfo: state &#x3D;&gt; state.userInfo, isLogin: state &#x3D;&gt; state.isLogin &#125;, mutations: &#123; setUserInfo(state, data) &#123; state.userInfo &#x3D; data; &#125;, setLoginState(state, data) &#123; state.isLogin &#x3D; data; cookie.set(&#39;isLogin&#39;, data); &#125; &#125;, actions: &#123; setUserInfo(&#123; commit &#125;, data) &#123; commit(&#39;setUserInfo&#39;, data); &#125;, setLoginState(&#123; commit &#125;, data) &#123; commit(&#39;setLoginState&#39;, data); &#125; &#125;&#125;);export default store; 在 main.js 中将 store 引入进来 123456789101112import Vue from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import router from &#39;.&#x2F;router&#39;import store from &#39;.&#x2F;store&#39;Vue.config.productionTip &#x3D; falsenew Vue(&#123; store, router, render: h &#x3D;&gt; h(App),&#125;).$mount(&#39;#app&#39;) 代码分析在 store/index.js 文件中 state 表示要要管理的状态，以 key-value 键值对的形式存储。 getters 是提供我们获取状态的入口。可以使用下面的语句获取信息 1let userInfo &#x3D; this.$store.getters.userInfo; mutations 是用来修改 state 管理的值。 actions 支持异步操作，官方简易通过这里提交修改信息，最终会调用 mutations。可以使用下面的语句修改信息，这里就是调用的 actions 1this.$store.dispatch(&quot;setLoginState&quot;, true); 本地存储使用上面的方法操作之后，我发现刷新一下页面就会导致之前存储的状态全部丢失。然后找到了下面的解决方案，就是在 localStorage 中存储 store 的值，创建的时候再获取。这样前端的状态信息就不会丢了。代码如下： 12345678910111213141516171819202122232425&lt;template&gt; &lt;div id&#x3D;&quot;app&quot;&gt; &lt;router-view &#x2F;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, created() &#123; if (localStorage.getItem(&quot;store&quot;)) &#123; this.$store.replaceState( Object.assign( &#123;&#125;, this.$store.state, JSON.parse(localStorage.getItem(&quot;store&quot;)) ) ); &#125; window.addEventListener(&quot;beforeunload&quot;, () &#x3D;&gt; &#123; localStorage.setItem(&quot;store&quot;, JSON.stringify(this.$store.state)); &#125;); &#125;&#125;;&lt;&#x2F;script&gt; 特性 数据生命周期 数据存放大小 与服务器通信 cookie 一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效 4K左右 每次都会携带在HTTP头中，如果使用cookie保存过多数据，会带来性能问题 sessionStorage 仅在当前会话下有效，关闭页面或浏览器后被清除 一般5M 仅在浏览器中保存，不参与和服务器的通信 localStorage 除非被清除，否则永久保存 同上 同上 使用心得当 store/index.js 管理的状态越来越多时，这个文件肯定会很长，不方便维护。可以将 getters mutations actions 单独拆分出来。","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://mojipanda.com/tags/Vue/"}]},{"title":"Vue-集成AdminLTE","slug":"Vue-集成AdminLTE","date":"2020-05-12T04:03:52.000Z","updated":"2020-05-13T08:36:05.272Z","comments":true,"path":"blog/3c0d/","link":"","permalink":"https://mojipanda.com/blog/3c0d/","excerpt":"本文介绍使用 vue-cli3 集成 AdminLTE-2.4.18","text":"本文介绍使用 vue-cli3 集成 AdminLTE-2.4.18 AdminLTE 是基于 Bootstrap 的开源响应式前端模板。 我个人比较喜欢这套模板的原因主要有： 美观，众多模板中一眼就看中它了 开源免费 响应式支持很好 我不是前端开发人员，搞样式这种繁琐的事情还是交给现成的吧。虽然 AdminLTE3 也发布了，但是看起来个人感觉没有 AdminLTE2好，响应式处理也有点问题。感兴趣可以去官网看看不同版本的效果。 使用vue-cli3创建项目12npm install -g @vue/clivue create my-project 初始化项目步骤就不介绍了，按照vue-cli一步步操作就完成了。 引入AdminLTE接下来我们先安装 admin-lte 依赖包 1npm i admin-lte@2.4.18 --save 修改 public/index.html 给 body 加上样式 1&lt;body class&#x3D;&quot;hold-transition skin-blue sidebar-mini&quot;&gt; 修改 src/main.js src/main.js12345678910111213141516import Vue from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import &#39;admin-lte&#x2F;bower_components&#x2F;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.min.css&#39;import &#39;admin-lte&#x2F;bower_components&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&#39;import &#39;admin-lte&#x2F;bower_components&#x2F;Ionicons&#x2F;css&#x2F;ionicons.min.css&#39;import &#39;admin-lte&#x2F;dist&#x2F;css&#x2F;skins&#x2F;_all-skins.min.css&#39;import &#39;admin-lte&#x2F;dist&#x2F;css&#x2F;AdminLTE.min.css&#39;import &#39;admin-lte&#x2F;bower_components&#x2F;bootstrap&#x2F;dist&#x2F;js&#x2F;bootstrap.min.js&#39;import &#39;admin-lte&#x2F;dist&#x2F;js&#x2F;adminlte.min.js&#39;Vue.config.productionTip &#x3D; falsenew Vue(&#123; render: h &#x3D;&gt; h(App),&#125;).$mount(&#39;#app&#39;) 修改 src/App.vue src/App.vue123456789101112131415161718&lt;template&gt; &lt;div id&#x3D;&quot;app&quot;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;&#125;;&lt;&#x2F;script&gt;&lt;style&gt;#app &#123; font-family: Avenir, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;&#125;&lt;&#x2F;style&gt; 引入部分到这里就完成了，新页面需要新建模板文件，对照源码复制就好了。空白模板可以查看 admin-lte 源码包里的 starter.html，把 body 里面的 &lt;div class=&quot;wrapper&quot;&gt;...&lt;/div&gt; 部分拷贝到新建的页面 &lt;template&gt;&lt;/template&gt; 中。 启动预览1npm run serve 这个时候网页还有错误，Bootstrap 需要引入 JQuery，新建一个文件 vue.config.js 配置一下就行了。 vue.config.js12345678910111213const webpack &#x3D; require(&#39;webpack&#39;);module.exports &#x3D; &#123; configureWebpack: &#123; plugins: [ new webpack.ProvidePlugin(&#123; $: &#39;jquery&#39;, jQuery: &#39;jquery&#39;, &#39;window.jQuery&#39;: &#39;jquery&#39; &#125;) ] &#125;&#125; 使用心得由于要对照预览样式来查看自己想要的组件，我先下载了一份源码，在浏览器中打开 index.html，这个时候可以看到官方提供的所有的组件样式，然后浏览器右键显示网页源代码，就可以找到需要的组件的代码是怎么写的了。 为了后续使用方便，因为有不少组件都是通用的，所以我将各部分组件拆开了， 123456789&lt;template&gt; &lt;div class&#x3D;&quot;wrapper&quot;&gt; &lt;Header &#x2F;&gt; &lt;MainSidebar &#x2F;&gt; &lt;ContentWrapper &#x2F;&gt; &lt;Footer &#x2F;&gt; &lt;ControlSidebar &#x2F;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt; 由于 ContentWrapper 部分是每个页面独有的，可以做成路由，这样新写页面时只要写这部分就行了，头部底部，菜单导航之类的都不用修改。 1234567&lt;template&gt; &lt;!-- Content Wrapper. Contains page content --&gt; &lt;div class&#x3D;&quot;content-wrapper&quot;&gt; &lt;router-view &#x2F;&gt; &lt;&#x2F;div&gt; &lt;!-- &#x2F;.content-wrapper --&gt;&lt;&#x2F;template&gt;","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://mojipanda.com/tags/Vue/"}]},{"title":"胡言乱语","slug":"胡言乱语","date":"2020-05-10T15:45:21.000Z","updated":"2020-05-10T16:05:02.874Z","comments":true,"path":"blog/8827/","link":"","permalink":"https://mojipanda.com/blog/8827/","excerpt":"母亲节快乐～","text":"母亲节快乐～ 一晃，工作已经快5年了，算得上是中长的工作年龄了吧！疫情的原因，今年过年休息了1个多月，3月份回南京，原先安排的同事有其他工作，临时被作为替补的，安排跟了审计厅的项目，工作也渐渐忙碌起来了 按理，应该是休息期间写点啥的，只是，啥都没写，你说期间都干了啥，我也不知道，好像就是吃饭，睡觉，带娃，有时工作，一天天也都过去了，最近工作忙碌起来了，反而想写点啥 一直在学校，接触外界不多，加上工作性质原因，见世面相对更窄了～很多时候，感觉已经像温水煮青蛙，我就是那只青蛙🐸；啥都没变，只是，少了当初刚开始的激情和动力，不得不说，这是可耻的，也是恐怖的，不折不扣的成了一个没有情调、没有梦想的行尸走肉～ 海豚宝宝已经快两岁了，如果说父母的高度决定子女的高度，似乎已经想象到他的未来，有点恐慌；再回头看看自己，不知觉中，很多都已经失去了兴趣，夸张点，与社会似乎脱节了已经，要资产，不好意思，木的；要底蕴，不好意思，木的；要能力，不好意思，还是木的……别人增长的是知识与阅历，而我唯一增长的是渐渐上调的年龄数字，这么多年，我都干什么了？ 或许以前一直是那只青蛙，没有太察觉落差，而这次出来，接触到了不同的人，接触到了不同的事，这种对比和落差更加暴露无遗，相形见绌～ 且不说资本的差距，也不说业务能力的差距，单论最直白的沟通交流能力吧，每个人的行事作风或许都不一致，但是，的确符合一个定律，当你的知识面够广时，你可以带动话题的走向，可以从他人的叙述中择取到你想要的信息，筛选出有用的信息；而当你的知识积累及专业水平远远超越对方时，或许不能实现每一句都是真理，但是至少可以实现即便你是在挑对方的错，也可以让对方心悦诚服的认理～很多时候，盲目的聊天，我听不到啥或者都听到了，却不知道是啥，但是他们却可以敏锐的提炼出有用的信息，这是落差之一；有时候与他人沟通，我完全盲目应该如何带动话题，只能听着，或者，就此沉默，而他们，可以让话题一直不停，这是落差之二；有时候提出对方不足，我可能最后是被说服的一方或者是提高音量的一方，而他们可以做到一直是平淡温和的语气，带动对方跟上他们的思路，这是落差之三……比如说，经常会被审计单位是带着一肚子的不满和理由过来的，有时候阵势挺大，甚至有点教训的气场，但最后都被他们以云淡风轻的气场和温润如玉的语句给说服了～想想如果是我，很多时候，要么是被对方说服，要么是与对方争吵，我所能做的往往是无话可说或者是提升音量，落差着实大～ 很多时候，我们之所以迷茫、彷徨，只是因为能力欠佳、欲望太多，想想，确实有点符合自己的现状～传说中的：能力撑不起野心～心思涌动，能力欠缺～ 现在的自己已经是三个身份：一个是女儿，一个是母亲，一个是妻子～于女儿，要有孝，于母亲，要担责，于妻子，要有责～如果说信命，那么，也就认了；但是，真心是没有拿的出手的亮点，明显是自己失责……嗯，还是应该做点啥吧，可以想想～ 当然，今天是母亲节，还是要说一句，所有妈妈们，母亲节快乐！","categories":[{"name":"心情物语","slug":"心情物语","permalink":"https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"}],"tags":[{"name":"心情","slug":"心情","permalink":"https://mojipanda.com/tags/%E5%BF%83%E6%83%85/"}],"author":{"name":"CrystalXH","avatar":"/img/author1.jpg"}},{"title":"宝宝教爸爸快捷输入","slug":"宝宝教爸爸快捷输入","date":"2020-05-09T12:53:45.000Z","updated":"2020-05-10T16:00:22.525Z","comments":true,"path":"blog/7055/","link":"","permalink":"https://mojipanda.com/blog/7055/","excerpt":"宝宝在爸爸的电脑上随便乱按，意外教会了爸爸一种快捷输入方式。","text":"宝宝在爸爸的电脑上随便乱按，意外教会了爸爸一种快捷输入方式。 事情上这样的，我的苹果笔记本打开在一旁，开着一个浏览器的空白页，正在思索着查点资料，然后临时有事离开了座位。 刚走出房门没一会，就看见宝宝兴冲冲的趴上我的电脑，一边喊着“帮忙，帮忙”，一边在键盘上随便乱按。接着就看到了下面这个样子。 好像也没啥是吧，就是浏览器里输入里几个字符而已。再仔细看看，这个大于等于号，还有这个除号是怎么敲出来的。 我思索了一会，因为我并不知道这个快捷键，而且输入法并不是智能模式，于是我尝试输入了一下，可单个按键的敲怎么也敲不出来这种组合符号啊。那么只能是组合按键了，最终被我试出来了。 12345&#x2F;*** * ┌────────┐ ┌─────┐ * │ option │ + │ &gt; . │ &#x3D; ≥ * └────────┘ └─────┘ *&#x2F; 12345&#x2F;*** * ┌────────┐ ┌─────┐ * │ option │ + │ ? &#x2F; │ &#x3D; ÷ * └────────┘ └─────┘ *&#x2F; 仔细看看这三个键确实在一块呢，也难怪宝宝这小手还能按出组合快捷键来。 1234567&#x2F;*** * ┬─┴─┬─┴─┬ * │&gt; .│? &#x2F;│ * ┼───┴──┬┴ * │option│ * └──────┘ *&#x2F; 好吧，宝宝你让爸爸奇奇怪怪的知识点又增加了呢。 12345&#x2F;*** * ┌───────┐ ┌────────┐ ┌─────┐ * │ shift │ + │ option │ + │ K │ &#x3D;  * └───────┘ └────────┘ └─────┘ *&#x2F;","categories":[{"name":"日常生活","slug":"日常生活","permalink":"https://mojipanda.com/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"}],"tags":[]},{"title":"Docker安装MongoDB","slug":"Docker安装MongoDB","date":"2020-05-08T09:00:00.000Z","updated":"2020-05-10T16:02:55.960Z","comments":true,"path":"blog/ac76/","link":"","permalink":"https://mojipanda.com/blog/ac76/","excerpt":"介绍一下如何通过 docker 安装 mongodb","text":"介绍一下如何通过 docker 安装 mongodb MongoDB 是一个基于分布式文件存储的数据库。这里介绍一下如何通过 docker 来安装。 查看可用版本我们首先通过 MongoDB 镜像库来查询有哪些可用版本。 MongoDB 镜像库 获取镜像可以通过下面的命令获取最新版本的镜像 1docker pull mongo:latest 往往我们需要知道版本号，可以通过指定版本号的方式获取指定镜像 1docker pull mongo:4.2 查看本地镜像下面两种执行命令都可以查看本地获取的镜像列表，检查一下是否获取成功 1docker images 1docker image ls 启动容器镜像获取完毕就可以启动容器了，下面是我安装的时候使用的执行命令 1234567docker run -it -p 27017:27017 \\ -v /mojipanda/docker/mongo/conf:/data/configdb \\ -v /mojipanda/docker/mongo/data:/data/db \\ --name mongo \\ --restart=always \\ -d mongo:4.2 \\ --auth 介绍一下主要执行参数： 执行参数 说明 -p 27017:27017 指定端口号 -v 挂载本地目录 --name mongo 设置容器名称为 mongo --restart=always 设置容器重启后自动启动 -d mongo:4.2 指定镜像 --auth 设置访问需要授权 启动成功通过下面的命令查看容器的运行信息 1docker ps 创建用户和设置密码首先执行下面的命令行进入到容器里并使用 MongoDB 的 shell 连接到 admin 数据库 1docker exec -it mongo mongo admin 执行语句创建一个用户名为 root，密码为 123456 的用户，并授权可以操作所有数据库 1db.createUser(&#123; user:&#39;root&#39;,pwd:&#39;123456&#39;,roles:[ &#123; role:&#39;userAdminAnyDatabase&#39;, db: &#39;admin&#39;&#125;]&#125;); 到这里我们的 mongodb 就已经成功安装部署好了。","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://mojipanda.com/tags/docker/"},{"name":"mongodb","slug":"mongodb","permalink":"https://mojipanda.com/tags/mongodb/"}]},{"title":"Docker安装MySQL","slug":"Docker安装MySQL","date":"2020-05-08T08:00:00.000Z","updated":"2020-05-10T16:03:11.556Z","comments":true,"path":"blog/ef32/","link":"","permalink":"https://mojipanda.com/blog/ef32/","excerpt":"介绍一下如何通过 docker 安装 mysql","text":"介绍一下如何通过 docker 安装 mysql MySQL 是最流行的关系型数据库管理系统。这里介绍一下如何通过 docker 来安装。 查看可用版本我们首先通过 MySQL 镜像库来查询有哪些可用版本。 MySQL 镜像库 获取镜像可以通过下面的命令获取最新版本的镜像 1docker pull mysql:latest 往往我们需要知道版本号，可以通过指定版本号的方式获取指定镜像 1docker pull mysql:8.0 查看本地镜像下面两种执行命令都可以查看本地获取的镜像列表，检查一下是否获取成功 1docker images 1docker image ls 启动容器镜像获取完毕就可以启动容器了，下面是我安装的时候使用的执行命令 1234567docker run -it -p 3306:3306 \\ -v /mojipanda/docker/mysql/conf:/etc/mysql/conf.d \\ -v /mojipanda/docker/mysql/data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=123456 \\ --name mysql \\ --restart=always \\ -d mysql:8.0 介绍一下主要执行参数： 执行参数 说明 -p 3306:3306 指定端口号 -v 挂载本地目录 -e MYSQL_ROOT_PASSWORD=123456 设置root用户的密码 123456 --name mysql 设置容器名称为 mysql --restart=always 设置容器重启后自动启动 -d mysql:8.0 指定镜像 启动成功通过下面的命令查看容器的运行信息 1docker ps 到这里我们的 mysql 就已经成功安装部署好了。","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://mojipanda.com/tags/docker/"},{"name":"mysql","slug":"mysql","permalink":"https://mojipanda.com/tags/mysql/"}]},{"title":"Docker安装Redis","slug":"Docker安装Redis","date":"2020-05-08T07:00:00.000Z","updated":"2020-05-10T16:03:26.748Z","comments":true,"path":"blog/a342/","link":"","permalink":"https://mojipanda.com/blog/a342/","excerpt":"介绍一下如何通过 docker 安装 redis","text":"介绍一下如何通过 docker 安装 redis Redis 是一个高性能的 key-value 数据库。这里介绍一下如何通过 docker 来安装。 查看可用版本我们首先通过 Redis 镜像库来查询有哪些可用版本。 Redis 镜像库 获取镜像可以通过下面的命令获取最新版本的镜像 1docker pull redis:latest 往往我们需要知道版本号，可以通过指定版本号的方式获取指定镜像 1docker pull redis:6.0 查看本地镜像下面两种执行命令都可以查看本地获取的镜像列表，检查一下是否获取成功 1docker images 1docker image ls 启动容器镜像获取完毕就可以启动容器了，下面是我安装的时候使用的执行命令 1234567docker run -it -p 6379:6379 \\ -v /mojipanda/docker/redis/redis.conf:/etc/redis/redis.conf \\ -v /mojipanda/docker/redis/data:/data \\ --name redis \\ --restart=always \\ -d redis:6.0 \\ redis-server --appendonly yes --requirepass \"123456\" 介绍一下主要执行参数： 执行参数 说明 -p 6379:6379 指定端口号 -v 挂载本地目录 --name redis 设置容器名称为 redis --restart=always 设置容器重启后自动启动 -d redis:6.0 指定镜像 --appendonly yes 数据持久化 --requirepass &quot;123456&quot; 设置访问需要的密码 123456 启动成功通过下面的命令查看容器的运行信息 1docker ps 到这里我们的 redis 就已经成功安装部署好了。","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://mojipanda.com/tags/docker/"},{"name":"redis","slug":"redis","permalink":"https://mojipanda.com/tags/redis/"}]},{"title":"记录一下阿里云服务器和域名购买以及备案","slug":"记录一下阿里云服务器和域名购买以及备案","date":"2020-05-08T01:20:24.000Z","updated":"2020-05-10T16:02:08.415Z","comments":true,"path":"blog/ef9e/","link":"","permalink":"https://mojipanda.com/blog/ef9e/","excerpt":"从 2020-05-01 购买阿里云服务器及域名到 2020-05-08 备案成功。记录一下其中的历程。","text":"从 2020-05-01 购买阿里云服务器及域名到 2020-05-08 备案成功。记录一下其中的历程。 问：为什么突然想要购买服务器和域名搭建网站？ 答：作为一名开发人员，我觉得能够拥有属于自己的网站是一件很酷的事情。可以搭建博客来记录我想记录的，可以自己实现有趣的内容分享给朋友，可以更加深入的去学习，总之，就是这样了。 问：怎么选择的云服务器和域名？ 答：目前使用阿里云服务器比较普遍，厂商方面就没有特别挑选了。起步阶段除了搭建博客还没想到可以做别的什么，因此配置上不用太挑剔。至于域名，随便搜索了一下 mojipanda，看到还有 .com 域名，那就这样吧。 名称 值 实例规格 ecs.s6-c1m1.small CPU 1核 内存 1G 操作系统 Ubuntu 18.04 64位 贷款 固定带宽 1M 问：一共花费了多少钱？ 答：听说是购买的年限越长越优惠，阿里云还有券之类的，还有新人优惠，看网上别人在双十一购买的比较便宜，我这个呢，服务器和域名都是买了3年，云服务器 ¥937.6，英文域名 ¥193.0，因此一共 ¥1130.6，差不多一天一块钱的样子。 问：从购买到备案成功需要多久？ 答：感觉比预想中的要快，从 05-01 上午 到 05-08 上午一共 7 整天。 问：都是什么流程？ 答：购买域名需要填写实名认证信息，这个填一下很快就好了，审核也快，之后购买域名，购买云服务器，选好下单付钱就行了。然后把域名绑定到服务器（操作步骤有点忘记了，总之不复杂，就是填信息）。这个时候可以去服务器上随便部署个 Hello World 看看能不能访问。由于域名没有备案，因此只能通过公网IP访问。所以接下来就是备案，在阿里云App搜索备案，然后按照实际信息填吧。由于域名信息需要2-3天才能同步到阿里这边，然后在 05-03 早上我发现可以提交初审了，果断提交，说是24h内有阿里工作人员电话核实备案信息，果然才刚到中午就接到了电话，核实了一下个人信息，网站信息。初审之后阿里自己会复核之后提交到管局，6-20个工作日通知审核结果，本来以为会很长，结果 05-08 上午就收到备案成功的短信了，收到短信之后需要再等一会阿里同步到备案信息，网站域名就可以正式访问了。 问：网站如何支持https访问？ 答：购买阿里云的SSL服务好像有点贵，然后网上搜索了一下免费的，用这个填写下网站信息，下载证书，先提交到阿里云后台（这个网站提供了一键操作），再放到服务器里配置一下。 免费 SSL 问：备案成功之后需要做什么？ 答：我收到备案成功通知之后，先把备案号按照要求放到网页底部链接到备案系统网站，部署到服务器，正好这个时候阿里云已收到备案信息，域名正式可以访问了，然后通知好友网站上线啦，最后写下了这篇博文。","categories":[{"name":"经验小结","slug":"经验小结","permalink":"https://mojipanda.com/categories/%E7%BB%8F%E9%AA%8C%E5%B0%8F%E7%BB%93/"}],"tags":[]},{"title":"Hexo-快速简约高效的博客框架","slug":"Hexo-快速简约高效的博客框架","date":"2020-05-07T01:39:46.000Z","updated":"2020-05-10T16:03:53.611Z","comments":true,"path":"blog/1f8f/","link":"","permalink":"https://mojipanda.com/blog/1f8f/","excerpt":"Hexo - 一个快速简约且高效的静态博客框架","text":"Hexo - 一个快速简约且高效的静态博客框架 简介Hexo 是一个静态博客框架，将 Markdown 文件渲染转换成 html，支持很多功能强大的插件，支持很多各种有趣的主题，总有一款适合你。 简易教程安装 hexo-cli 工具 1npm install hexo-cli -g 初始化项目 blog 1hexo init blog 启动项目，通过 http://localhost:4000 访问预览效果 123cd blognpm installhexo server 写一篇新博客，推荐使用下面的命令行创建，也可以在 source/_posts/ 文件夹内自行创建。命令行创建的文件会根据 scaffolds 文件夹里的模板创建。这里的模板可以自行修改，添加一些通用配置。 1hexo new post \"这是文章名称\" 如果写的博客还不想立即发布，推荐使用下面的命令行创建草稿。也可以在 source/_drafts/ 文件夹内自行创建。 1hexo new draft \"这是文章名称\" 草稿写完可以执行命令来发布，当然也可以直接移动到 source/_posts/ 文件夹中。 1hexo publish post \"这是文章名称\" 写一个新的页面，例如关于页面，可以通过下面的命令行创建。 1hexo new page \"about\" 写好的文章需要执行下面的命令来将 Markdown 文件生成 html 文件。第一条用来清空之前生成好的，如果只是文章修改可以直接执行第二条。如果主题有修改，推荐两条语句都执行一下。hexo g 是 hexo generate 的缩写，效果一样。 12hexo cleanhexo g 最后执行启动命令就可以预览了。hexo s 是 hexo server 的缩写，效果一样。 1hexo s 在 _config.yml 文件配置 deploy 信息之后，可以通过下面的命令行直接将生成好的博客网站部署到 git 上。hexo d 是 hexo deploy 的缩写，效果一样。 1hexo d 需要安装下面这个插件才能使用 git 进行自动部署 1npm install hexo-deployer-git --save 博客主题Hexo 有很多有趣的主题，每个人审美不同，需要自己去选择自己喜欢的主题，如果有开发能力，也可以自己写一套主题。先来看一波官方推荐的主题吧，还可以在 Github 上通过 hexo 关键词进行搜索，发现更多主题。 Hexo 官方推荐主题 将主题拷贝到 themes 文件夹下，在 _config.yml 配置 theme 项来指定主题。 Hexo 还提供了很多插件来使博客更加丰富有趣。使用插件需要先安装再配置最后生成并预览。 Hexo 插件 高级教程更多功能及使用请参考官方文档，官方地址见下方参考资料。不同主题也有不同的配置，需要学习一下该主题作者制定的规则。 使用心得我对前端样式之类的不怎么熟悉，想要搞一套好的博客出来只能膜拜前辈们的心血。当文章达到一定数量的时候，Hexo 可能在执行转换命令时会比较慢，但这个不怎么影响使用。而且不需要复杂的部署就可以呈现如此优美的博客站点，并且适配多端环境，本人可以说非常喜欢了。 在选择主题方面，我看了很多主题，官方推荐的主题也全部都预览过，还搜索过其他主题，其中有很多有趣的样式，可毕竟只能选择一个，最终选择了现在使用的样式 Volantis 。选主题这种事，随缘，看对眼了就行。","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://mojipanda.com/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Docsify-文档网站生成工具","slug":"Docsify-文档网站生成工具","date":"2020-05-06T14:40:30.000Z","updated":"2020-05-10T16:03:39.140Z","comments":true,"path":"blog/942f/","link":"","permalink":"https://mojipanda.com/blog/942f/","excerpt":"Docsify - 一个神奇的文档网站生成工具","text":"Docsify - 一个神奇的文档网站生成工具 简介Docsify 是一个动态生成文档网站的工具。只需要一个 index.html 就可以写文档并部署成文档网站，Markdown 文件会在运行时自动转换。 简易教程安装 docsify-cli 工具 1npm i docsify-cli -g 在项目的 ./docs 目录里写文档，通过 init 初始化项目 1docsify init ./docs 项目初始化成功后，会在项目的 ./docs 目录创建如下几个文件： index.html 文档网站入口文件 README.md 主页内容 .nojekyll 用于阻止 GitHub Pages 会忽略掉下划线开头的文件 本地预览 1docsify serve ./docs 执行完毕可以通过 http://localhost:3000 访问预览效果，docsify serve 让网站处于实时预览状态，本地有更新，网站会实时刷新。如果不需要实时刷新，可以使用 docsify start 1docsify start ./docs 默认端口号是 3000，如果需要更改端口号，可以通过在命令行后加 --port 3001 来指定端口 1docsify serve ./docs --port 3001 index.html 里插件使用的源文件 cdn 加速地址，可以将文件下载到本地来引用，这样无法连接外网的环境一样可以部署啦。 高级教程支持结合 Github 实现在线编辑，添加评论功能等等，更多定制化功能及插件使用请参考官方文档，官方地址见下方参考资料。 使用心得我本人还是很喜欢这种简约的文档网站的，文档系统主要是简洁，既方便写也方便看。Markdown 本身就适合写文档，结合 Docsify 使用简直完美。不需要调整复杂的样式，专注于写就好了。 我在以前的工作中使用过 Docsify 一手搭建部署了文档系统，既可以通过脚本生成接口文档，也可以人工书写设计文档，迭代文档，优化方案等等。","categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://mojipanda.com/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"收藏有趣的注释","slug":"收藏有趣的注释","date":"2020-05-04T06:41:16.000Z","updated":"2020-05-10T16:04:15.358Z","comments":true,"path":"blog/877a/","link":"","permalink":"https://mojipanda.com/blog/877a/","excerpt":"看看程序员都生产过哪些神级注释","text":"看看程序员都生产过哪些神级注释 这里只列举很小一部分我喜欢的内容，想要查看更多丰富的神级注释，可点击文末友情链接 12345678910111213141516&#x2F;*** * ┌───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐ * │Esc│ │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P&#x2F;S│S L│P&#x2F;B│ ┌┐ ┌┐ ┌┐ * └───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘ └┘ └┘ └┘ * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐ * │~ &#96;│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ &#x3D;│ BacSp │ │Ins│Hom│PUp│ │N L│ &#x2F; │ * │ - │ * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤ * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │ │ * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │ * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#39;│ Enter │ │ 4 │ 5 │ 6 │ │ * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤ ┌───┐ ├───┼───┼───┼───┤ * │ Shift │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? &#x2F;│ Shift │ │ ↑ │ │ 1 │ 2 │ 3 │ │ * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││ * │ Ctrl│ │Alt │ Space │ Alt│ │ │Ctrl│ │ ← │ ↓ │ → │ │ 0 │ . │←─┘│ * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘ *&#x2F; 1234567891011121314151617181920212223&#x2F;*** * _ooOoo_ * o8888888o * 88&quot; . &quot;88 * (| -_- |) * O\\ &#x3D; &#x2F;O * ____&#x2F;&#96;---&#39;\\____ * . &#39; \\\\| |&#x2F;&#x2F; &#96;. * &#x2F; \\\\||| : |||&#x2F;&#x2F; \\ * &#x2F; _||||| -:- |||||- \\ * | | \\\\\\ - &#x2F;&#x2F;&#x2F; | | * | \\_| &#39;&#39;\\---&#x2F;&#39;&#39; | | * \\ .-\\__ &#96;-&#96; ___&#x2F;-. &#x2F; * ___&#96;. .&#39; &#x2F;--.--\\ &#96;. . __ * .&quot;&quot; &#39;&lt; &#96;.___\\_&lt;|&gt;_&#x2F;___.&#39; &gt;&#39;&quot;&quot;. * | | : &#96;- \\&#96;.;&#96;\\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | | * \\ \\ &#96;-. \\_ __\\ &#x2F;__ _&#x2F; .-&#96; &#x2F; &#x2F; * &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; * &#96;&#x3D;---&#x3D;&#39; * * ............................................. * 佛祖保佑 永无BUG *&#x2F; 12345678910111213141516171819202122&#x2F;*** * _ooOoo_ * o8888888o * 88&quot; . &quot;88 * (| -_- |) * O\\ &#x3D; &#x2F;O * ___&#x2F;&#96;---&#39;\\____ * . &#39; \\\\| |&#x2F;&#x2F; &#96;. * &#x2F; \\\\||| : |||&#x2F;&#x2F; \\ * &#x2F; _||||| -:- |||||- \\ * | | \\\\\\ - &#x2F;&#x2F;&#x2F; | | * | \\_| &#39;&#39;\\---&#x2F;&#39;&#39; | | * \\ .-\\__ &#96;-&#96; ___&#x2F;-. &#x2F; * ___&#96;. .&#39; &#x2F;--.--\\ &#96;. . __ * .&quot;&quot; &#39;&lt; &#96;.___\\_&lt;|&gt;_&#x2F;___.&#39; &gt;&#39;&quot;&quot;. * | | : &#96;- \\&#96;.;&#96;\\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | | * \\ \\ &#96;-. \\_ __\\ &#x2F;__ _&#x2F; .-&#96; &#x2F; &#x2F; * &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; * &#96;&#x3D;---&#x3D;&#39; * ............................................. * 佛曰：bug 泛滥，我已瘫痪！ *&#x2F; 1234567891011&#x2F;*** * 佛曰: * 写字楼里写字间，写字间里程序员； * 程序人员写程序，又拿程序换酒钱。 * 酒醒只在网上坐，酒醉还来网下眠； * 酒醉酒醒日复日，网上网下年复年。 * 但愿老死电脑间，不愿鞠躬老板前； * 奔驰宝马贵者趣，公交自行程序员。 * 别人笑我忒疯癫，我笑自己命太贱； * 不见满街漂亮妹，哪个归得程序员？ *&#x2F; 123456789101112&#x2F;*** * * █████▒█ ██ ▄████▄ ██ ▄█▀ ██████╗ ██╗ ██╗ ██████╗ * ▓██ ▒ ██ ▓██▒▒██▀ ▀█ ██▄█▒ ██╔══██╗██║ ██║██╔════╝ * ▒████ ░▓██ ▒██░▒▓█ ▄ ▓███▄░ ██████╔╝██║ ██║██║ ███╗ * ░▓█▒ ░▓▓█ ░██░▒▓▓▄ ▄██▒▓██ █▄ ██╔══██╗██║ ██║██║ ██║ * ░▒█░ ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄ ██████╔╝╚██████╔╝╚██████╔╝ * ▒ ░ ░▒▓▒ ▒ ▒ ░ ░▒ ▒ ░▒ ▒▒ ▓▒ ╚═════╝ ╚═════╝ ╚═════╝ * ░ ░░▒░ ░ ░ ░ ▒ ░ ░▒ ▒░ * ░ ░ ░░░ ░ ░ ░ ░ ░░ ░ * ░ ░ ░ ░ ░ *&#x2F; 123456789101112131415161718192021222324&#x2F;*** * ┌─┐ ┌─┐ * ┌──┘ ┴───────┘ ┴──┐ * │ │ * │ ─── │ * │ ─┬┘ └┬─ │ * │ │ * │ ─┴─ │ * │ │ * └───┐ ┌───┘ * │ │ * │ │ * │ │ * │ └──────────────┐ * │ │ * │ ├─┐ * │ ┌─┘ * │ │ * └─┐ ┐ ┌───────┬──┐ ┌──┘ * │ ─┤ ─┤ │ ─┤ ─┤ * └──┴──┘ └──┴──┘ * 神兽保佑 * 代码无BUG! *&#x2F; 123456789101112131415161718192021222324&#x2F;*** * ┌─┐ ┌─┐ * ┌──┘ ┴───────┘ ┴──┐ * │ │ * │ ─── │ * │ &gt; &lt; │ * │ │ * │ ... ⌒ ... │ * │ │ * └───┐ ┌───┘ * │ │ * │ │ * │ │ * │ └──────────────┐ * │ │ * │ ├─┐ * │ ┌─┘ * │ │ * └─┐ ┐ ┌───────┬──┐ ┌──┘ * │ ─┤ ─┤ │ ─┤ ─┤ * └──┴──┘ └──┴──┘ * 神兽保佑 * 代码无BUG! *&#x2F; 123456789101112131415161718192021222324&#x2F;*** * ┌─┐ ┌─┐ + + * ┌──┘ ┴───────┘ ┴──┐++ * │ │ * │ ─── │++ + + + * ███████───███████ │+ * │ │+ * │ ─┴─ │ * │ │ * └───┐ ┌───┘ * │ │ * │ │ + + * │ │ * │ └──────────────┐ * │ │ * │ ├─┐ * │ ┌─┘ * │ │ * └─┐ ┐ ┌───────┬──┐ ┌──┘ + + + + * │ ─┤ ─┤ │ ─┤ ─┤ * └──┴──┘ └──┴──┘ + + + + * 神兽保佑 * 代码无BUG! *&#x2F; 1234567891011121314151617181920&#x2F;*** * ___&#x3D;&#x3D;&#x3D;&#x3D;-_ _-&#x3D;&#x3D;&#x3D;&#x3D;___ * _--^^^#####&#x2F;&#x2F; \\\\#####^^^--_ * _-^##########&#x2F;&#x2F; ( ) \\\\##########^-_ * -############&#x2F;&#x2F; |\\^^&#x2F;| \\\\############- * _&#x2F;############&#x2F;&#x2F; (@::@) \\\\############\\_ * &#x2F;#############(( \\\\&#x2F;&#x2F; ))#############\\ * -###############\\\\ (oo) &#x2F;&#x2F;###############- * -#################\\\\ &#x2F; VV \\ &#x2F;&#x2F;#################- * -###################\\\\&#x2F; \\&#x2F;&#x2F;###################- * _#&#x2F;|##########&#x2F;\\######( &#x2F;\\ )######&#x2F;\\##########|\\#_ * |&#x2F; |#&#x2F;\\#&#x2F;\\#&#x2F;\\&#x2F; \\#&#x2F;\\##\\ | | &#x2F;##&#x2F;\\#&#x2F; \\&#x2F;\\#&#x2F;\\#&#x2F;\\#| \\| * &#96; |&#x2F; V V &#96; V \\#\\| | | |&#x2F;#&#x2F; V &#39; V V \\| &#39; * &#96; &#96; &#96; &#96; &#x2F; | | | | \\ &#39; &#39; &#39; &#39; * ( | | | | ) * __\\ | | | | &#x2F;__ * (vvv(VVV)(VVV)vvv) * 神兽保佑 * 代码无BUG! *&#x2F; 123456789101112131415161718192021222324&#x2F;*** * * * __----~~~~~~~~~~~------___ * . . ~~&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;...... __--~ ~~ * -. \\_|&#x2F;&#x2F; |||\\\\ ~~~~~~::::... &#x2F;~ * ___-&#x3D;&#x3D;_ _-~o~ \\&#x2F; ||| \\\\ _&#x2F;~~- * __---~~~.&#x3D;&#x3D;~||\\&#x3D;_ -_--~&#x2F;_-~|- |\\\\ \\\\ _&#x2F;~ * _-~~ .&#x3D;~ | \\\\-_ &#39;-~7 &#x2F;- &#x2F; || \\ &#x2F; * .~ .~ | \\\\ -_ &#x2F; &#x2F;- &#x2F; || \\ &#x2F; * &#x2F; ____ &#x2F; | \\\\ ~-_&#x2F; &#x2F;|- _&#x2F; .|| \\ &#x2F; * |~~ ~~|--~~~~--_ \\ ~&#x3D;&#x3D;-&#x2F; | \\~--&#x3D;&#x3D;&#x3D;~~ .\\ * &#39; ~-| &#x2F;| |-~\\~~ __--~~ * |-~~-_&#x2F; | | ~\\_ _-~ &#x2F;\\ * &#x2F; \\ \\__ \\&#x2F;~ \\__ * _--~ _&#x2F; | .-~~____--~-&#x2F; ~~&#x3D;&#x3D;. * ((-&gt;&#x2F;~ &#39;.|||&#39; -_| ~~-&#x2F; , . _|| * -_ ~\\ ~~---l__i__i__i--~~_&#x2F; * _-~-__ ~) \\--______________--~~ * &#x2F;&#x2F;.-~~~-~_--~- |-------~~~~~~~~ * &#x2F;&#x2F;.-~~~--\\ * 神兽保佑 * 代码无BUG! *&#x2F; 123456789101112131415161718192021222324252627282930313233&#x2F;*** * ,s555SB@@&amp; * :9H####@@@@@Xi * 1@@@@@@@@@@@@@@8 * ,8@@@@@@@@@B@@@@@@8 * :B@@@@X3hi8Bs;B@@@@@Ah, * ,8i r@@@B: 1S ,M@@@@@@#8; * 1AB35.i: X@@8 . SGhr ,A@@@@@@@@S * 1@h31MX8 18Hhh3i .i3r ,A@@@@@@@@@5 * ;@&amp;i,58r5 rGSS: :B@@@@@@@@@@A * 1#i . 9i hX. .: .5@@@@@@@@@@@1 * sG1, ,G53s. 9#Xi;hS5 3B@@@@@@@B1 * .h8h.,A@@@MXSs, #@H1: 3ssSSX@1 * s ,@@@@@@@@@@@@Xhi, r#@@X1s9M8 .GA981 * ,. rS8H#@@@@@@@@@@#HG51;. .h31i;9@r .8@@@@BS;i; * .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS * s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;, * :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B, * .hM@@@#@@#MX 51 r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8 * :3B@@@@@@@@@@@&amp;9@h :Gs .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@: * s&amp;HA#@@@@@@@@@@@@@@M89A;.8S. ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r * ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;. ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i * 5#@@#&amp;@@@@@@@@@@@@@@@@@@9 .39: ;@@@@@@@@@@@@@@@@@@@@@@@@@@@; * 9@@@X:MM@@@@@@@@@@@@@@@#; ;31. H@@@@@@@@@@@@@@@@@@@@@@@@@@: * SH#@B9.rM@@@@@@@@@@@@@B :. 3@@@@@@@@@@@@@@@@@@@@@@@@@@5 * ,:. 9@@@@@@@@@@@#HB5 .M@@@@@@@@@@@@@@@@@@@@@@@@@B * ,ssirhSM@&amp;1;i19911i,. s@@@@@@@@@@@@@@@@@@@@@@@@@@S * ,,,rHAri1h1rh&amp;@#353Sh: 8@@@@@@@@@@@@@@@@@@@@@@@@@#: * .A3hH@#5S553&amp;@@#h i:i9S #@@@@@@@@@@@@@@@@@@@@@@@@@A. * * * 又看源码，看你妹妹呀！ *&#x2F; 123456789101112131415&#x2F;*** * 頂頂頂頂頂頂頂頂頂 頂頂頂頂頂頂頂頂頂 * 頂頂頂頂頂頂頂 頂頂 * 頂頂 頂頂頂頂頂頂頂頂頂頂頂 * 頂頂 頂頂頂頂頂頂頂頂頂頂頂 * 頂頂 頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂頂 * 頂頂 頂頂 頂頂 頂頂 * 頂頂頂頂 頂頂頂頂頂 頂頂頂頂頂 * 頂頂頂頂 頂頂頂頂 頂頂頂頂 *&#x2F; 1234567891011121314&#x2F;*** * ░░░░░░░░░░░░░░░░░░░░░░░░▄░░ * ░░░░░░░░░▐█░░░░░░░░░░░▄▀▒▌░ * ░░░░░░░░▐▀▒█░░░░░░░░▄▀▒▒▒▐ * ░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐ * ░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐ * ░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌ * ░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒ * ░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐ * ░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄ * ░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒ * ▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒ * 单身狗就这样默默地看着你，一句话也不说。 *&#x2F; 1234567891011&#x2F;*** * .-~~~~~~~~~-._ _.-~~~~~~~~~-. * __.&#39; ~. .~ &#96;.__ * .&#39;&#x2F;&#x2F; \\.&#x2F; \\\\&#96;. * .&#39;&#x2F;&#x2F; | \\\\&#96;. * .&#39;&#x2F;&#x2F; .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._ | _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\\\&#96;. * .&#39;&#x2F;&#x2F;.-&quot; &#96;-. | .-&#39; &quot;-.\\\\&#96;. * .&#39;&#x2F;&#x2F;______.&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-.. \\ | &#x2F; ..-&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;.______\\\\&#96;. * .&#39;______________________________\\|&#x2F;______________________________&#96;. * *&#x2F; 12345678&#x2F;*** * You may think you know what the following code does. * But you dont. Trust me. * Fiddle with it, and youll spend many a sleepless * night cursing the moment you thought youd be clever * enough to &quot;optimize&quot; the code below. * Now close this file and go play with something else. *&#x2F; 12345678&#x2F;*** * For the brave souls who get this far: You are the chosen ones, * the valiant knights of programming who toil away, without rest, * fixing our most awful code. To you, true saviors, kings of men, * I say this: never gonna give you up, never gonna let you down, * never gonna run around and desert you. Never gonna make you cry, * never gonna say goodbye. Never gonna tell a lie and hurt you. *&#x2F; 12345678910&#x2F;*** * Dear maintainer: * * Once you are done trying to &#39;optimize&#39; this routine, * and have realized what a terrible mistake that was, * please increment the following counter as a warning * to the next guy: * * total_hours_wasted_here &#x3D; 42 *&#x2F; 1234&#x2F;*** * When I wrote this, only God and I understood what I was doing * Now, God only knows *&#x2F; 1&#x2F;&#x2F; drunk, fix later 12&#x2F;&#x2F; Magic. Do not touch.&#x2F;&#x2F; 麻鸡。勿动。 12&lt;!-- Here be dragons --&gt;&lt;!-- 前方高能 --&gt; 12&#x2F;* You are not expected to understand this *&#x2F;&#x2F;* 你绝不会明白的 *&#x2F;","categories":[{"name":"awesome","slug":"awesome","permalink":"https://mojipanda.com/categories/awesome/"}],"tags":[{"name":"注释","slug":"注释","permalink":"https://mojipanda.com/tags/%E6%B3%A8%E9%87%8A/"}]},{"title":"我在飘，你在守","slug":"我在飘，你在守","date":"2020-04-09T21:20:13.000Z","updated":"2020-05-10T16:04:45.533Z","comments":true,"path":"blog/d539/","link":"","permalink":"https://mojipanda.com/blog/d539/","excerpt":"我在飘，你在守","text":"我在飘，你在守 大二那年，转专业考试正好与西校区新生报道是同一天，考试结束后，闲着没事，于是心血来潮的跑到西校区凑热闹。同学说，来来来，有安徽的老乡，你接不？站在亭子里，连续来了两个安徽，第一个印象不深，个不高，第二个正好亭子盖住了脸，只觉得腿长，应该挺高（哈哈，允许我外貌协会一次），然后我就说我接第二个吧！进到亭子里，我就后悔了，妈呀，怎么这么小，本来以为是个大高个，结果是个小脸娃娃，心里嘀咕了一下，但还是接了。没接受培训，完全茫然接新生要有哪些事情，还好，同学帮忙一起带路，大概介绍了有哪些事情，后来听这货抱怨，去洗澡时刷卡没水，幸好他和同学一起去的澡堂，因为我没说过还要洗澡要转卡😄 一段时间后，这货发来短信，可以认你做姐姐么？想着这货跟个小屁孩一样，于是母性大发，同意了。然后开始发现这货还是挺黏人的，不过也是个比较认真的小屁孩，没有想象中那么不会生活自理，相反还是挺自立了，就是感觉情商太低，想事情太天真。那会比较无聊，没事喜欢泡图书馆或者逛街，看他无聊，会和同伴带上他，顺便熟悉熟悉镇江环境，我觉得我有时候就是太多事😄 大三那年，和前任分了，听了一个多月的单曲循环，想想无聊，于是报了注会，他倒是挺乖，啥也不问，只是会陪着一起自习，特意报了东区的课，然后晚上过来，再回西区，也召集他以前同学一起集体出游了一天。有一天，这货发神经似的，在当时火的人人网上私密留言：你好好忙你自己的事，以后我娶你~我愣了，因为这货一直就是一个小男孩，在我看来，啥都不懂，还没发育完全，更别提感情，于是立马打电话，我们不可能的事情，你好好学习，正常找你女朋友。 后面还是会一起自习，会和同学一起泡图书馆，他执意坚持，我说不可能，然后不联系了几个月~ 后面就是一直这样，因为始终觉得像小孩，我觉得他还是弟弟，始终没法像男朋友一样看待~ 后来我继续读研，他毕业先工作了，感觉略微成熟一些，还是会闹，分分合合，吵吵闹闹，他把工作调回了南京，为人处事风格也比以前成熟不少，也就差不多这个时候才开始真正男女朋友一样感觉，这已经是2016年了，虽然闹，但是好歹是男朋友身份了~ 2017年6月10号，他在新屋里布置了求婚，确实有些意外，虽然简单，但是多少还是有些惊喜，想想女生有时候挺好哄的~ 2017年6月22日，我们结婚了，婚礼准备比较仓促，但是还是有些紧张。婚后两人都不会做饭，好在上班，基本单位饮食，节假日或者周末了，才偶尔在家吃饭，我不喜欢做菜，于是做饭任务就在他手上，从刚开始的各种蛋包饭，花式面条，到后来渐渐会做几样炒菜 2018年7月5日，我们收获了我们的小礼物，男宝一枚，希望宝宝健康平安快乐的成长，也希望以后的生活会越来越好~不知道会不会夸了他几句，他就会变坏了 我一直想说，最幸运的事情是：我在飘，你一直在守；最感动的话语是：飘够了，你就会回来~ 后续：心情写在2018年7月，娃还没满月，时间是真的不经意就溜走了，已经快两年过去了，娃都快2岁了～～～生活依旧很简单，财米油盐酱醋茶，加上一只狗娃娃，可能本身都是那种比较安静的人吧；也会失落，因为会有各种各样的事情，但是，生活本身就是酸甜苦辣咸五味杂坛～～～ 也会生气，尽管我是个暴脾气，但很少吵的起来，因为这货是个闷葫芦，最大的憋屈就是你火气冲天了，他都不知道发生了啥事，简直要爆仓！！！","categories":[{"name":"心情物语","slug":"心情物语","permalink":"https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"}],"tags":[{"name":"心情","slug":"心情","permalink":"https://mojipanda.com/tags/%E5%BF%83%E6%83%85/"}],"author":{"name":"CrystalXH","avatar":"/img/author1.jpg"}},{"title":"博客个性化-看板娘","slug":"博客个性化-看板娘","date":"2019-05-08T13:52:18.000Z","updated":"2020-05-10T16:01:26.656Z","comments":true,"path":"blog/5645/","link":"","permalink":"https://mojipanda.com/blog/5645/","excerpt":"在博客右下角放一个萌萌的卡通人物，可根据鼠标位置摇头","text":"在博客右下角放一个萌萌的卡通人物，可根据鼠标位置摇头 如何添加以本博客为例 输入如下命令获取 live2d : 1npm install --save hexo-helper-live2d 输入如下命令获取 shizuku 模型: 1npm install live2d-widget-model-shizuku 在站点目录下的 _config.yml 文件，添加如下代码： 12345678910111213141516171819live2d: enable: true scriptFrom: local model: use: live2d-widget-model-shizuku #模型选择 scale: 1 display: superSample: 2 position: right #模型位置 hOffset: 90 width: 200 #模型宽度 height: 400 #模型高度 mobile: show: false #是否在手机端显示 react: opacity: 1 dialog: enable: true hitokoto: true 高级用法点击 hexo-helper-live2d 进入项目地址 点击 https://l2dwidget.js.org/dev.html 查看官方Demo 点击 https://huaji8.top/post/live2d-plugin-2.0/ 查看更多模型 模型设置API参阅 live2d-widget.js API 更多模型包通过如下命令安装 1npm install packagename 其中 packagename 包括 123456789101112131415161718192021live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-harulive2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16","categories":[{"name":"实用教程","slug":"实用教程","permalink":"https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://mojipanda.com/tags/Hexo/"},{"name":"个性化","slug":"个性化","permalink":"https://mojipanda.com/tags/%E4%B8%AA%E6%80%A7%E5%8C%96/"}]},{"title":"博客个性化-鼠标点击效果","slug":"博客个性化-鼠标点击效果","date":"2019-05-07T13:30:36.000Z","updated":"2020-05-10T16:01:43.404Z","comments":true,"path":"blog/22e3/","link":"","permalink":"https://mojipanda.com/blog/22e3/","excerpt":"添加鼠标点击动态效果，包括爱心效果，字体效果，烟花爆炸效果","text":"添加鼠标点击动态效果，包括爱心效果，字体效果，烟花爆炸效果 爱心效果新建文件 love.js，在 love.js 文件中添加以下代码： 1!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e&#x3D;0;e&lt;d.length;e++)d[e].alpha&lt;&#x3D;0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+&#x3D;.004,d[e].alpha-&#x3D;.013,d[e].el.style.cssText&#x3D;&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t&#x3D;&quot;function&quot;&#x3D;&#x3D;typeof e.onclick&amp;&amp;e.onclick;e.onclick&#x3D;function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a&#x3D;t.createElement(&quot;div&quot;);a.className&#x3D;&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a&#x3D;t.createElement(&quot;style&quot;);a.type&#x3D;&quot;text&#x2F;css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText&#x3D;e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d&#x3D;[];e.requestAnimationFrame&#x3D;function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3&#x2F;60)&#125;&#125;(),n()&#125;(window,document); 12&lt;!-- 页面点击小红心 --&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;love.js&quot;&gt;&lt;&#x2F;script&gt; 字体效果新建文件 click_show_text.js，在 click_show_text.js 文件中添加以下代码： 123456789101112131415161718192021222324252627282930313233var a_idx &#x3D; 0;jQuery(document).ready(function($) &#123; $(&quot;body&quot;).click(function(e) &#123; var a &#x3D; new Array (&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot;, &quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;); var $i &#x3D; $(&quot;&lt;span&#x2F;&gt;&quot;).text(a[a_idx]); a_idx &#x3D; (a_idx + 1) % a.length; var x &#x3D; e.pageX, y &#x3D; e.pageY; $i.css(&#123; &quot;z-index&quot;: 5, &quot;top&quot;: y - 20, &quot;left&quot;: x, &quot;position&quot;: &quot;absolute&quot;, &quot;font-weight&quot;: &quot;bold&quot;, &quot;color&quot;: &quot;#FF0000&quot; &#125;); $(&quot;body&quot;).append($i); $i.animate(&#123; &quot;top&quot;: y - 180, &quot;opacity&quot;: 0 &#125;, 3000, function() &#123; $i.remove(); &#125;); &#125;); setTimeout(&#39;delay()&#39;, 2000);&#125;);function delay() &#123; $(&quot;.buryit&quot;).removeAttr(&quot;onclick&quot;);&#125; 12&lt;!--单击显示文字--&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;click_show_text.js&quot;&gt;&lt;&#x2F;script&gt; 烟花爆炸效果新建文件 fireworks.js，在 fireworks.js 文件中添加以下代码： 1&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;0.1,a.alpha&#x3D;0.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;0.1,a.alpha&#x3D;0.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;; 123&lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;","categories":[{"name":"实用教程","slug":"实用教程","permalink":"https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://mojipanda.com/tags/Hexo/"},{"name":"个性化","slug":"个性化","permalink":"https://mojipanda.com/tags/%E4%B8%AA%E6%80%A7%E5%8C%96/"}]},{"title":"博客个性化-背景线条动画","slug":"博客个性化-背景线条动画","date":"2019-05-07T13:18:46.000Z","updated":"2020-05-10T16:00:48.227Z","comments":true,"path":"blog/9844/","link":"","permalink":"https://mojipanda.com/blog/9844/","excerpt":"博客背景添加线条动画效果","text":"博客背景添加线条动画效果 代码1234&lt;!--动态线条背景--&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; color&#x3D;&quot;220,220,220&quot; opacity&#x3D;&#39;0.7&#39; zIndex&#x3D;&quot;-2&quot; count&#x3D;&quot;200&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;&lt;&#x2F;script&gt; 参数名称 描述 color 线条颜色，(R,G,B)，默认：(0,0,0) opacity 线条透明度（0~1），默认：0.5 count 线条的总数量，默认：150 zIndex 背景的z-index属性，默认：-1 12&lt;!-- 样式一（鼠标点击更换样式） --&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;g.joyinshare.com&#x2F;hc&#x2F;ribbon.min.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt; 12&lt;!-- 样式二（飘动的彩带） --&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;g.joyinshare.com&#x2F;hc&#x2F;piao.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;","categories":[{"name":"实用教程","slug":"实用教程","permalink":"https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://mojipanda.com/tags/Hexo/"},{"name":"个性化","slug":"个性化","permalink":"https://mojipanda.com/tags/%E4%B8%AA%E6%80%A7%E5%8C%96/"}]},{"title":"博客个性化-一言","slug":"博客个性化-一言","date":"2019-05-05T08:35:48.000Z","updated":"2020-05-10T16:01:59.376Z","comments":true,"path":"blog/489f/","link":"","permalink":"https://mojipanda.com/blog/489f/","excerpt":"一言网(Hitokoto.cn)创立于 2016 年，隶属于萌创 Team，目前网站主要提供一句话服务。一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。或是感动，或是开心，有或是单纯的回忆。来到这里，留下你所喜欢的那一句句话，与大家分享，这就是一言存在的目的。","text":"一言网(Hitokoto.cn)创立于 2016 年，隶属于萌创 Team，目前网站主要提供一句话服务。一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。或是感动，或是开心，有或是单纯的回忆。来到这里，留下你所喜欢的那一句句话，与大家分享，这就是一言存在的目的。 简单示例:D 获取中... 12&lt;p id&#x3D;&quot;hitokoto&quot;&gt;:D 获取中...&lt;&#x2F;p&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;v1.hitokoto.cn&#x2F;?encode&#x3D;js&amp;select&#x3D;%23hitokoto&quot; defer&gt;&lt;&#x2F;script&gt; 高级用法请求地址：https://v1.hitokoto.cn/ 参数： 返回参数名称 描述 c=a Anime - 动画 c=b Comic – 漫画 c=c Game – 游戏 c=d Novel – 小说 c=e Myself – 原创 c=f Internet – 来自网络 c=g Other – 其他 更多参数参考：https://hitokoto.cn/api 示例： 12345678（从7种分类中随机抽取）https:&#x2F;&#x2F;v1.hitokoto.cn&#x2F;（请求获得一个分类是漫画的句子）https:&#x2F;&#x2F;v1.hitokoto.cn&#x2F;?c&#x3D;b（请求获得一个来自网络的句子，并以纯文本格式输出）https:&#x2F;&#x2F;v1.hitokoto.cn&#x2F;?c&#x3D;f&amp;encode&#x3D;text 接口返回的 JSON 正常数据格式为： 12345678&#123; &quot;id&quot;: 540, &quot;hitokoto&quot;: &quot;在灾难面前，如果连英雄都逃跑了，那还有谁能站出来？&quot;, &quot;type&quot;: &quot;a&quot;, &quot;from&quot;: &quot;一拳超人&quot;, &quot;creator&quot;: &quot;没了&quot;, &quot;created_at&quot;: &quot;1472551464&quot;&#125; 返回参数名称 描述 id 本条一言的id hitokoto 一言正文 type 类型 from 一言的出处 creator 添加者 created_at 添加时间 网页使用示例： 1234567891011121314151617181920212223242526272829303132333435363738&lt;p id&#x3D;&quot;hitokoto&quot;&gt;:D 获取中...&lt;&#x2F;p&gt;&lt;!-- 以下写法，选取一种即可 --&gt;&lt;!-- 现代写法，推荐 --&gt;&lt;!-- 兼容低版本浏览器 (包括 IE)，可移除 --&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bluebird@3&#x2F;js&#x2F;browser&#x2F;bluebird.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;whatwg-fetch@2.0.3&#x2F;fetch.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;!--End--&gt;&lt;script&gt; fetch(&#39;https:&#x2F;&#x2F;v1.hitokoto.cn&#39;) .then(function (res)&#123; return res.json(); &#125;) .then(function (data) &#123; var hitokoto &#x3D; document.getElementById(&#39;hitokoto&#39;); hitokoto.innerText &#x3D; data.hitokoto; &#125;) .catch(function (err) &#123; console.error(err); &#125;)&lt;&#x2F;script&gt;&lt;!-- 老式写法，兼容性最忧 --&gt;&lt;script&gt; var xhr &#x3D; new XMLHttpRequest(); xhr.open(&#39;get&#39;, &#39;https:&#x2F;&#x2F;v1.hitokoto.cn&#39;); xhr.onreadystatechange &#x3D; function () &#123; if (xhr.readyState &#x3D;&#x3D;&#x3D; 4) &#123; var data &#x3D; JSON.parse(xhr.responseText); var hitokoto &#x3D; document.getElementById(&#39;hitokoto&#39;); hitokoto.innerText &#x3D; data.hitokoto; &#125; &#125; xhr.send();&lt;&#x2F;script&gt;&lt;!-- 新 API 方法， 十分简洁 --&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;v1.hitokoto.cn&#x2F;?encode&#x3D;js&amp;select&#x3D;%23hitokoto&quot; defer&gt;&lt;&#x2F;script&gt; 致谢感谢 一言网(Hitokoto.cn) 为我们提供的服务","categories":[{"name":"实用教程","slug":"实用教程","permalink":"https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://mojipanda.com/tags/Hexo/"},{"name":"个性化","slug":"个性化","permalink":"https://mojipanda.com/tags/%E4%B8%AA%E6%80%A7%E5%8C%96/"}]},{"title":"博客个性化-今日诗词","slug":"博客个性化-今日诗词","date":"2019-05-04T14:25:13.000Z","updated":"2020-05-10T16:01:08.412Z","comments":true,"path":"blog/d67b/","link":"","permalink":"https://mojipanda.com/blog/d67b/","excerpt":"今日诗词(https://www.jinrishici.com/) API 是一个可以返回一句古诗词名句的接口。它可以通过图片和 JSON 格式调用。今日诗词 API 根据不同地点、时间、节日、季节、天气、景观、城市进行智能推荐。","text":"今日诗词(https://www.jinrishici.com/) API 是一个可以返回一句古诗词名句的接口。它可以通过图片和 JSON 格式调用。今日诗词 API 根据不同地点、时间、节日、季节、天气、景观、城市进行智能推荐。 如何使用在 HTML 中需要加载诗词的地方放置以下加载代码即可。 12&lt;span id&#x3D;&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词...&lt;&#x2F;span&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;sdk.jinrishici.com&#x2F;v2&#x2F;browser&#x2F;jinrishici.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt; 普通示例&nbsp;正在加载今日诗词... document.getElementById('jinrishici_update').onclick = function() { jinrishici.load(function(result) { ready(function() { var button = document.getElementById(\"jinrishici_update\") button.className = button.className + ' disabled' var sentence = document.getElementById('jinrishici-sentence'); sentence.innerText = result.data.content; setTimeout(function() { button.className = button.className.replace(' disabled','') }, 1000) }) }); return false; } 1234567891011121314151617181920212223&lt;p&gt; &lt;a href&#x3D;&quot;#&quot; class&#x3D;&#39;random_poem&#39;&gt; &lt;i class&#x3D;&quot;fas fa-random&quot; id&#x3D;&quot;jinrishici_update&quot;&gt;&lt;&#x2F;i&gt; &lt;&#x2F;a&gt;&amp;nbsp; &lt;span id&#x3D;&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词...&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt; document.getElementById(&#39;jinrishici_update&#39;).onclick &#x3D; function() &#123; jinrishici.load(function(result) &#123; ready(function() &#123; var button &#x3D; document.getElementById(&quot;jinrishici_update&quot;) button.className &#x3D; button.className + &#39; disabled&#39; var sentence &#x3D; document.getElementById(&#39;jinrishici-sentence&#39;); sentence.innerText &#x3D; result.data.content; setTimeout(function() &#123; button.className &#x3D; button.className.replace(&#39; disabled&#39;,&#39;&#39;) &#125;, 1000) &#125;) &#125;); return false; &#125;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;sdk.jinrishici.com&#x2F;v2&#x2F;browser&#x2F;jinrishici.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt; 高级示例&nbsp;点这里刷新 document.getElementById('jinrishici_advance').onclick = function() { jinrishici.load(function(result) { ready(function() { var button = document.getElementById(\"jinrishici_advance\") button.className = button.className + ' disabled' var sentence = document.getElementById('jinrishici-sentence-advance'); var content = result.data.content + \"\\n\"; var matchTags = \"\"; for (var i=0; i","categories":[{"name":"实用教程","slug":"实用教程","permalink":"https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://mojipanda.com/tags/Hexo/"},{"name":"个性化","slug":"个性化","permalink":"https://mojipanda.com/tags/%E4%B8%AA%E6%80%A7%E5%8C%96/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-04-10T05:14:52.000Z","updated":"2020-04-04T13:22:12.941Z","comments":true,"path":"blog/3eeb/","link":"","permalink":"https://mojipanda.com/blog/3eeb/","excerpt":"Hello World","text":"Hello World Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"编程学习","slug":"编程学习","permalink":"https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"},{"name":"心情物语","slug":"心情物语","permalink":"https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"},{"name":"日常生活","slug":"日常生活","permalink":"https://mojipanda.com/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"},{"name":"经验小结","slug":"经验小结","permalink":"https://mojipanda.com/categories/%E7%BB%8F%E9%AA%8C%E5%B0%8F%E7%BB%93/"},{"name":"awesome","slug":"awesome","permalink":"https://mojipanda.com/categories/awesome/"},{"name":"实用教程","slug":"实用教程","permalink":"https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"https://mojipanda.com/tags/mongodb/"},{"name":"Nodejs","slug":"Nodejs","permalink":"https://mojipanda.com/tags/Nodejs/"},{"name":"mysql","slug":"mysql","permalink":"https://mojipanda.com/tags/mysql/"},{"name":"redis","slug":"redis","permalink":"https://mojipanda.com/tags/redis/"},{"name":"Vue","slug":"Vue","permalink":"https://mojipanda.com/tags/Vue/"},{"name":"心情","slug":"心情","permalink":"https://mojipanda.com/tags/%E5%BF%83%E6%83%85/"},{"name":"docker","slug":"docker","permalink":"https://mojipanda.com/tags/docker/"},{"name":"工具","slug":"工具","permalink":"https://mojipanda.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"注释","slug":"注释","permalink":"https://mojipanda.com/tags/%E6%B3%A8%E9%87%8A/"},{"name":"Hexo","slug":"Hexo","permalink":"https://mojipanda.com/tags/Hexo/"},{"name":"个性化","slug":"个性化","permalink":"https://mojipanda.com/tags/%E4%B8%AA%E6%80%A7%E5%8C%96/"}]}