<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>磨叽熊猫</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mojipanda.com/"/>
  <updated>2020-07-01T14:25:27.231Z</updated>
  <id>https://mojipanda.com/</id>
  
  <author>
    <name>宋颖</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>婚龄纪念-3年-皮婚</title>
    <link href="https://mojipanda.com/blog/db2e/"/>
    <id>https://mojipanda.com/blog/db2e/</id>
    <published>2020-07-01T13:23:45.000Z</published>
    <updated>2020-07-01T14:25:27.231Z</updated>
    
    <content type="html"><![CDATA[<p>从领证那天起不知不觉已经到了三周年，娃也快两岁了。生活还是一如既往。</p><a id="more"></a><p>“生活要有仪式感”</p><p>“又是一个没有礼物的纪念日”</p><p>虽然她嘴上没说，但是我也确实没有准备，被生活压在夹缝中喘气，想准备点啥，可是又没什么思路，渐渐的时间就过去了。</p><p>一天 24 小时，从上班出门到下班进门差不多 12 - 13 小时，吃饭洗澡又是 1 小时，假如排除 8 小时睡觉，那就还有 2 小时左右，最近坚持花 1 小时学习，陪伴的时间只有 1 小时。然而最近女主人也是为了工作各种操劳，考试复习，所以基本上也只有吃饭的时候有半顿饭的交集，因为我通常要晚一点。</p><p>而一年前的上班时间，早上起来就各奔东西，晚上我还要加班，回来早已睡着了，每天都很疲惫，由于单休，到了周末真的是脑子想出去玩，身体却只想躺床上休息。</p><p>最近换了的工作有双休，可以花一天时间一家人出去玩，还一天时间休息，日子要舒服些了，比之前睁眼就是工作，闭眼就是睡觉的生活好太多了。</p><p>余额归零之后，还没到发工资的日子，账单已经不少了，还是要为了生活好好加油啊。</p><p>我渴望有更多的时间陪陪老婆孩子，同时也渴望赚更多的钱养家。</p><p>生活还在起步，余生一起携手并进，老婆，我爱你！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从领证那天起不知不觉已经到了三周年，娃也快两岁了。生活还是一如既往。&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情物语" scheme="https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>2020-端午安康</title>
    <link href="https://mojipanda.com/blog/94a6/"/>
    <id>https://mojipanda.com/blog/94a6/</id>
    <published>2020-06-25T09:49:12.000Z</published>
    <updated>2020-06-25T09:53:44.028Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/94a6/01.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/loading.svg&quot; data-original=&quot;https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/94a6/01.png&quot; alt&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="简笔画" scheme="https://mojipanda.com/categories/%E7%AE%80%E7%AC%94%E7%94%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Flutter-自定义Android应用名称和图标</title>
    <link href="https://mojipanda.com/blog/f9ad/"/>
    <id>https://mojipanda.com/blog/f9ad/</id>
    <published>2020-06-22T13:47:45.000Z</published>
    <updated>2020-06-22T13:57:16.112Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下在 Flutter 项目中如何自定义 Android 应用名称和图标。</p><a id="more"></a><p>新建的 Flutter 项目默认的应用名称是创建的项目名称，图标也是 Flutter 默认的图标。我们往往希望应用名称是中文名称，图标也可以是自定义图标。</p><p>首先在项目中找到下面路径的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目路径&#x2F;android&#x2F;app&#x2F;src&#x2F;main&#x2F;AndroidManifest.xml</span><br></pre></td></tr></table></figure><p>将图标拷贝到资源目录，这里有不同分辨率的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目路径&#x2F;android&#x2F;app&#x2F;src&#x2F;main&#x2F;res&#x2F;mipmap-hdpi&#x2F;logo.png</span><br></pre></td></tr></table></figure><p>在 <code>application</code> 节点下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:name&#x3D;&quot;io.flutter.app.FlutterApplication&quot;</span><br><span class="line">android:label&#x3D;&quot;磨叽熊猫&quot;</span><br><span class="line">android:icon&#x3D;&quot;@mipmap&#x2F;logo&quot;&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>android:label</code> 对应的值就是应用名称，<code>android:icon</code> 对应的值表示自定义的图标资源路径。</p><p>设置好这两个值重新打包运行就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下在 Flutter 项目中如何自定义 Android 应用名称和图标。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Flutter" scheme="https://mojipanda.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-第一个项目挖坑指南</title>
    <link href="https://mojipanda.com/blog/2c56/"/>
    <id>https://mojipanda.com/blog/2c56/</id>
    <published>2020-06-21T10:28:58.000Z</published>
    <updated>2020-06-21T11:09:09.031Z</updated>
    
    <content type="html"><![CDATA[<p>许久没学习 Android 开发，这次打算学习用 Flutter 创建应用，光是准备环境就挖了好多坑。</p><a id="more"></a><h2 id="Flutter-安装"><a href="#Flutter-安装" class="headerlink" title="Flutter 安装"></a>Flutter 安装</h2><p>从下面的地址选择最新的稳定版进行下载：</p><p><a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=macos#macos" target="_blank" rel="external nofollow noopener noreferrer">Flutter SDK releases Download</a></p><p>解压缩之后放在自己指定的文件夹下</p><p>编辑 <code>.bash_profile</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure><p>我本机的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin</span><br><span class="line">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter-io.cn</span><br><span class="line">export ANDROID_HOME&#x3D;&#x2F;Users&#x2F;songying&#x2F;android-sdk-macosx</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;tools</span><br><span class="line">export PATH&#x3D;$PATH:$ANDROID_HOME&#x2F;platform-tools</span><br><span class="line">export PATH&#x3D;&#x2F;Users&#x2F;songying&#x2F;flutter&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure><p>运行下面的命令让环境变量生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><p>之后运行下面的命令检查 flutter 有没有生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><p>这个之前已经安装好了，重新打开只要更新升级就可以了。关于 Android SDK 也是之前安装好的，这里只做了常规升级。</p><p>然后顺理成章使用 Android Studio 新建一个 Flutter 项目，结果失败了，报错内容大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pub.flutter-io.cn%0D is not a valid link-local address but contains %. Scope id should be used as part of link-local address. (at character 18)</span><br><span class="line">pub.flutter-io.cn%0D                                                    </span><br><span class="line">                 ^                                                      </span><br><span class="line">package:pub&#x2F;src&#x2F;source&#x2F;hosted.dart 437:7           BoundHostedSource._throwFriendlyError</span><br><span class="line">package:pub&#x2F;src&#x2F;source&#x2F;hosted.dart 188:7           BoundHostedSource._fetchVersions</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; asynchronous gap &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;                      </span><br><span class="line">dart:async                                         _CustomZone.runUnary </span><br><span class="line">package:pub&#x2F;src&#x2F;rate_limited_scheduler.dart 82:30  RateLimitedScheduler._processNextTask.runJob</span><br><span class="line">package:pub&#x2F;src&#x2F;rate_limited_scheduler.dart 85:30  RateLimitedScheduler._processNextTask</span><br><span class="line">dart:async                                         new Future.sync      </span><br><span class="line">package:pool&#x2F;pool.dart 126:18                      Pool.withResource.&lt;fn&gt;</span><br><span class="line">This is an unexpected error. Please run                                 </span><br><span class="line">                                                                        </span><br><span class="line">    pub --trace &#39;--verbosity&#x3D;warning&#39; get --no-precompile               </span><br><span class="line">                                                                        </span><br><span class="line">and include the logs in an issue on https:&#x2F;&#x2F;github.com&#x2F;dart-lang&#x2F;pub&#x2F;issues&#x2F;new</span><br></pre></td></tr></table></figure><p>去他们的 issues 下面看到有不少人也是这个问题，而且还没解决。于是我又尝试安装了旧版本的 Flutter，依旧没有解决问题。关于 <code>pub.flutter-io.cn%0D</code> 这个是环境变量里配置的东西，配置的时候并没有后面的 <code>%0D</code> 尝试修改过也没有解决问题，期间尝试各种重启都不行。</p><h2 id="折衷解决"><a href="#折衷解决" class="headerlink" title="折衷解决"></a>折衷解决</h2><p>本来打算放弃折腾，等之后更新版本了再搞，后来看到可以使用命令行创建，于是打开系统自带终端输入命令进行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create 项目名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flutter clean</span><br><span class="line">flutter run</span><br></pre></td></tr></table></figure><p>在 <code>flutter run</code> 这个步骤又遇到错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Running Gradle task &#39;assembleDebug&#39;...                                  </span><br><span class="line">                                                                </span><br><span class="line">FAILURE: Build failed with an exception.                                                                                                                          * What went wrong:                                                               Could not determine the dependencies of task &#39;:app:compileDebugJavaWithJavac&#39;.   &gt; Could not resolve all task dependencies for configuration &#39;:app:debugCompileClasspath&#39;.                          </span><br><span class="line">   &gt; Could not resolve io.flutter:arm64_v8a_debug:1.0.0-ee76268252c22f5c11e82a7b87423ca3982e51a7.                  </span><br><span class="line">     Required by:                                                                         project :app                                                                  &gt; Skipped due to earlier error                                                   &gt; Skipped due to earlier error                                                   &gt; Skipped due to earlier error                                                &gt; Could not resolve io.flutter:x86_debug:1.0.0-ee76268252c22f5c11e82a7b87423ca3982e51a7.                        </span><br><span class="line">     Required by:                                                                         project :app                                                                  &gt; Skipped due to earlier error                                                   &gt; Skipped due to earlier error                                                   &gt; Skipped due to earlier error                                                &gt; Could not resolve io.flutter:x86_64_debug:1.0.0-ee76268252c22f5c11e82a7b87423ca3982e51a7.                     </span><br><span class="line">     Required by:                                                                         project :app                                                                  &gt; Skipped due to earlier error                                                   &gt; Skipped due to earlier error                                                   &gt; Skipped due to earlier error                                                                                                                              * Try:                                                                           Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.</span><br><span class="line">                                                                                 * Get more help at https:&#x2F;&#x2F;help.gradle.org                                                                                                                        BUILD FAILED in 2m 9s</span><br></pre></td></tr></table></figure><p>网上查了一下，说是 gradle 配置问题，将下面几个文件中</p><ul><li>项目路径/android/build.gradle</li><li>flutter路径/packages/flutter_tools/gradle/aar_init_script.gradle</li><li>flutter路径/packages/flutter_tools/gradle/flutter.gradle</li><li>flutter路径/packages/flutter_tools/gradle/resolve_dependencies.gradle</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">google()</span><br><span class="line">jcenter()</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; google()</span><br><span class="line">&#x2F;&#x2F; jcenter()</span><br><span class="line">maven &#123; url &#39;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;google&#39; &#125;</span><br><span class="line">maven &#123; url &#39;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;jcenter&#39; &#125;</span><br><span class="line">maven &#123; url &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#39; &#125;</span><br></pre></td></tr></table></figure><p>再将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;storage.googleapis.com&#x2F;download.flutter.io</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;download.flutter.io</span><br></pre></td></tr></table></figure><p>在命令行运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flutter clean</span><br><span class="line">flutter run</span><br></pre></td></tr></table></figure><p>手机上终于显示出项目内容了</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本文记录当时遇到问题的状态和尝试的解决办法，也许之后没有这些问题了，也许会有其他问题，方法很重要，算是积累挖坑经验吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;许久没学习 Android 开发，这次打算学习用 Flutter 创建应用，光是准备环境就挖了好多坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Flutter" scheme="https://mojipanda.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>归零</title>
    <link href="https://mojipanda.com/blog/e46d/"/>
    <id>https://mojipanda.com/blog/e46d/</id>
    <published>2020-06-20T12:18:07.000Z</published>
    <updated>2020-06-20T13:18:00.916Z</updated>
    
    <content type="html"><![CDATA[<p>2020 还能重启吗？当然是不能了，这都已经过去快一半了，只能接着往前走。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/e46d/01.jpg" alt></p><a id="more"></a><p>一场疫情改变了无数人的生活轨迹。范围影响扩散到全球，每个人的生活都发生着不同程度的变化。我也不例外。</p><p>疫情让我深刻体会到家人的重要，过去一年因为工作，几乎没有时间陪伴老婆孩子，全靠妈妈帮忙带着，然而工资到手也不见有多少，感觉这个人生很不值当。拼死拼活的上班是为了啥，整个人都很累。感谢老婆的理解和支持，给我任性裸辞的机会，休息了一段时间，精力恢复好些了，但还是要想办法有收入啊，一家子要养活啊。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/e46d/02.jpg" alt></p><p>想了很久，还是没有想到自主创业可以干什么，休息的这段时间学习倒是没落下，这样也不是个办法，时间拖的越长越焦虑。</p><p>各种理财的利率降了很多，还有房贷要还，哎，成年人的压力啊。后来把手头上仅剩的钱先全部提前还一部分贷款了，毕竟跑不赢贷款的利率，留手上只会贬值的更厉害。微信，支付宝，各银行卡余额仅保留了下个月账单要换的金额，就这样全部归零了。</p><p>现在上班了，一切从头开始，想给家人好的生活环境，想多点时间陪伴家人，想要挣钱，路要继续往前走，人生也就是这样过了，既然人生只有一次机会，那就走自己想走的路，我的人生我做主。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/e46d/03.jpg" alt></p><p>时光易逝，加油吧！迈向美好的明天！</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/e46d/04.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020 还能重启吗？当然是不能了，这都已经过去快一半了，只能接着往前走。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/loading.svg&quot; data-original=&quot;https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/e46d/01.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情物语" scheme="https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>在线生成卡通头像</title>
    <link href="https://mojipanda.com/blog/5346/"/>
    <id>https://mojipanda.com/blog/5346/</id>
    <published>2020-06-18T13:37:42.000Z</published>
    <updated>2020-06-18T14:38:28.115Z</updated>
    
    <content type="html"><![CDATA[<p>收藏在线生成卡通头像的网站</p><ul><li><a href="https://make.girls.moe" target="_blank" rel="external nofollow noopener noreferrer">二次元萌妹子头像在线生成</a></li><li><a href="http://getavataaars.com" target="_blank" rel="external nofollow noopener noreferrer">卡通头像在线生成</a></li></ul><div class="gallery"><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/5346/01.png" alt><br><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/5346/02-1.png" alt></p></div><a id="more"></a><hr><p><a href="https://make.girls.moe" target="_blank" rel="external nofollow noopener noreferrer">二次元萌妹子头像在线生成</a></p><p>通过选择发色、发型、眼睛、皮肤、微笑、风格等特征生成二次元图片。生成出来的全是二次元萌妹子角色。<br><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/5346/03.png" alt></p><hr><p><a href="http://getavataaars.com" target="_blank" rel="external nofollow noopener noreferrer">卡通头像在线生成</a></p><p>通过选择发型、发色、眼睛、衣服、嘴形、肤色等特征生成卡通头像。生成的头像是中规中矩的卡通形象。<br><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/5346/04.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收藏在线生成卡通头像的网站&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://make.girls.moe&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;二次元萌妹子头像在线生成&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://getavataaars.com&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;卡通头像在线生成&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;gallery&quot;&gt;&lt;p&gt;&lt;img src=&quot;/img/loading.svg&quot; data-original=&quot;https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/5346/01.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/img/loading.svg&quot; data-original=&quot;https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/5346/02-1.png&quot; alt&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="趣味收藏" scheme="https://mojipanda.com/categories/%E8%B6%A3%E5%91%B3%E6%94%B6%E8%97%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring典型注解简介</title>
    <link href="https://mojipanda.com/blog/ed68/"/>
    <id>https://mojipanda.com/blog/ed68/</id>
    <published>2020-06-17T13:10:42.000Z</published>
    <updated>2020-06-17T13:51:57.864Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring 典型注解 @Controller @Component @Service @Repository 的异同。</p><a id="more"></a><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>@Controller @Component @Service @Repository 这四个注解都可以说成是 Component 级别的注解。被这些注解修饰的类都会被 Spring 扫描到并注入到 Spring 容器中进行管理。</p><h2 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h2><table><thead><tr><th>注解</th><th>含义</th></tr></thead><tbody><tr><td>@Controller</td><td>作用于表现层 (spring-mvc)</td></tr><tr><td>@Service</td><td>作用于业务逻辑层</td></tr><tr><td>@Repository</td><td>作用于数据库访问持久层</td></tr><tr><td>@Component</td><td>基础注解，可以被注入到spring容器进行管理</td></tr></tbody></table><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p>标记这个类是一个 SpringMVC Controller 对象，用于暴露给前端的入口，对前端请求进行处理，转发，重定向等。通常在这里调用 Service 层的方法。</p><h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><p>标记这个类属于业务逻辑层。通常在这里调用数据库操作。</p><h3 id="Reposotory"><a href="#Reposotory" class="headerlink" title="@Reposotory"></a>@Reposotory</h3><p>标记这个类是用来直接访问数据库的持久层。这个类作为DAO对象（数据访问对象，Data Access Objects）可以直接对数据库进行操作。</p><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>通用注解，用来表示一个平常的普通组件，当一个类不合适用以上的注解定义时用这个组件修饰。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用这些注解对应用进行分层之后，就可以将请求处理，业务逻辑处理，数据库操作处理分离出来，为代码解耦，方便以后项目的维护和开发。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring 典型注解 @Controller @Component @Service @Repository 的异同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring" scheme="https://mojipanda.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>今日暴雨，水漫金陵</title>
    <link href="https://mojipanda.com/blog/9821/"/>
    <id>https://mojipanda.com/blog/9821/</id>
    <published>2020-06-15T13:10:08.000Z</published>
    <updated>2020-06-15T13:19:47.901Z</updated>
    
    <content type="html"><![CDATA[<p>梅雨季节的暴雨，瞬间切换看海模式～</p><a id="more"></a><p>夜里就开始下暴雨了，早上被几个大震雷给惊到了，看了看娃，嗯，还好，他没被吓到～</p><p>想着今天周一要早点出门，暴雨又不方便骑车，等了半天，没车，索性走到了站台，上车，然后就开启了暴堵的节奏～</p><p>哼哧哼哧的速度，实在等不了了，堵车的车队已经排了好几公里，看看雨已经小了，果断下车，走了一段路，发现了小单车，这个时候的小单车感觉是个救星，麻利的骑上了小单车前行～</p><p>一路上，看着长龙的车，今天确实堵的夸张～</p><p>骑了一段路，突然发现，路被大水淹了，看着水中的人群，估计有半米高，总要出发的，骑着车踏进水中，很快，车轱辘全没在了水中～略忐忑，好在看着旁边也有人群走在水中，略略心安，继续摸索前行～</p><p>安全度过了水淹没的路段，着实放下一颗忐忑不安的心～路上的车依然排成长龙，每天交通拥堵似乎是个必然的事情～也再次证明了绿色出行的必要性～只是，人太多，确实有时实施起来有难度～</p><p>北京又出现了疫情风险点，温岭油罐车爆炸，暴雨希望只是短暂的，希望一切可以好一点～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;梅雨季节的暴雨，瞬间切换看海模式～&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情物语" scheme="https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"/>
    
    
      <category term="心情" scheme="https://mojipanda.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>代码自动生成山水画</title>
    <link href="https://mojipanda.com/blog/19b4/"/>
    <id>https://mojipanda.com/blog/19b4/</id>
    <published>2020-06-14T09:42:17.000Z</published>
    <updated>2020-06-14T10:44:31.835Z</updated>
    
    <content type="html"><![CDATA[<p>分享一个代码自动生成山水画的网站 <a href="https://lingdong-.github.io/shan-shui-inf/" target="_blank" rel="external nofollow noopener noreferrer">shan-shui-inf</a></p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/19b4/01.jpg" alt></p><a id="more"></a><p>这是一个 js 实现的自动生成中国山水画的网站，每次刷新都可以自动绘制新的山水画。绘制的结果可以导出 svg 格式图片。随便生成一个都很有山水意境。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/19b4/02.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享一个代码自动生成山水画的网站 &lt;a href=&quot;https://lingdong-.github.io/shan-shui-inf/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;shan-shui-inf&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/loading.svg&quot; data-original=&quot;https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/19b4/01.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="趣味收藏" scheme="https://mojipanda.com/categories/%E8%B6%A3%E5%91%B3%E6%94%B6%E8%97%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>栀子花开的香气</title>
    <link href="https://mojipanda.com/blog/bebe/"/>
    <id>https://mojipanda.com/blog/bebe/</id>
    <published>2020-06-13T02:51:36.000Z</published>
    <updated>2020-06-13T02:53:50.103Z</updated>
    
    <content type="html"><![CDATA[<p>最近学院在做绿化改造工程，每天陪伴我们的除了日常工作，还有机械的轰鸣声，以及来来往往的民工们繁忙的身影～</p><a id="more"></a><p>每天吃完午饭回办公室的路上，总会看到零零散散的民工们躺在地上休息，或是铺个板子，或是铺个蛇皮袋，或是直接躺在水泥地面上，并不知道是不是睡着了，但是，周边的环境似乎一点都不会影响到他们休息，许是太累了吧～</p><p>突然想到前两天看到的一句话“如果每天都能赚到300块，我就带我姑父去坐一次高铁”，话是出自一个普通打工人，很朴素的一个小愿望，但他是作为自己奋斗的一个小目标的，一方面是自己坚持奋斗的希望，一方面又是持着一颗感恩的心～生活本是酸甜苦辣五味杂陈，可能会有很多小确幸，但也会有诸多的小困难，保持乐观的心态，保持感恩的心情，生活还是很美好的～</p><p>“小英夫妻”的“有活干，有舞跳，生活还是很美好”，还原了他们自己的生活，纵然他们的舞蹈比不得专业人士的舞姿，但这属于他们自己的生活艺术，带着积极向上的生活态度，丰富生活，幸福前行；有时候你改变不了一些客观条件，但是你可以改变自己生活的方式，以及生活的态度～</p><p>钢筋水泥的高楼，结合着格子挡板，似乎生活已经完全被一种生硬冰冷的气息包裹着，或许这也是城市里的夜生活比较丰富的原因，夜晚的灯光都会显得钢筋水泥中的城市暖暖的～</p><p>我们会羡慕李子柒那种云淡风轻，融入自然的洒脱生活，似乎是不理世俗，活在最自我的环境当中，很幸福，可是我们忘了，“采菊东篱下，悠然见南山”的生活，只能局限于喜欢，生活的继续，社会的发展，没有钢筋水泥中的奋斗，都会显得空白，顶多说，奋斗了，可以抽个空，去体验一下那种洒脱的生活环境～李子柒的生活是很美好的，但是她并没有脱离世俗，只是用了另一种生活方式去奋斗，获取洒脱生活所需的物质基础～</p><p>所以，云淡风轻的生活，我们可以很喜欢，也可以去体验，但是做不到纯粹的云淡风轻；或许有时候是真的很辛苦，或许有时候是真的觉得累，但是生活继续，一切都是发展过程中，累了可以短期休息，但不能停止～既然如此，那么就以一颗感恩的心，一种积极的生活态度，加油前行～</p><p>闻到了栀子花开的香气，嗯，真的很香～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学院在做绿化改造工程，每天陪伴我们的除了日常工作，还有机械的轰鸣声，以及来来往往的民工们繁忙的身影～&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情物语" scheme="https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"/>
    
    
      <category term="心情" scheme="https://mojipanda.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Cron表达式详解</title>
    <link href="https://mojipanda.com/blog/de33/"/>
    <id>https://mojipanda.com/blog/de33/</id>
    <published>2020-06-11T12:14:54.000Z</published>
    <updated>2020-06-11T13:37:38.273Z</updated>
    
    <content type="html"><![CDATA[<p>任务调度经常会用到 cron 表达式来调度作业任务，本文记录 cron 的写法以及常用的表达式。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Cron 表达式是一个由 5 或 6 个空格隔开而分为 6 或 7 个域的字符串。每个域对应各自含义，语法格式有如下两种：</p><ul><li><code>Seconds</code> <code>Minutes</code> <code>Hours</code> <code>DayofMonth</code> <code>Month</code> <code>DayofWeek</code> <code>Year</code></li><li><code>Seconds</code> <code>Minutes</code> <code>Hours</code> <code>DayofMonth</code> <code>Month</code> <code>DayofWeek</code></li></ul><h2 id="字段含义"><a href="#字段含义" class="headerlink" title="字段含义"></a>字段含义</h2><table><thead><tr><th>字段</th><th>允许的特殊字符</th><th>允许值</th></tr></thead><tbody><tr><td>秒 (Seconds)</td><td>, - * /</td><td>0 - 59 整数</td></tr><tr><td>分 (Minutes)</td><td>, - * /</td><td>0 - 59 整数</td></tr><tr><td>小时 (Hours)</td><td>, - * /</td><td>0 - 23 整数</td></tr><tr><td>日期 (DayofMonth)</td><td>, - * / ? L W</td><td>1 - 31 整数</td></tr><tr><td>月份 (Month)</td><td>, - * /</td><td>1 - 12 整数 或 JAN - DEC</td></tr><tr><td>星期 (DayofWeek)</td><td>, - * / ? L #</td><td>1 - 7 整数 或 SUN - SAT</td></tr><tr><td>年 (Year) (可选留空)</td><td>, - * /</td><td>1970 - 2099</td></tr></tbody></table><h2 id="特殊字符含义"><a href="#特殊字符含义" class="headerlink" title="特殊字符含义"></a>特殊字符含义</h2><table><thead><tr><th>字符</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>*</td><td>表示匹配任意值</td><td>在分钟域使用 * 表示每分钟都会触发事件</td></tr><tr><td>?</td><td>只在日期和星期域使用表示非明确值</td><td>月份中的日期和星期中的日期这两个元素在一起互斥时应该通过设置一个问号来表明不想设置那个字段</td></tr><tr><td>-</td><td>表示范围</td><td>在小时域使用 3-5 表示 3点、4点、5点会触发事件</td></tr><tr><td>/</td><td>表示起始时间开始触发，之后每隔固定时间触发一次</td><td>在秒域使用 5/20 表示 5秒、25秒、45秒会触发事件</td></tr><tr><td>,</td><td>表示列出枚举值</td><td>在星期域使用 2,4,6 表示星期一、星期三、星期五会触发事件</td></tr><tr><td>L</td><td>只在日期和星期域使用表示最后</td><td>在星期域使用 5L 表示每月最后一个星期四会触发事件</td></tr><tr><td>W</td><td>只在日期域使用表示指定日期的最近工作日</td><td>在日期域使用 15W 表示如果15号是周六则14号触发，如果15号是周日则16号触发，不能跨月，也不能指定区间范围</td></tr><tr><td>LW</td><td>表示指定月最后一周的工作日</td><td>指定月最后一个星期五</td></tr><tr><td>#</td><td>只在星期域使用表示指定月第几周的星期几</td><td>在星期域使用 6#3 表示指定月第3周的星期五会触发事件</td></tr></tbody></table><h2 id="常用表达式"><a href="#常用表达式" class="headerlink" title="常用表达式"></a>常用表达式</h2><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>0/2 * * * * ?</td><td>表示每2秒执行</td></tr><tr><td>0 0/2 * * * ?</td><td>表示每2分钟执行</td></tr><tr><td>0 0 2 1 * ?</td><td>表示在每月的1日的凌晨2点执行</td></tr><tr><td>0 15 10 ? * MON-FRI</td><td>表示周一到周五每天上午10:15执行</td></tr><tr><td>0 15 10 ? 6L 2002-2006</td><td>表示2002-2006年的每个月的最后一个星期五上午10:15执行</td></tr><tr><td>0 0 10,14,16 * * ?</td><td>每天10点，14点，16点执行</td></tr><tr><td>0 0/30 9-17 * * ?</td><td>朝九晚五工作时间内每半小时执行</td></tr><tr><td>0 0 12 ? * WED</td><td>表示每个星期三中午12点执行</td></tr><tr><td>0 0 12 * * ?</td><td>每天中午12点执行</td></tr><tr><td>0 15 10 ? * *</td><td>每天上午10:15执行</td></tr><tr><td>0 15 10 * * ? 2005</td><td>2005年的每天上午10:15执行</td></tr><tr><td>0 * 14 * * ?</td><td>在每天下午2点到下午2:59期间的每1分钟执行</td></tr><tr><td>0 0/5 14 * * ?</td><td>在每天下午2点到下午2:55期间的每5分钟执行</td></tr><tr><td>0 0/5 14,18 * * ?</td><td>在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟执行</td></tr><tr><td>0 0-5 14 * * ?</td><td>在每天下午2点到下午2:05期间的每1分钟执行</td></tr><tr><td>0 10,44 14 ? 3 WED</td><td>每年三月的星期三的下午2:10和2:44执行</td></tr><tr><td>0 15 10 ? * MON-FRI</td><td>周一至周五的上午10:15执行</td></tr><tr><td>0 15 10 15 * ?</td><td>每月15日上午10:15执行</td></tr><tr><td>0 15 10 L * ?</td><td>每月最后一日的上午10:15执行</td></tr><tr><td>0 15 10 ? * 6L</td><td>每月的最后一个星期五上午10:15执行</td></tr><tr><td>0 15 10 ? * 6#3</td><td>每月的第三个星期五上午10:15执行</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任务调度经常会用到 cron 表达式来调度作业任务，本文记录 cron 的写法以及常用的表达式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Java-关于Lombok插件的记录</title>
    <link href="https://mojipanda.com/blog/ad2d/"/>
    <id>https://mojipanda.com/blog/ad2d/</id>
    <published>2020-06-10T12:23:08.000Z</published>
    <updated>2020-06-10T13:27:53.351Z</updated>
    
    <content type="html"><![CDATA[<p>遇到一个项目中使用了Lombok插件，这里记录一下如何使用以及自己的几点看法。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近遇到一个项目，打算把项目跑起来看一下效果，结果导入项目到IDE中就一片红叉，报错的地方几乎都是使用 get set 的地方，打开类文件确实没有 get set 方法，只有成员属性。于是搜索了一下什么情况下可以去掉 get set。最终揪出了 lombok 这个东西。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>以我使用 eclipse 举例，其他 IDE 在官网有介绍使用步骤。</p><ol><li><p>在下面的链接下载 <code>lombok.jar</code></p><div class="note link"><p><a href="https://projectlombok.org/download" target="_blank" rel="external nofollow noopener noreferrer">lombok.jar 下载</a></p></div></li><li><p>将下载好的 <code>lombok.jar</code> 复制到 eclipse.ini 所在文件目录，找一下 eclipse 安装目录，很容易找到。</p></li><li><p>编辑 <code>eclipse.ini</code>，在最后添加以下代码并保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:lombok.jar</span><br></pre></td></tr></table></figure></li><li><p>重启 eclipse 后 clean 一下项目解决</p></li></ol><h2 id="关于使用"><a href="#关于使用" class="headerlink" title="关于使用"></a>关于使用</h2><p>lombok 主要是用注解的方式达到精简代码的目的。首先使用 maven 导入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.18.12&lt;&#x2F;version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>之后就可以使用 <code>@Data</code> 注解，相当于同时使用了 <code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@Getter</code>、<code>@Setter</code> 和 <code>@RequiredArgsConstrutor</code> 这些注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几点看法"><a href="#几点看法" class="headerlink" title="几点看法"></a>几点看法</h2><p>这种方式确实省了不少代码，但是有利有弊。这个必须要 IDE 支持，所有开发人员都要安装这个插件，毕竟不安装的都会报错。究竟用不用，使用规模，还是视情况而定吧，不要过度依赖。参考资料里关于lombok的使用看法还是比较中肯的，我也比较认同。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到一个项目中使用了Lombok插件，这里记录一下如何使用以及自己的几点看法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://mojipanda.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mac上安装brew</title>
    <link href="https://mojipanda.com/blog/8d6d/"/>
    <id>https://mojipanda.com/blog/8d6d/</id>
    <published>2020-06-09T13:55:44.000Z</published>
    <updated>2020-06-09T14:19:57.463Z</updated>
    
    <content type="html"><![CDATA[<p>介绍如何在 Mac 上安装 brew</p><a id="more"></a><p>brew 作为 Mac 平台下一个包管理工具。可以一条命令在 Mac 上安装、卸载和更新各种软件包。</p><h2 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h2><p>直接运行下面的命令就可以安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>但是如果执行这条命令报错，说是无法连接 <code>https://raw.githubusercontent.com/</code> 之类的</p><p>这个时候可以在浏览器中访问链接</p><p><a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="external nofollow noopener noreferrer">https://raw.githubusercontent.com/Homebrew/install/master/install</a></p><p>内容如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby</span></span><br><span class="line"></span><br><span class="line">STDERR.print &lt;&lt;EOS</span><br><span class="line"><span class="symbol">Warning:</span> The Ruby Homebrew installer is now deprecated <span class="keyword">and</span> has been rewritten <span class="keyword">in</span></span><br><span class="line">Bash. Please migrate to the following <span class="symbol">command:</span></span><br><span class="line">  /bin/bash -c <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</span></span><br><span class="line"></span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line">Kernel.exec <span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"'</span></span><br></pre></td></tr></table></figure><p>意思是直接执行下面的语句，但是我们遇到的问题是无法连接 <code>https://raw.githubusercontent.com/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>那么我们继续访问这里的链接</p><p><a href="https://raw.githubusercontent.com/Homebrew/install/master/install.sh" target="_blank" rel="external nofollow noopener noreferrer">https://raw.githubusercontent.com/Homebrew/install/master/install.sh</a></p><p>内容有点长，这里就不粘贴了，浏览器访问可以看到。将页面文本复制到 <code>brew_install.sh</code> 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">touch brew_install.sh</span><br><span class="line">chmod 777 brew_install.sh</span><br></pre></td></tr></table></figure><p>然后执行这个脚本文件就可以正常安装了。过程可能有点慢，耐心等一等，如果长时间卡住不动也可以先强制退出再次执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c brew_install.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍如何在 Mac 上安装 brew&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Mac" scheme="https://mojipanda.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Java-Mac系统配置JDK环境变量</title>
    <link href="https://mojipanda.com/blog/47db/"/>
    <id>https://mojipanda.com/blog/47db/</id>
    <published>2020-06-08T14:06:34.000Z</published>
    <updated>2020-06-08T14:28:28.994Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下在 Mac 系统配置 JDK 环境变量。</p><a id="more"></a><ol><li>首先从官网中下载需要的版本安装包，并按照提示进行安装。</li></ol><div class="note link"><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="external nofollow noopener noreferrer">Java SE Downloads</a></p></div><ol start="2"><li>运行下面的命令查看 Java 安装路径。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home</span><br></pre></td></tr></table></figure><p>比如结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_40.jdk&#x2F;Contents&#x2F;Home</span><br></pre></td></tr></table></figure><ol start="3"><li>如果是第一次配置环境变量，可以创建一个 <code>.bash_profile</code> 文件，如果之前已经创建过则直接到下面一步。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure><ol start="4"><li>执行下面的命令会打开编辑窗口</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure><ol start="5"><li>粘贴以下配置到窗口中，其中 JAVA_HOME 的配置路径从步骤2获得，不同版本号路径不一样。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_40.jdk&#x2F;Contents&#x2F;Home</span><br><span class="line"></span><br><span class="line">PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH:.</span><br><span class="line"></span><br><span class="line">CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:.</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">export CLASSPATH</span><br></pre></td></tr></table></figure><ol start="6"><li>执行下面的命令使配置生效。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><ol start="7"><li>输入下面的命令检查一下配置的路径是否正确。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure><ol start="8"><li>最后通过查看 java 版本来检验配置是否生效。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>运行结果应该会给出类似下面的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_40&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_40-b27)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下在 Mac 系统配置 JDK 环境变量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://mojipanda.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Shell-获取命令行参数</title>
    <link href="https://mojipanda.com/blog/3d67/"/>
    <id>https://mojipanda.com/blog/3d67/</id>
    <published>2020-06-06T11:12:33.000Z</published>
    <updated>2020-06-06T11:38:54.370Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下使用 Shell 写脚本如何获取命令行参数。</p><a id="more"></a><h2 id="直接获取"><a href="#直接获取" class="headerlink" title="直接获取"></a>直接获取</h2><p>比如直接写个脚本文件 <code>script.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">echo "第一个参数为：$1";</span><br><span class="line">echo "第二个参数为：$2";</span><br><span class="line">echo "第三个参数为：$3";</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash script.sh a b c</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一个参数为：a</span><br><span class="line">第二个参数为：b</span><br><span class="line">第三个参数为：c</span><br></pre></td></tr></table></figure><h2 id="使用getopts"><a href="#使用getopts" class="headerlink" title="使用getopts"></a>使用getopts</h2><p>比如直接写个脚本文件 <code>script.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">while getopts 'a:b:c:' opt; do</span><br><span class="line">    case $opt in</span><br><span class="line">        a)</span><br><span class="line">            echo $OPTARG</span><br><span class="line">            ;;</span><br><span class="line">        b)</span><br><span class="line">            echo $OPTARG</span><br><span class="line">            ;;</span><br><span class="line">        c)</span><br><span class="line">            echo $OPTARG</span><br><span class="line">            ;;</span><br><span class="line">        ?)</span><br><span class="line">            echo "Unknow option"</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash script.sh -a 1 -b 2 -c 3</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>直接获取参数的方式需要注意参数顺序。getopts 方式不必关注参数顺序，同时可以将参数赋值以便后续处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一下使用 Shell 写脚本如何获取命令行参数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Shell" scheme="https://mojipanda.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-获取命令行参数</title>
    <link href="https://mojipanda.com/blog/12e9/"/>
    <id>https://mojipanda.com/blog/12e9/</id>
    <published>2020-06-06T10:27:35.000Z</published>
    <updated>2020-06-06T10:56:45.284Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下使用 Nodejs 写脚本如何获取命令行参数。</p><a id="more"></a><h2 id="直接获取"><a href="#直接获取" class="headerlink" title="直接获取"></a>直接获取</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> argv = process.argv.slice(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>比如写个脚本 <code>script.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> argv = process.argv.slice(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'传递的参数为：'</span>, argv);</span><br></pre></td></tr></table></figure><p>执行脚本并传入参数 a b c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node script.js a b c</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传递的参数为： [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]</span><br></pre></td></tr></table></figure><h2 id="使用第三方模块commander"><a href="#使用第三方模块commander" class="headerlink" title="使用第三方模块commander"></a>使用第三方模块commander</h2><p>首先安装 <code>commander</code> 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commander --save</span><br></pre></td></tr></table></figure><p>写个脚本 <code>script.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; program &#125; = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line">program</span><br><span class="line">    .version(<span class="string">'0.0.1'</span>)</span><br><span class="line">    .option(<span class="string">'-d, --debug'</span>, <span class="string">'output extra debugging'</span>)</span><br><span class="line">    .option(<span class="string">'-s, --small'</span>, <span class="string">'small pizza size'</span>)</span><br><span class="line">    .option(<span class="string">'-p, --pizza-type &lt;type&gt;'</span>, <span class="string">'flavour of pizza'</span>);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br><span class="line"><span class="built_in">console</span>.log(program.opts());</span><br><span class="line"><span class="keyword">if</span> (program.debug) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'debugging'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node script.js -d</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  version: &#39;0.0.1&#39;,</span><br><span class="line">  debug: true,</span><br><span class="line">  small: undefined,</span><br><span class="line">  pizzaType: undefined</span><br><span class="line">&#125;</span><br><span class="line">debugging</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node script.js -d -s -p abc</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; version: &#39;0.0.1&#39;, debug: true, small: true, pizzaType: &#39;abc&#39; &#125;</span><br><span class="line">debugging</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>使用直接获取的方式需要注意参数顺序。而使用第三方模块则不必关心参数顺序问题，可以更好的设计脚本参数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一下使用 Nodejs 写脚本如何获取命令行参数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-博客文章进行加密</title>
    <link href="https://mojipanda.com/blog/977/"/>
    <id>https://mojipanda.com/blog/977/</id>
    <published>2020-06-03T08:52:02.000Z</published>
    <updated>2020-06-03T11:56:05.652Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="哦吼，密码不对，请再试试。" data-whm="好像有点问题，但也能看看。">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">尝试输入一下密码查看全文：mojipanda</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5c30094ee8afcd75a797c85735548d29c9110a61d5016368d38a05a3a5d9b32a">046256ec03c6a25ef84cf62f91974a8be047f8d793a904b4048ea4afe8d1813fdcce463b53ce96da4dc940d97606889c32861de68ef572a80c4a7fdbf1ea573173eef718789aa2d4f202b12daf3bd6b0d92bfbb808fe07db4e728433b44d0caedd4d3fef8ae204f9dfca92ac45de069f154f650bfa94c508aec9cf1ae498e54f9b4462a6e458ad459203150dcee5711556fb36583432fcc51bf902e7be9807809d747b3cdca63e0455257b1676344eb9257ea4018d7df8e16b9085682d50c15972591289119bdd41ea797d9d8bd3e4dfd93c251b35062687eb8692f4152ec0243beb241b605e0251814cef89364f7fc1577d542de5c7a248ef1891c3ba3430ef02ff03da444c25440375f89e1830580e54201cf1ad2d0dc7534313c383f0b5eb5e067250a2f4086c832e319ca9e559964044cae10d0843a7a85ad1a769bc0ccca0f7e2d3bd5ffa6f1445d570518acb53219c5173c685efc5a88a4721e7eef511c7c891329bb0c1f09f6e45f905e22d55c01384d5d0dd6a580a925109d264d7a7533ebf8193ddb4a75ba39c1c4e5419d49d3f1f07b9936de7e28cb065b0e6c0bac9a425137ac900011e1c58801dbf9a26265ece14fd7de54e4c5876eceda77fc533fb9c0de8a60dc9b6330c8c83fc63810fb64956be312f4b00e205efc5b909506645233ae37d6861f48b488a7c7bae46da084dd5367e405c01d7f7d6287f7c3f196395757ae54d083d4d829d30ca3535b23a0c595fdc69e4f226b8616a93cf4b68b7320edb4385199674eed7708d1313a5546b2dcef2b3c2951684255f2b92568c8acb7a3ebeb3f6c9e083d8f04e7b62c087ad4e11cd2cf8af9991f38ae6a4a1b87eb0f45b2f4d59bdaf41614413ed3f7d7de5f43e3c4af6681f1646b928aab49579b8e57ba02ca0e0bde4f310d66cba870bb5dbfd176f58109d9ce418cc6bd68c9edea63ee05fee824ac9b16d90833585a793875e23224ab504a396555dd090dbf0637de21595ded7ca17b3e510aa231fdd9238332f74ee3a0729adc5243cd30ac8d48248932bb045202cace8457b038f8f805c8adefe023ab05f18c4dcf3d1198db0f9131370cfe8c95facc4a874973cb5ad0a3b2bc264ed8d4c9b0ad8d6584df11ffdeb209646f9fcdf4cdef653fea8c0ccd7e18e4f31a0d4e81fef5aabee018532a6476ff769dbdf7633d08d3db45b42497ebc6be75e2aa7b563a0a347eb97913773f4870faa1c4286fa7e0afdffd1de0cad1aa0214505735a5b3f651bc77dc0dd93eb1704a645206fca2d9efc512470d26924432bd1f17c94fe85dc62eb805ae19094ece7f3611bfe2d2fa1e095a8393325889e73130906987c132119b7ce6d72a66da229896dd43a3a8ae3669f93dc6c718e5e4d71a97ffada35a35490d3ec2509b581a296c47d42adef0d3ad359deb81daced83c7bfc88e221ec542aa6962174e394c17238d08c4646aa536ac9acd9746ebc81cc11a83f5dc3e2aeee6db71961bba99a5f25dec10d4a464508f02e33e63c835131b2094ee9990f00d621d157a0338c989e2544f703659ba65378df54627e6eb03da7a9b2adcabf3818b9d6c34a6ab539512987caa48dc9a21cb15644cbd7278c45d169e80b3e5a24e66a87520b78061005f90da2c212b17dfe057ca911cd3ddc80e101259eec42ecda032ab4f7d6cd0524f81deb035de181701177c7494a577cf72def7d988cac5ea1684768faae291f452275537cdb1bb67f4cac682618aeacb95c1543b3210561c886f4f2c8b00f01337a43db5fd2240d64fc8bffeb1f17762bd0a484065043e3d5aa43cd095bbc70391fa70624d57ea5e7dce9f62ec1331d2ed63d33591acabf5406aa83305217b5151642e09a1767c8e7870d981f374024bd80a44a64e5928fd4582a59067ee21027b3e9fad817ca033a0f647aa59c8973d033425f63b689ef8d6b3ffd6f8d63533883c182d854eccab322097136bf148f36d45fc9ec3d29be1d45e55b5d1a8bf7d32750cc6982324904bcc061bd34205ff33019b8d3a82de3b80e822da8c6233450cfc951dad0e4a8578bbdbfb6b0f48339feaf1f347f75982d03bddfce85018190fc22b797d750cc91a61f061b95b56da84f2822f185af65d19a94e1ab3503dd24346f708d000b30727d1249b1b5e01d8e8ff6d865b4cf889b813e077cd02ecc5a9a4e056d07060c5580e0ccddcaa5ce4b89f7c9391bdda239d3b800ba721e3a33cf983a42af08f159d07afc1b80b23bb9450d153af2174125bd866f5cd4c3a734537ccfb4ef4d9d6d8443f157e8d4cec1bf3f4b6cf8572298f1970555bfb11e86c11658106b6c9e788779d79928ff1c7707e61f241625fa03092d82ad44cef16797a20a5cf067ff9ea3f5b79a766e81f77504839c3cff8795cb9eaf25152969efb175dbed20e0984bc6f178ea37f7edbf874f8122ff6b8c08fa9e66385753352e4664515aa6b13e7d4cd73e999989df9ec3d5f2999347bbd1f522e4447cdb014314d013147fe5228c280467c3d7b4228cc03a8e68323eb601dd170aca45ed87963803c8730262a1c5c35952be97b9332770020e37ba9afc6599bf3e7939f412489a9ac2b54bc7247dd7d1af8cb4258207705e917f60aff6666cf5bd69df8195056d09ad7a03c709854ce528312c81e5475fba970e1ab69736c7c1d89ed5fa346fdc75268dba39676c72e9f4f928d6987d7bbe80eba30c45b415100ab95301e54bf27cf6318c23993da8562be629238d61edda6ad1ab2fa067af2dea9227d4b704a29a982910e2dd2541d9ace5d7e55dcdb08da11f234af33958e1b0add5479d63a2c9c7030456fe242cf8aa92778c3e1c466ff321f0de415010f2992eefe4828ed4d5f22ce83942c2c30958a01b572220629caf6878bcd9b855a86b62cd7ac8afb4b4d467141ffc91372761cf55d4565d434662cf2d012d4f7d127dcb5bab02904cdaadd9ea7543b9619cac2619fd27bd014e251696997a36a5a85fe73490ee7ca483c0ac4d9ce4a82660367d349f6cba466002b0981eebcdcfe759077ade7f5cf67e8ea65f788d627802b9ef38dd2cf6c2bae0436d2cdc0ad0120810411591402becec9bf9383d6f7fa86b31a3a41bf462d0e399edf9967cb6b4fa604276795396ce6e052fbd763b5112055f210d2e5caefaaf76d7acaf1e59df5d1095c22ee2e5c802c920c697af05c39ba269a66819e63613e7f41060531155ffe699fa084f1f12cecb0c97941f6f27b08ec248e41e8653570da8edefb80b2c54da6f74003b057c77c716bd6cfb1db5a4347cb60b998e7164bb4c3c7fefabf86ed0860b80a2f8edf1022cf4b965ce29e1a9659ca8206d9fc990cb83127a399fc0a5804c9c23927787562cf160533b469cfd4b106b1aeaee99a2ac80513798f048ad9056e93d752e8c3297f9e72ada984e016b9923835e2d2ce1eee74d513010da91db7c62756589423aa075403fd895cb29f9938a9f630342cfc606ac12651f99b80ff2c99fe1f616c909b936d7b0f1e96fa16a64eb249c6574bcb660cd563d52462f7ed2ff6f7be44eb2d2cab74ecb08aa99fd0230305a33be7069598ae6243be4526a074a687c74da13daf2edce9759af13b40064720ca8ea1582ba83dc41fb9c94ab6834f55f53c2115fdbb44</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      试一下文章加密，进来看效果～
    
    </summary>
    
    
      <category term="实用教程" scheme="https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://mojipanda.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-图片压缩库imagemin</title>
    <link href="https://mojipanda.com/blog/9de/"/>
    <id>https://mojipanda.com/blog/9de/</id>
    <published>2020-05-25T03:31:57.000Z</published>
    <updated>2020-05-25T04:02:51.631Z</updated>
    
    <content type="html"><![CDATA[<p>记录一个 <code>Nodejs</code> 的图片压缩库 - <code>imagemin</code></p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>imagemin</code> 本身不具备图片压缩能力，而是通过支持很多具有压缩不同类型图片的插件实现压缩。这个库只适合在服务端使用，可以写成脚本执行，也可以写成接口的形式给前端调用。</p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install imagemin --save</span><br></pre></td></tr></table></figure><p>常用插件列表</p><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-gifsicle" target="_blank" rel="external nofollow noopener noreferrer">Imagemin plugin for Gifsicle</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-svgo" target="_blank" rel="external nofollow noopener noreferrer">SVGO imagemin plugin</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-pngquant" target="_blank" rel="external nofollow noopener noreferrer">Imagemin plugin for pngquant</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-optipng" target="_blank" rel="external nofollow noopener noreferrer">Imagemin plugin for OptiPNG</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-webp" target="_blank" rel="external nofollow noopener noreferrer">WebP imagemin plugin</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-mozjpeg" target="_blank" rel="external nofollow noopener noreferrer">Imagemin plugin for mozjpeg</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-jpeg-recompress" target="_blank" rel="external nofollow noopener noreferrer">jpeg-recompress imagemin plugin</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-jpegtran" target="_blank" rel="external nofollow noopener noreferrer">jpegtran imagemin plugin</a></p></div><p>使用示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">'imagemin'</span>);</span><br><span class="line"><span class="keyword">const</span> imageminJpegtran = <span class="built_in">require</span>(<span class="string">'imagemin-jpegtran'</span>);</span><br><span class="line"><span class="keyword">const</span> imageminPngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</span><br><span class="line"> </span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> files = <span class="keyword">await</span> imagemin([<span class="string">'images/*.&#123;jpg,png&#125;'</span>], &#123;</span><br><span class="line">        destination: <span class="string">'build/images'</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            imageminJpegtran(),</span><br><span class="line">            imageminPngquant(&#123;</span><br><span class="line">                quality: [<span class="number">0.6</span>, <span class="number">0.8</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(files);</span><br><span class="line">    <span class="comment">//=&gt; [&#123;data: &lt;Buffer 89 50 4e …&gt;, destinationPath: 'build/images/foo.jpg'&#125;, …]</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这个工具支持处理多张图片，既可以将压缩后的文件输出到指定目录，也可以返回压缩后文件的数据。</p><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>在使用 <code>npm</code> 安装插件的时候，安装过程特别慢，且有很大几率出现安装不成功，且需要在自己电脑上编译的情况，编译这些文件又需要根据出错提示安装一些基础库。自从改为通过 <code>cnpm</code> 安装后，安装速度很快，且不需要再次编译的过程。这里强烈推荐使用 <code>cnpm</code> 安装。</p><p>对于压缩效果，那是非常明显且高效的，说的再多不如体验一下，大小减少了很多，而画质却看不出来太大差别，当然这个和设置也有关系，压缩比例太高了画质自然是不行的，使用推荐设置就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一个 &lt;code&gt;Nodejs&lt;/code&gt; 的图片压缩库 - &lt;code&gt;imagemin&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue-动态权限菜单设计</title>
    <link href="https://mojipanda.com/blog/8390/"/>
    <id>https://mojipanda.com/blog/8390/</id>
    <published>2020-05-23T09:02:39.000Z</published>
    <updated>2020-05-23T10:19:42.725Z</updated>
    
    <content type="html"><![CDATA[<p>在设计开发后台管理系统时，少不了会遇到不同用户角色拥有不同菜单访问权限的需求，本文介绍 Vue 的动态路由实现的动态权限菜单。</p><a id="more"></a><h2 id="主要实现"><a href="#主要实现" class="headerlink" title="主要实现"></a>主要实现</h2><p>在 <code>router/index.js</code> 先写下所有角色都共通的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: <span class="string">'/dashboard'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        normal: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/Login.vue'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的自定义代码是控制是否需要登录验证的，加上这个就不需要登录验证，目的是提供一些单页面的不需要登录的访问，在 <code>main.js</code> 里会用到判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meta: &#123;</span><br><span class="line">  normal: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在 <code>router/components.js</code> 里定义出所有的动态路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/Home.vue'</span>);</span><br><span class="line"><span class="keyword">const</span> Blank = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/menu/Blank.vue'</span>);</span><br><span class="line"><span class="keyword">const</span> Profile = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/menu/Profile.vue'</span>);</span><br><span class="line"><span class="keyword">const</span> UserList = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/menu/UserList.vue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    Home,</span><br><span class="line">    Blank,</span><br><span class="line">    Profile,</span><br><span class="line">    UserList,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.js</code> 完整代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</span><br><span class="line"><span class="keyword">import</span> consts <span class="keyword">from</span> <span class="string">'./consts'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> routemap <span class="keyword">from</span> <span class="string">'./router/components'</span></span><br><span class="line"><span class="keyword">const</span> genRoutes = <span class="function"><span class="keyword">function</span> (<span class="params">menus, routes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!routes) &#123;</span><br><span class="line">    routes = &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: routemap[<span class="string">'Home'</span>],</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">""</span>,</span><br><span class="line">          component: routemap[<span class="string">'Blank'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (menus.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    menus.forEach(<span class="function"><span class="params">menu</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (menu.component) &#123;</span><br><span class="line">        menu.component = routemap[menu.component];</span><br><span class="line">        routes.children.push(&#123;</span><br><span class="line">          path: menu.path,</span><br><span class="line">          component: menu.component,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (menu.children &amp;&amp; menu.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        genRoutes(menu.children, routes);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> routes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fromApi = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL = consts.Api.BASE_URL;</span><br><span class="line">Vue.use(VueAxios, axios)</span><br><span class="line">Vue.prototype.Global = consts</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.matched.some(<span class="function"><span class="params">data</span> =&gt;</span> data.meta.normal)) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (store.getters.isLogin &amp;&amp; fromApi) &#123;</span><br><span class="line">    fromApi = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> menus = [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'profile'</span>,</span><br><span class="line">        component: <span class="string">'Profile'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">if</span> (localStorage.getItem(<span class="string">"store"</span>)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> storeInfo = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"store"</span>));</span><br><span class="line">        <span class="keyword">let</span> menu = <span class="built_in">JSON</span>.parse(storeInfo.userInfo.menu);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; menu.length &amp;&amp; i &lt; consts.Menu.ALL.length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (menu[i] === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> info = &#123;</span><br><span class="line">              path: consts.Menu.ALL[i].url,</span><br><span class="line">              component: consts.Menu.ALL[i].component</span><br><span class="line">            &#125;</span><br><span class="line">            menus.push(info);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> routes = genRoutes(menus);</span><br><span class="line">    <span class="keyword">const</span> notfound = &#123;</span><br><span class="line">      path: <span class="string">"*"</span>,</span><br><span class="line">      redirect: <span class="string">'/'</span></span><br><span class="line">    &#125;</span><br><span class="line">    router.addRoutes([routes, notfound]);</span><br><span class="line">    router.push(&#123;</span><br><span class="line">      path: to.path</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!store.getters.isLogin) &#123;</span><br><span class="line">    next(&#123;</span><br><span class="line">      path: <span class="string">'/login'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>这里是在路由访问前的处理，可以看到 <code>data.meta.normal</code> 控制了是否需要登录。下面注释了一段获取菜单的部分。这里有三种思路：</p><ul><li>一是不同角色对应的菜单定义在前端，这里根据角色获取</li><li>二是这些动态权限定义在服务端，通过接口访问获取</li><li>三是前端定义出所有权限数组，服务端返回角色权限下标，结合获取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.matched.some(<span class="function"><span class="params">data</span> =&gt;</span> data.meta.normal)) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (store.getters.isLogin &amp;&amp; fromApi) &#123;</span><br><span class="line">    fromApi = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> menus = [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'profile'</span>,</span><br><span class="line">        component: <span class="string">'Profile'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取菜单</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> routes = genRoutes(menus);</span><br><span class="line">    <span class="keyword">const</span> notfound = &#123;</span><br><span class="line">      path: <span class="string">"*"</span>,</span><br><span class="line">      redirect: <span class="string">'/'</span></span><br><span class="line">    &#125;</span><br><span class="line">    router.addRoutes([routes, notfound]);</span><br><span class="line">    router.push(&#123;</span><br><span class="line">      path: to.path</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!store.getters.isLogin) &#123;</span><br><span class="line">    next(&#123;</span><br><span class="line">      path: <span class="string">'/login'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>服务端设计的菜单结构，比如前端定义好权限数组如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Menu = &#123;</span><br><span class="line">    ALL: [</span><br><span class="line">        &#123;</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            name: <span class="string">'用户管理'</span>,</span><br><span class="line">            url: <span class="string">'userlist'</span>,</span><br><span class="line">            component: <span class="string">'UserList'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id: <span class="number">2</span>,</span><br><span class="line">            name: <span class="string">'用户管理2'</span>,</span><br><span class="line">            url: <span class="string">'userlist2'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id: <span class="number">3</span>,</span><br><span class="line">            name: <span class="string">'用户管理3'</span>,</span><br><span class="line">            url: <span class="string">'#'</span>,</span><br><span class="line">            child: [</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">301</span>,</span><br><span class="line">                    name: <span class="string">'用户管理301'</span>,</span><br><span class="line">                    url: <span class="string">'userlist301'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">302</span>,</span><br><span class="line">                    name: <span class="string">'用户管理302'</span>,</span><br><span class="line">                    url: <span class="string">'userlist302'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Menu</span><br></pre></td></tr></table></figure><p>服务端返回的结构可以为 <code>[1,0,1]</code> 或是 <code>[1,0,[1,0]]</code> 这样的权限表示。<code>1</code> 表示有权限，<code>0</code> 表示没有权限。当然也可以直接返回数组下标或者是菜单id等方式都可以。如 <code>[0,2]</code> <code>[0,[0]]</code> 不建议权限嵌套太深，即使设计者能找到对应菜单，使用者找起来还是比较困难的。</p><p>下面是根据菜单获取路由的实现方法，把一些通用的部分定义在开头，后面根据菜单动态拼接。需要注意 404 页面要放在所有路由之后，见上面 <code>notfound</code> 的部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> genRoutes = <span class="function"><span class="keyword">function</span> (<span class="params">menus, routes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!routes) &#123;</span><br><span class="line">    routes = &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: routemap[<span class="string">'Home'</span>],</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">""</span>,</span><br><span class="line">          component: routemap[<span class="string">'Blank'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (menus.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    menus.forEach(<span class="function"><span class="params">menu</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (menu.component) &#123;</span><br><span class="line">        menu.component = routemap[menu.component];</span><br><span class="line">        routes.children.push(&#123;</span><br><span class="line">          path: menu.path,</span><br><span class="line">          component: menu.component,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (menu.children &amp;&amp; menu.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        genRoutes(menu.children, routes);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> routes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>仅仅通过前端控制菜单权限肯定是不够的，服务端接口也需要设置角色权限，控制某些接口只允许某些角色访问。比如只有管理员可以添加用户，这样即使其他角色通过某些方法获取到了菜单权限，因为不具备添加用户接口访问权限，依然无法使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在设计开发后台管理系统时，少不了会遇到不同用户角色拥有不同菜单访问权限的需求，本文介绍 Vue 的动态路由实现的动态权限菜单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="https://mojipanda.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-刷新当前页面</title>
    <link href="https://mojipanda.com/blog/1506/"/>
    <id>https://mojipanda.com/blog/1506/</id>
    <published>2020-05-23T02:50:59.000Z</published>
    <updated>2020-05-23T03:36:15.745Z</updated>
    
    <content type="html"><![CDATA[<p>前端页面在用户执行某个动作之后，可能更新了些数据或者状态，此时就需要重新刷新页面来渲染出最新结果。</p><a id="more"></a><h2 id="推荐写法"><a href="#推荐写法" class="headerlink" title="推荐写法"></a>推荐写法</h2><p>这种方式用于执行某个动作之后刷新当前页面，并且页面不会有一闪的不好体验。</p><p>首先，在文件 <code>App.vue</code> 写上如下代码。通过控制 <code>router-view</code> 的显示或隐藏，达到控制页面再次加载的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view v-if&#x3D;&quot;isRouterAlive&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      reload: this.reload</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isRouterAlive: true</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reload() &#123;</span><br><span class="line">      this.isRouterAlive &#x3D; false;</span><br><span class="line">      this.$nextTick(function() &#123;</span><br><span class="line">        this.isRouterAlive &#x3D; true;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在需要刷新的页面，先注入 <code>reload</code> 依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inject: [&quot;reload&quot;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在执行操作的动作里直接调用 <code>this.reload();</code> 即可刷新当前页面。</p><h2 id="其他写法"><a href="#其他写法" class="headerlink" title="其他写法"></a>其他写法</h2><p>下面是刷新页面的其他写法，强制刷新页面，会有短暂的闪烁。存储在 <code>store</code> 的数据会丢失，需要注意处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.reload();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.go(0);</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>我在写登录跳转，并且需要刷新跳转页的时候，使用上面的方法并没有达到我想要的效果，不是没有跳转过去就是跳转之后页面没有刷新。然后找到了下面的写法解决了我的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.open(&quot;&#x2F;dashboard&quot;, &quot;_self&quot;);</span><br></pre></td></tr></table></figure><p>登录之后数据会存储到 <code>localStorage</code> 中，这个跳转，相当于关闭了登录页直接在本页打开新跳转页。在 <code>App.vue</code> 的 <code>created</code> 方法里会从 <code>localStorage</code> 重新加载数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    if (localStorage.getItem(&quot;store&quot;)) &#123;</span><br><span class="line">      this.$store.replaceState(</span><br><span class="line">        Object.assign(</span><br><span class="line">          &#123;&#125;,</span><br><span class="line">          this.$store.state,</span><br><span class="line">          JSON.parse(localStorage.getItem(&quot;store&quot;))</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    window.addEventListener(&quot;beforeunload&quot;, () &#x3D;&gt; &#123;</span><br><span class="line">      localStorage.setItem(&quot;store&quot;, JSON.stringify(this.$store.state));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端页面在用户执行某个动作之后，可能更新了些数据或者状态，此时就需要重新刷新页面来渲染出最新结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="https://mojipanda.com/tags/Vue/"/>
    
  </entry>
  
</feed>
