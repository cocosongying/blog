<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>磨叽熊猫</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mojipanda.com/"/>
  <updated>2020-06-10T13:27:53.351Z</updated>
  <id>https://mojipanda.com/</id>
  
  <author>
    <name>宋颖</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java-关于Lombok插件的记录</title>
    <link href="https://mojipanda.com/blog/ad2d/"/>
    <id>https://mojipanda.com/blog/ad2d/</id>
    <published>2020-06-10T12:23:08.000Z</published>
    <updated>2020-06-10T13:27:53.351Z</updated>
    
    <content type="html"><![CDATA[<p>遇到一个项目中使用了Lombok插件，这里记录一下如何使用以及自己的几点看法。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近遇到一个项目，打算把项目跑起来看一下效果，结果导入项目到IDE中就一片红叉，报错的地方几乎都是使用 get set 的地方，打开类文件确实没有 get set 方法，只有成员属性。于是搜索了一下什么情况下可以去掉 get set。最终揪出了 lombok 这个东西。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>以我使用 eclipse 举例，其他 IDE 在官网有介绍使用步骤。</p><ol><li><p>在下面的链接下载 <code>lombok.jar</code></p><div class="note link"><p><a href="https://projectlombok.org/download" target="_blank" rel="external nofollow noopener noreferrer">lombok.jar 下载</a></p></div></li><li><p>将下载好的 <code>lombok.jar</code> 复制到 eclipse.ini 所在文件目录，找一下 eclipse 安装目录，很容易找到。</p></li><li><p>编辑 <code>eclipse.ini</code>，在最后添加以下代码并保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:lombok.jar</span><br></pre></td></tr></table></figure></li><li><p>重启 eclipse 后 clean 一下项目解决</p></li></ol><h2 id="关于使用"><a href="#关于使用" class="headerlink" title="关于使用"></a>关于使用</h2><p>lombok 主要是用注解的方式达到精简代码的目的。首先使用 maven 导入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.18.12&lt;&#x2F;version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>之后就可以使用 <code>@Data</code> 注解，相当于同时使用了 <code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@Getter</code>、<code>@Setter</code> 和 <code>@RequiredArgsConstrutor</code> 这些注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="几点看法"><a href="#几点看法" class="headerlink" title="几点看法"></a>几点看法</h2><p>这种方式确实省了不少代码，但是有利有弊。这个必须要 IDE 支持，所有开发人员都要安装这个插件，毕竟不安装的都会报错。究竟用不用，使用规模，还是视情况而定吧，不要过度依赖。参考资料里关于lombok的使用看法还是比较中肯的，我也比较认同。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到一个项目中使用了Lombok插件，这里记录一下如何使用以及自己的几点看法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://mojipanda.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mac上安装brew</title>
    <link href="https://mojipanda.com/blog/8d6d/"/>
    <id>https://mojipanda.com/blog/8d6d/</id>
    <published>2020-06-09T13:55:44.000Z</published>
    <updated>2020-06-09T14:19:57.463Z</updated>
    
    <content type="html"><![CDATA[<p>介绍如何在 Mac 上安装 brew</p><a id="more"></a><p>brew 作为 Mac 平台下一个包管理工具。可以一条命令在 Mac 上安装、卸载和更新各种软件包。</p><h2 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h2><p>直接运行下面的命令就可以安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>但是如果执行这条命令报错，说是无法连接 <code>https://raw.githubusercontent.com/</code> 之类的</p><p>这个时候可以在浏览器中访问链接</p><p><a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="external nofollow noopener noreferrer">https://raw.githubusercontent.com/Homebrew/install/master/install</a></p><p>内容如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby</span></span><br><span class="line"></span><br><span class="line">STDERR.print &lt;&lt;EOS</span><br><span class="line"><span class="symbol">Warning:</span> The Ruby Homebrew installer is now deprecated <span class="keyword">and</span> has been rewritten <span class="keyword">in</span></span><br><span class="line">Bash. Please migrate to the following <span class="symbol">command:</span></span><br><span class="line">  /bin/bash -c <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</span></span><br><span class="line"></span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line">Kernel.exec <span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"'</span></span><br></pre></td></tr></table></figure><p>意思是直接执行下面的语句，但是我们遇到的问题是无法连接 <code>https://raw.githubusercontent.com/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>那么我们继续访问这里的链接</p><p><a href="https://raw.githubusercontent.com/Homebrew/install/master/install.sh" target="_blank" rel="external nofollow noopener noreferrer">https://raw.githubusercontent.com/Homebrew/install/master/install.sh</a></p><p>内容有点长，这里就不粘贴了，浏览器访问可以看到。将页面文本复制到 <code>brew_install.sh</code> 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">touch brew_install.sh</span><br><span class="line">chmod 777 brew_install.sh</span><br></pre></td></tr></table></figure><p>然后执行这个脚本文件就可以正常安装了。过程可能有点慢，耐心等一等，如果长时间卡住不动也可以先强制退出再次执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c brew_install.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍如何在 Mac 上安装 brew&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Mac" scheme="https://mojipanda.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Java-Mac系统配置JDK环境变量</title>
    <link href="https://mojipanda.com/blog/47db/"/>
    <id>https://mojipanda.com/blog/47db/</id>
    <published>2020-06-08T14:06:34.000Z</published>
    <updated>2020-06-08T14:28:28.994Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下在 Mac 系统配置 JDK 环境变量。</p><a id="more"></a><ol><li>首先从官网中下载需要的版本安装包，并按照提示进行安装。</li></ol><div class="note link"><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="external nofollow noopener noreferrer">Java SE Downloads</a></p></div><ol start="2"><li>运行下面的命令查看 Java 安装路径。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home</span><br></pre></td></tr></table></figure><p>比如结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_40.jdk&#x2F;Contents&#x2F;Home</span><br></pre></td></tr></table></figure><ol start="3"><li>如果是第一次配置环境变量，可以创建一个 <code>.bash_profile</code> 文件，如果之前已经创建过则直接到下面一步。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure><ol start="4"><li>执行下面的命令会打开编辑窗口</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure><ol start="5"><li>粘贴以下配置到窗口中，其中 JAVA_HOME 的配置路径从步骤2获得，不同版本号路径不一样。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_40.jdk&#x2F;Contents&#x2F;Home</span><br><span class="line"></span><br><span class="line">PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH:.</span><br><span class="line"></span><br><span class="line">CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:.</span><br><span class="line"></span><br><span class="line">export JAVA_HOME</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">export CLASSPATH</span><br></pre></td></tr></table></figure><ol start="6"><li>执行下面的命令使配置生效。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><ol start="7"><li>输入下面的命令检查一下配置的路径是否正确。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure><ol start="8"><li>最后通过查看 java 版本来检验配置是否生效。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>运行结果应该会给出类似下面的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_40&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_40-b27)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下在 Mac 系统配置 JDK 环境变量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="https://mojipanda.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Shell-获取命令行参数</title>
    <link href="https://mojipanda.com/blog/3d67/"/>
    <id>https://mojipanda.com/blog/3d67/</id>
    <published>2020-06-06T11:12:33.000Z</published>
    <updated>2020-06-06T11:38:54.370Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下使用 Shell 写脚本如何获取命令行参数。</p><a id="more"></a><h2 id="直接获取"><a href="#直接获取" class="headerlink" title="直接获取"></a>直接获取</h2><p>比如直接写个脚本文件 <code>script.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">echo "第一个参数为：$1";</span><br><span class="line">echo "第二个参数为：$2";</span><br><span class="line">echo "第三个参数为：$3";</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash script.sh a b c</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一个参数为：a</span><br><span class="line">第二个参数为：b</span><br><span class="line">第三个参数为：c</span><br></pre></td></tr></table></figure><h2 id="使用getopts"><a href="#使用getopts" class="headerlink" title="使用getopts"></a>使用getopts</h2><p>比如直接写个脚本文件 <code>script.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">while getopts 'a:b:c:' opt; do</span><br><span class="line">    case $opt in</span><br><span class="line">        a)</span><br><span class="line">            echo $OPTARG</span><br><span class="line">            ;;</span><br><span class="line">        b)</span><br><span class="line">            echo $OPTARG</span><br><span class="line">            ;;</span><br><span class="line">        c)</span><br><span class="line">            echo $OPTARG</span><br><span class="line">            ;;</span><br><span class="line">        ?)</span><br><span class="line">            echo "Unknow option"</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash script.sh -a 1 -b 2 -c 3</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>直接获取参数的方式需要注意参数顺序。getopts 方式不必关注参数顺序，同时可以将参数赋值以便后续处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一下使用 Shell 写脚本如何获取命令行参数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Shell" scheme="https://mojipanda.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-获取命令行参数</title>
    <link href="https://mojipanda.com/blog/12e9/"/>
    <id>https://mojipanda.com/blog/12e9/</id>
    <published>2020-06-06T10:27:35.000Z</published>
    <updated>2020-06-06T10:56:45.284Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下使用 Nodejs 写脚本如何获取命令行参数。</p><a id="more"></a><h2 id="直接获取"><a href="#直接获取" class="headerlink" title="直接获取"></a>直接获取</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> argv = process.argv.slice(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>比如写个脚本 <code>script.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> argv = process.argv.slice(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'传递的参数为：'</span>, argv);</span><br></pre></td></tr></table></figure><p>执行脚本并传入参数 a b c</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node script.js a b c</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传递的参数为： [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]</span><br></pre></td></tr></table></figure><h2 id="使用第三方模块commander"><a href="#使用第三方模块commander" class="headerlink" title="使用第三方模块commander"></a>使用第三方模块commander</h2><p>首先安装 <code>commander</code> 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commander --save</span><br></pre></td></tr></table></figure><p>写个脚本 <code>script.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; program &#125; = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line">program</span><br><span class="line">    .version(<span class="string">'0.0.1'</span>)</span><br><span class="line">    .option(<span class="string">'-d, --debug'</span>, <span class="string">'output extra debugging'</span>)</span><br><span class="line">    .option(<span class="string">'-s, --small'</span>, <span class="string">'small pizza size'</span>)</span><br><span class="line">    .option(<span class="string">'-p, --pizza-type &lt;type&gt;'</span>, <span class="string">'flavour of pizza'</span>);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br><span class="line"><span class="built_in">console</span>.log(program.opts());</span><br><span class="line"><span class="keyword">if</span> (program.debug) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'debugging'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node script.js -d</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  version: &#39;0.0.1&#39;,</span><br><span class="line">  debug: true,</span><br><span class="line">  small: undefined,</span><br><span class="line">  pizzaType: undefined</span><br><span class="line">&#125;</span><br><span class="line">debugging</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node script.js -d -s -p abc</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; version: &#39;0.0.1&#39;, debug: true, small: true, pizzaType: &#39;abc&#39; &#125;</span><br><span class="line">debugging</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>使用直接获取的方式需要注意参数顺序。而使用第三方模块则不必关心参数顺序问题，可以更好的设计脚本参数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一下使用 Nodejs 写脚本如何获取命令行参数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-博客文章进行加密</title>
    <link href="https://mojipanda.com/blog/977/"/>
    <id>https://mojipanda.com/blog/977/</id>
    <published>2020-06-03T08:52:02.000Z</published>
    <updated>2020-06-03T11:56:05.652Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="哦吼，密码不对，请再试试。" data-whm="好像有点问题，但也能看看。">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">尝试输入一下密码查看全文：mojipanda</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5c30094ee8afcd75a797c85735548d29c9110a61d5016368d38a05a3a5d9b32a">046256ec03c6a25ef84cf62f91974a8be047f8d793a904b4048ea4afe8d1813fdcce463b53ce96da4dc940d97606889c32861de68ef572a80c4a7fdbf1ea573173eef718789aa2d4f202b12daf3bd6b0d92bfbb808fe07db4e728433b44d0caedd4d3fef8ae204f9dfca92ac45de069f154f650bfa94c508aec9cf1ae498e54f9b4462a6e458ad459203150dcee5711556fb36583432fcc51bf902e7be9807809d747b3cdca63e0455257b1676344eb9257ea4018d7df8e16b9085682d50c15972591289119bdd41ea797d9d8bd3e4dfd93c251b35062687eb8692f4152ec0243beb241b605e0251814cef89364f7fc1577d542de5c7a248ef1891c3ba3430ef02ff03da444c25440375f89e1830580e54201cf1ad2d0dc7534313c383f0b5eb5e067250a2f4086c832e319ca9e559964044cae10d0843a7a85ad1a769bc0ccca0f7e2d3bd5ffa6f1445d570518acb53219c5173c685efc5a88a4721e7eef511c7c891329bb0c1f09f6e45f905e22d55c01384d5d0dd6a580a925109d264d7a7533ebf8193ddb4a75ba39c1c4e5419d49d3f1f07b9936de7e28cb065b0e6c0bac9a425137ac900011e1c58801dbf9a26265ece14fd7de54e4c5876eceda77fc533fb9c0de8a60dc9b6330c8c83fc63810fb64956be312f4b00e205efc5b909506645233ae37d6861f48b488a7c7bae46da084dd5367e405c01d7f7d6287f7c3f196395757ae54d083d4d829d30ca3535b23a0c595fdc69e4f226b8616a93cf4b68b7320edb4385199674eed7708d1313a5546b2dcef2b3c2951684255f2b92568c8acb7a3ebeb3f6c9e083d8f04e7b62c087ad4e11cd2cf8af9991f38ae6a4a1b87eb0f45b2f4d59bdaf41614413ed3f7d7de5f43e3c4af6681f1646b928aab49579b8e57ba02ca0e0bde4f310d66cba870bb5dbfd176f58109d9ce418cc6bd68c9edea63ee05fee824ac9b16d90833585a793875e23224ab504a396555dd090dbf0637de21595ded7ca17b3e510aa231fdd9238332f74ee3a0729adc5243cd30ac8d48248932bb045202cace8457b038f8f805c8adefe023ab05f18c4dcf3d1198db0f9131370cfe8c95facc4a874973cb5ad0a3b2bc264ed8d4c9b0ad8d6584df11ffdeb209646f9fcdf4cdef653fea8c0ccd7e18e4f31a0d4e81fef5aabee018532a6476ff769dbdf7633d08d3db45b42497ebc6be75e2aa7b563a0a347eb97913773f4870faa1c4286fa7e0afdffd1de0cad1aa0214505735a5b3f651bc77dc0dd93eb1704a645206fca2d9efc512470d26924432bd1f17c94fe85dc62eb805ae19094ece7f3611bfe2d2fa1e095a8393325889e73130906987c132119b7ce6d72a66da229896dd43a3a8ae3669f93dc6c718e5e4d71a97ffada35a35490d3ec2509b581a296c47d42adef0d3ad359deb81daced83c7bfc88e221ec542aa6962174e394c17238d08c4646aa536ac9acd9746ebc81cc11a83f5dc3e2aeee6db71961bba99a5f25dec10d4a464508f02e33e63c835131b2094ee9990f00d621d157a0338c989e2544f703659ba65378df54627e6eb03da7a9b2adcabf3818b9d6c34a6ab539512987caa48dc9a21cb15644cbd7278c45d169e80b3e5a24e66a87520b78061005f90da2c212b17dfe057ca911cd3ddc80e101259eec42ecda032ab4f7d6cd0524f81deb035de181701177c7494a577cf72def7d988cac5ea1684768faae291f452275537cdb1bb67f4cac682618aeacb95c1543b3210561c886f4f2c8b00f01337a43db5fd2240d64fc8bffeb1f17762bd0a484065043e3d5aa43cd095bbc70391fa70624d57ea5e7dce9f62ec1331d2ed63d33591acabf5406aa83305217b5151642e09a1767c8e7870d981f374024bd80a44a64e5928fd4582a59067ee21027b3e9fad817ca033a0f647aa59c8973d033425f63b689ef8d6b3ffd6f8d63533883c182d854eccab322097136bf148f36d45fc9ec3d29be1d45e55b5d1a8bf7d32750cc6982324904bcc061bd34205ff33019b8d3a82de3b80e822da8c6233450cfc951dad0e4a8578bbdbfb6b0f48339feaf1f347f75982d03bddfce85018190fc22b797d750cc91a61f061b95b56da84f2822f185af65d19a94e1ab3503dd24346f708d000b30727d1249b1b5e01d8e8ff6d865b4cf889b813e077cd02ecc5a9a4e056d07060c5580e0ccddcaa5ce4b89f7c9391bdda239d3b800ba721e3a33cf983a42af08f159d07afc1b80b23bb9450d153af2174125bd866f5cd4c3a734537ccfb4ef4d9d6d8443f157e8d4cec1bf3f4b6cf8572298f1970555bfb11e86c11658106b6c9e788779d79928ff1c7707e61f241625fa03092d82ad44cef16797a20a5cf067ff9ea3f5b79a766e81f77504839c3cff8795cb9eaf25152969efb175dbed20e0984bc6f178ea37f7edbf874f8122ff6b8c08fa9e66385753352e4664515aa6b13e7d4cd73e999989df9ec3d5f2999347bbd1f522e4447cdb014314d013147fe5228c280467c3d7b4228cc03a8e68323eb601dd170aca45ed87963803c8730262a1c5c35952be97b9332770020e37ba9afc6599bf3e7939f412489a9ac2b54bc7247dd7d1af8cb4258207705e917f60aff6666cf5bd69df8195056d09ad7a03c709854ce528312c81e5475fba970e1ab69736c7c1d89ed5fa346fdc75268dba39676c72e9f4f928d6987d7bbe80eba30c45b415100ab95301e54bf27cf6318c23993da8562be629238d61edda6ad1ab2fa067af2dea9227d4b704a29a982910e2dd2541d9ace5d7e55dcdb08da11f234af33958e1b0add5479d63a2c9c7030456fe242cf8aa92778c3e1c466ff321f0de415010f2992eefe4828ed4d5f22ce83942c2c30958a01b572220629caf6878bcd9b855a86b62cd7ac8afb4b4d467141ffc91372761cf55d4565d434662cf2d012d4f7d127dcb5bab02904cdaadd9ea7543b9619cac2619fd27bd014e251696997a36a5a85fe73490ee7ca483c0ac4d9ce4a82660367d349f6cba466002b0981eebcdcfe759077ade7f5cf67e8ea65f788d627802b9ef38dd2cf6c2bae0436d2cdc0ad0120810411591402becec9bf9383d6f7fa86b31a3a41bf462d0e399edf9967cb6b4fa604276795396ce6e052fbd763b5112055f210d2e5caefaaf76d7acaf1e59df5d1095c22ee2e5c802c920c697af05c39ba269a66819e63613e7f41060531155ffe699fa084f1f12cecb0c97941f6f27b08ec248e41e8653570da8edefb80b2c54da6f74003b057c77c716bd6cfb1db5a4347cb60b998e7164bb4c3c7fefabf86ed0860b80a2f8edf1022cf4b965ce29e1a9659ca8206d9fc990cb83127a399fc0a5804c9c23927787562cf160533b469cfd4b106b1aeaee99a2ac80513798f048ad9056e93d752e8c3297f9e72ada984e016b9923835e2d2ce1eee74d513010da91db7c62756589423aa075403fd895cb29f9938a9f630342cfc606ac12651f99b80ff2c99fe1f616c909b936d7b0f1e96fa16a64eb249c6574bcb660cd563d52462f7ed2ff6f7be44eb2d2cab74ecb08aa99fd0230305a33be7069598ae6243be4526a074a687c74da13daf2edce9759af13b40064720ca8ea1582ba83dc41fb9c94ab6834f55f53c2115fdbb44</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      试一下文章加密，进来看效果～
    
    </summary>
    
    
      <category term="实用教程" scheme="https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://mojipanda.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-图片压缩库imagemin</title>
    <link href="https://mojipanda.com/blog/9de/"/>
    <id>https://mojipanda.com/blog/9de/</id>
    <published>2020-05-25T03:31:57.000Z</published>
    <updated>2020-05-25T04:02:51.631Z</updated>
    
    <content type="html"><![CDATA[<p>记录一个 <code>Nodejs</code> 的图片压缩库 - <code>imagemin</code></p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>imagemin</code> 本身不具备图片压缩能力，而是通过支持很多具有压缩不同类型图片的插件实现压缩。这个库只适合在服务端使用，可以写成脚本执行，也可以写成接口的形式给前端调用。</p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install imagemin --save</span><br></pre></td></tr></table></figure><p>常用插件列表</p><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-gifsicle" target="_blank" rel="external nofollow noopener noreferrer">Imagemin plugin for Gifsicle</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-svgo" target="_blank" rel="external nofollow noopener noreferrer">SVGO imagemin plugin</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-pngquant" target="_blank" rel="external nofollow noopener noreferrer">Imagemin plugin for pngquant</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-optipng" target="_blank" rel="external nofollow noopener noreferrer">Imagemin plugin for OptiPNG</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-webp" target="_blank" rel="external nofollow noopener noreferrer">WebP imagemin plugin</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-mozjpeg" target="_blank" rel="external nofollow noopener noreferrer">Imagemin plugin for mozjpeg</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-jpeg-recompress" target="_blank" rel="external nofollow noopener noreferrer">jpeg-recompress imagemin plugin</a></p></div><div class="note link"><p><a href="https://www.npmjs.com/package/imagemin-jpegtran" target="_blank" rel="external nofollow noopener noreferrer">jpegtran imagemin plugin</a></p></div><p>使用示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">'imagemin'</span>);</span><br><span class="line"><span class="keyword">const</span> imageminJpegtran = <span class="built_in">require</span>(<span class="string">'imagemin-jpegtran'</span>);</span><br><span class="line"><span class="keyword">const</span> imageminPngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</span><br><span class="line"> </span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> files = <span class="keyword">await</span> imagemin([<span class="string">'images/*.&#123;jpg,png&#125;'</span>], &#123;</span><br><span class="line">        destination: <span class="string">'build/images'</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">            imageminJpegtran(),</span><br><span class="line">            imageminPngquant(&#123;</span><br><span class="line">                quality: [<span class="number">0.6</span>, <span class="number">0.8</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(files);</span><br><span class="line">    <span class="comment">//=&gt; [&#123;data: &lt;Buffer 89 50 4e …&gt;, destinationPath: 'build/images/foo.jpg'&#125;, …]</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这个工具支持处理多张图片，既可以将压缩后的文件输出到指定目录，也可以返回压缩后文件的数据。</p><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>在使用 <code>npm</code> 安装插件的时候，安装过程特别慢，且有很大几率出现安装不成功，且需要在自己电脑上编译的情况，编译这些文件又需要根据出错提示安装一些基础库。自从改为通过 <code>cnpm</code> 安装后，安装速度很快，且不需要再次编译的过程。这里强烈推荐使用 <code>cnpm</code> 安装。</p><p>对于压缩效果，那是非常明显且高效的，说的再多不如体验一下，大小减少了很多，而画质却看不出来太大差别，当然这个和设置也有关系，压缩比例太高了画质自然是不行的，使用推荐设置就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一个 &lt;code&gt;Nodejs&lt;/code&gt; 的图片压缩库 - &lt;code&gt;imagemin&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue-动态权限菜单设计</title>
    <link href="https://mojipanda.com/blog/8390/"/>
    <id>https://mojipanda.com/blog/8390/</id>
    <published>2020-05-23T09:02:39.000Z</published>
    <updated>2020-05-23T10:19:42.725Z</updated>
    
    <content type="html"><![CDATA[<p>在设计开发后台管理系统时，少不了会遇到不同用户角色拥有不同菜单访问权限的需求，本文介绍 Vue 的动态路由实现的动态权限菜单。</p><a id="more"></a><h2 id="主要实现"><a href="#主要实现" class="headerlink" title="主要实现"></a>主要实现</h2><p>在 <code>router/index.js</code> 先写下所有角色都共通的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: <span class="string">'/dashboard'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        normal: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/Login.vue'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的自定义代码是控制是否需要登录验证的，加上这个就不需要登录验证，目的是提供一些单页面的不需要登录的访问，在 <code>main.js</code> 里会用到判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meta: &#123;</span><br><span class="line">  normal: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在 <code>router/components.js</code> 里定义出所有的动态路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/Home.vue'</span>);</span><br><span class="line"><span class="keyword">const</span> Blank = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/menu/Blank.vue'</span>);</span><br><span class="line"><span class="keyword">const</span> Profile = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/menu/Profile.vue'</span>);</span><br><span class="line"><span class="keyword">const</span> UserList = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/menu/UserList.vue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    Home,</span><br><span class="line">    Blank,</span><br><span class="line">    Profile,</span><br><span class="line">    UserList,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.js</code> 完整代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</span><br><span class="line"><span class="keyword">import</span> consts <span class="keyword">from</span> <span class="string">'./consts'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> routemap <span class="keyword">from</span> <span class="string">'./router/components'</span></span><br><span class="line"><span class="keyword">const</span> genRoutes = <span class="function"><span class="keyword">function</span> (<span class="params">menus, routes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!routes) &#123;</span><br><span class="line">    routes = &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: routemap[<span class="string">'Home'</span>],</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">""</span>,</span><br><span class="line">          component: routemap[<span class="string">'Blank'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (menus.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    menus.forEach(<span class="function"><span class="params">menu</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (menu.component) &#123;</span><br><span class="line">        menu.component = routemap[menu.component];</span><br><span class="line">        routes.children.push(&#123;</span><br><span class="line">          path: menu.path,</span><br><span class="line">          component: menu.component,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (menu.children &amp;&amp; menu.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        genRoutes(menu.children, routes);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> routes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fromApi = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL = consts.Api.BASE_URL;</span><br><span class="line">Vue.use(VueAxios, axios)</span><br><span class="line">Vue.prototype.Global = consts</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.matched.some(<span class="function"><span class="params">data</span> =&gt;</span> data.meta.normal)) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (store.getters.isLogin &amp;&amp; fromApi) &#123;</span><br><span class="line">    fromApi = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> menus = [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'profile'</span>,</span><br><span class="line">        component: <span class="string">'Profile'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">if</span> (localStorage.getItem(<span class="string">"store"</span>)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> storeInfo = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"store"</span>));</span><br><span class="line">        <span class="keyword">let</span> menu = <span class="built_in">JSON</span>.parse(storeInfo.userInfo.menu);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; menu.length &amp;&amp; i &lt; consts.Menu.ALL.length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (menu[i] === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> info = &#123;</span><br><span class="line">              path: consts.Menu.ALL[i].url,</span><br><span class="line">              component: consts.Menu.ALL[i].component</span><br><span class="line">            &#125;</span><br><span class="line">            menus.push(info);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> routes = genRoutes(menus);</span><br><span class="line">    <span class="keyword">const</span> notfound = &#123;</span><br><span class="line">      path: <span class="string">"*"</span>,</span><br><span class="line">      redirect: <span class="string">'/'</span></span><br><span class="line">    &#125;</span><br><span class="line">    router.addRoutes([routes, notfound]);</span><br><span class="line">    router.push(&#123;</span><br><span class="line">      path: to.path</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!store.getters.isLogin) &#123;</span><br><span class="line">    next(&#123;</span><br><span class="line">      path: <span class="string">'/login'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>这里是在路由访问前的处理，可以看到 <code>data.meta.normal</code> 控制了是否需要登录。下面注释了一段获取菜单的部分。这里有三种思路：</p><ul><li>一是不同角色对应的菜单定义在前端，这里根据角色获取</li><li>二是这些动态权限定义在服务端，通过接口访问获取</li><li>三是前端定义出所有权限数组，服务端返回角色权限下标，结合获取</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.matched.some(<span class="function"><span class="params">data</span> =&gt;</span> data.meta.normal)) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (store.getters.isLogin &amp;&amp; fromApi) &#123;</span><br><span class="line">    fromApi = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> menus = [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'profile'</span>,</span><br><span class="line">        component: <span class="string">'Profile'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取菜单</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> routes = genRoutes(menus);</span><br><span class="line">    <span class="keyword">const</span> notfound = &#123;</span><br><span class="line">      path: <span class="string">"*"</span>,</span><br><span class="line">      redirect: <span class="string">'/'</span></span><br><span class="line">    &#125;</span><br><span class="line">    router.addRoutes([routes, notfound]);</span><br><span class="line">    router.push(&#123;</span><br><span class="line">      path: to.path</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!store.getters.isLogin) &#123;</span><br><span class="line">    next(&#123;</span><br><span class="line">      path: <span class="string">'/login'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>服务端设计的菜单结构，比如前端定义好权限数组如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Menu = &#123;</span><br><span class="line">    ALL: [</span><br><span class="line">        &#123;</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            name: <span class="string">'用户管理'</span>,</span><br><span class="line">            url: <span class="string">'userlist'</span>,</span><br><span class="line">            component: <span class="string">'UserList'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id: <span class="number">2</span>,</span><br><span class="line">            name: <span class="string">'用户管理2'</span>,</span><br><span class="line">            url: <span class="string">'userlist2'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            id: <span class="number">3</span>,</span><br><span class="line">            name: <span class="string">'用户管理3'</span>,</span><br><span class="line">            url: <span class="string">'#'</span>,</span><br><span class="line">            child: [</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">301</span>,</span><br><span class="line">                    name: <span class="string">'用户管理301'</span>,</span><br><span class="line">                    url: <span class="string">'userlist301'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="number">302</span>,</span><br><span class="line">                    name: <span class="string">'用户管理302'</span>,</span><br><span class="line">                    url: <span class="string">'userlist302'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Menu</span><br></pre></td></tr></table></figure><p>服务端返回的结构可以为 <code>[1,0,1]</code> 或是 <code>[1,0,[1,0]]</code> 这样的权限表示。<code>1</code> 表示有权限，<code>0</code> 表示没有权限。当然也可以直接返回数组下标或者是菜单id等方式都可以。如 <code>[0,2]</code> <code>[0,[0]]</code> 不建议权限嵌套太深，即使设计者能找到对应菜单，使用者找起来还是比较困难的。</p><p>下面是根据菜单获取路由的实现方法，把一些通用的部分定义在开头，后面根据菜单动态拼接。需要注意 404 页面要放在所有路由之后，见上面 <code>notfound</code> 的部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> genRoutes = <span class="function"><span class="keyword">function</span> (<span class="params">menus, routes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!routes) &#123;</span><br><span class="line">    routes = &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: routemap[<span class="string">'Home'</span>],</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">""</span>,</span><br><span class="line">          component: routemap[<span class="string">'Blank'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (menus.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    menus.forEach(<span class="function"><span class="params">menu</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (menu.component) &#123;</span><br><span class="line">        menu.component = routemap[menu.component];</span><br><span class="line">        routes.children.push(&#123;</span><br><span class="line">          path: menu.path,</span><br><span class="line">          component: menu.component,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (menu.children &amp;&amp; menu.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        genRoutes(menu.children, routes);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> routes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>仅仅通过前端控制菜单权限肯定是不够的，服务端接口也需要设置角色权限，控制某些接口只允许某些角色访问。比如只有管理员可以添加用户，这样即使其他角色通过某些方法获取到了菜单权限，因为不具备添加用户接口访问权限，依然无法使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在设计开发后台管理系统时，少不了会遇到不同用户角色拥有不同菜单访问权限的需求，本文介绍 Vue 的动态路由实现的动态权限菜单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="https://mojipanda.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-刷新当前页面</title>
    <link href="https://mojipanda.com/blog/1506/"/>
    <id>https://mojipanda.com/blog/1506/</id>
    <published>2020-05-23T02:50:59.000Z</published>
    <updated>2020-05-23T03:36:15.745Z</updated>
    
    <content type="html"><![CDATA[<p>前端页面在用户执行某个动作之后，可能更新了些数据或者状态，此时就需要重新刷新页面来渲染出最新结果。</p><a id="more"></a><h2 id="推荐写法"><a href="#推荐写法" class="headerlink" title="推荐写法"></a>推荐写法</h2><p>这种方式用于执行某个动作之后刷新当前页面，并且页面不会有一闪的不好体验。</p><p>首先，在文件 <code>App.vue</code> 写上如下代码。通过控制 <code>router-view</code> 的显示或隐藏，达到控制页面再次加载的目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view v-if&#x3D;&quot;isRouterAlive&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      reload: this.reload</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isRouterAlive: true</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reload() &#123;</span><br><span class="line">      this.isRouterAlive &#x3D; false;</span><br><span class="line">      this.$nextTick(function() &#123;</span><br><span class="line">        this.isRouterAlive &#x3D; true;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在需要刷新的页面，先注入 <code>reload</code> 依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  inject: [&quot;reload&quot;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在执行操作的动作里直接调用 <code>this.reload();</code> 即可刷新当前页面。</p><h2 id="其他写法"><a href="#其他写法" class="headerlink" title="其他写法"></a>其他写法</h2><p>下面是刷新页面的其他写法，强制刷新页面，会有短暂的闪烁。存储在 <code>store</code> 的数据会丢失，需要注意处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.reload();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.go(0);</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>我在写登录跳转，并且需要刷新跳转页的时候，使用上面的方法并没有达到我想要的效果，不是没有跳转过去就是跳转之后页面没有刷新。然后找到了下面的写法解决了我的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.open(&quot;&#x2F;dashboard&quot;, &quot;_self&quot;);</span><br></pre></td></tr></table></figure><p>登录之后数据会存储到 <code>localStorage</code> 中，这个跳转，相当于关闭了登录页直接在本页打开新跳转页。在 <code>App.vue</code> 的 <code>created</code> 方法里会从 <code>localStorage</code> 重新加载数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    if (localStorage.getItem(&quot;store&quot;)) &#123;</span><br><span class="line">      this.$store.replaceState(</span><br><span class="line">        Object.assign(</span><br><span class="line">          &#123;&#125;,</span><br><span class="line">          this.$store.state,</span><br><span class="line">          JSON.parse(localStorage.getItem(&quot;store&quot;))</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    window.addEventListener(&quot;beforeunload&quot;, () &#x3D;&gt; &#123;</span><br><span class="line">      localStorage.setItem(&quot;store&quot;, JSON.stringify(this.$store.state));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端页面在用户执行某个动作之后，可能更新了些数据或者状态，此时就需要重新刷新页面来渲染出最新结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="https://mojipanda.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>如果A，那么B</title>
    <link href="https://mojipanda.com/blog/cee/"/>
    <id>https://mojipanda.com/blog/cee/</id>
    <published>2020-05-22T14:25:56.000Z</published>
    <updated>2020-05-22T14:29:13.747Z</updated>
    
    <content type="html"><![CDATA[<p>如果A那么B，本身很简单的一个句子，按照逻辑推理的分类，该属于充分条件的句子，只是，实践起来，不一定那么顺畅了～</p><a id="more"></a><p>既然是充分条件，并不是后者成败的关键，但往往生活中很多时候，这个充分条件没能成立，即便后者成立了，多多少少，感觉少了点啥，因为，有时候，你的关注点更在于前面的充分条件，名义上是充分条件句，实际想要成立的是A～</p><p>比如说，如果收入增长了，那么，我就买件漂亮的裙子～看起来是个充分条件的论述，实际上，收入即便不增长，你一定不买新裙子么？不会的，还是会，只是略略少了点啥而已，说这句话的同时，其实更想侧重的是前者😂～</p><p>不知道有没有注意过，有时候如果A那么B，很多时候，A就很不给面子，反而出来了C，当然，C也是你所期盼的，正是有心栽花花不开，无心插柳柳成荫～</p><p>比如说，最近一直想着探路线，虽说上班的路线本身挺简单的，无奈于公交永远是堵在路上的，当遇到同一个地段整整堵了一个小时时，心累了～不要说开车吧，路上跑的大车都躲不了堵车的尴尬～电动车应该是不堵的，无奈不太敢骑，也只能放弃～思来想去，小单车可行，刚好可以减肥了～在娃他爸的引路之下，找到了一条畅通的路线，刚好也绕过了堵车地段，可以顺利搭车～</p><p>路线是确定了，但是一直在想着另外一条路线，近不少，想着，如果走这条近路，那么应该会更快的到达～刚好，这天，小区门口没有小单车，于是搭车到了地铁站，开始尝试～但是很快，就见识到了弊端，车流太多，人流量太大，红绿灯也多，这条路线刚好是堵车的一个重要地段，没法畅快的骑行，只能兜兜转转，交叉路口还要停下来问个路～走走停停，总算通过了堵车地段，赶上了公交车～或许是太忘神了，一不小心，坐过了站台，兜兜转转，下了车，好在过的站不多～走到马路对面，突然发现，还有公共自行车，略惊喜，一直想着附近哪里有车，可以无缝对接上学校门口的公共自行车，这会可以如愿了～于是，快速取车，跨上，奔往学校～</p><p>没有实现“如果近一点，我就可以更快的到达目的地～”倒是，无意中，坐过了站，发现了无缝对接的公共自行车😂</p><p>所以，生活就是这样，没有应该怎么样，只有就是这样～</p><p>如果A那么B，只能是一种假设，假设就存在不确定性，就存在各种状况，所以，没有如果，只有这样～</p><p>想到了，就往前冲～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果A那么B，本身很简单的一个句子，按照逻辑推理的分类，该属于充分条件的句子，只是，实践起来，不一定那么顺畅了～&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情物语" scheme="https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"/>
    
    
      <category term="心情" scheme="https://mojipanda.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Vue-使用axios发起http请求</title>
    <link href="https://mojipanda.com/blog/9643/"/>
    <id>https://mojipanda.com/blog/9643/</id>
    <published>2020-05-22T02:24:25.000Z</published>
    <updated>2020-05-22T03:02:45.293Z</updated>
    
    <content type="html"><![CDATA[<p>服务端提供好接口，前端需要发起 http 请求调用服务端接口。本文介绍在 Vue 中如何使用 axios 发起 http 请求来调用服务端接口。</p><a id="more"></a><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br><span class="line">npm install vue-axios --save</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中引入 axios</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import VueAxios from &#39;vue-axios&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure><p>在 <code>component</code> 文件中可以通过下面的方式发起 <code>GET</code> 请求，<code>POST</code> 请求将 <code>get</code> 改成 <code>post</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.axios.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">this.axios.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">this.$http.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="我的写法"><a href="#我的写法" class="headerlink" title="我的写法"></a>我的写法</h2><p>首先在 <code>consts/api.js</code>里定义好接口名称地址常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const Api &#x3D; &#123;</span><br><span class="line">    BASE_URL: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">    USER_LIST: &#39;&#x2F;user&#x2F;list&#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Api</span><br></pre></td></tr></table></figure><p>可以在 <code>main.js</code> 里配置好全局 <code>baseURL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL &#x3D; consts.Api.BASE_URL;</span><br></pre></td></tr></table></figure><p>在 <code>common/user.js</code> 里封装好调用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import Consts from &#39;..&#x2F;consts&#39;</span><br><span class="line"></span><br><span class="line">const User &#x3D; &#123;</span><br><span class="line">    async list(params) &#123;</span><br><span class="line">        let res &#x3D; await axios.post(Consts.Api.USER_LIST, params);</span><br><span class="line">        return res.data;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default User</span><br></pre></td></tr></table></figure><p>在 <code>component</code> 里先引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import UserApi from &quot;..&#x2F;..&#x2F;common&#x2F;user&quot;;</span><br></pre></td></tr></table></figure><p>直接调用就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let res &#x3D; await UserApi.list(&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>这里先记录一下 Vue 调用服务端接口的方式，关于 <code>axios</code> 的高阶使用还是要看看官方文档的。目前的写法也够基本使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务端提供好接口，前端需要发起 http 请求调用服务端接口。本文介绍在 Vue 中如何使用 axios 发起 http 请求来调用服务端接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="https://mojipanda.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>孟母三迁都是为了娃</title>
    <link href="https://mojipanda.com/blog/73d4/"/>
    <id>https://mojipanda.com/blog/73d4/</id>
    <published>2020-05-21T02:03:31.000Z</published>
    <updated>2020-05-21T02:06:46.037Z</updated>
    
    <content type="html"><![CDATA[<p>娃快两岁了，意味着快要开始他的求学生涯了，最近听的最多的就是教育，兴趣班，学区房……，烧钱的路感觉已经在眼前了，就看有没有了～</p><a id="more"></a><p>虽说龙生龙凤生凤，但是，所有父母总归会有期盼，倒不是说一定成龙成凤，只是作为一个老母亲，希望他以后可以尽量生活的开心幸福～</p><p>闲来大概查了下南京的学区，价格就不说了，都是我这样的平民买不起的；其实都是双向的，能买在学区的，首先家庭起码有那个底子，其次家长重视子女教育，再次就是小孩本身资质不差。大概理了一下，嗯，学区房意味着大资本，重视意味着是有资本且舍得花心力财力投资的，至于孩子的资质，想来现在这个时代，除了个别的天才，那没的说，大部分孩子应该是差不多水平的，所以，大概率水平，还是要靠积累的资本，这里，资本不仅仅是经济上的，还有人脉上的以及精力上的，当然，都要排除一些个例，毕竟也会有天才的～</p><p>放眼现在我们自己，有时会想，我们那会都是自己上上学，也没花特别资本去做什么，现在也还好啊！但想想，时代早就不同了，我们父母那代，只要考上大学，就是一路前程似锦了，当然，能考上的，那会本身也是龙凤了，到了我们这代，已经没有分房分配工作啥的了，学业会划分层次，顺利完成学业只是完成了一部分任务而已，还有积累资本的工作还没完成，这个时候就是划分大层次的时候了，这里还是要排除那些特殊人物，毕竟，大部分还是我们这号普通人～但是学业好坏多多少少还是会与工作挂钩的，比如说，你是名校毕业，满身才华，意味着你已经积累了一部分资本，你是普通院校毕业，谁都看得出来差距了，不要较真说是北大也出来卖猪肉的，你想想，北大出来卖猪肉，他卖的水平也是不一样的，人家也开连锁创品牌了～</p><p>孟母三迁，还是有道理的，所谓近朱者赤，近墨者黑。只是有时也疑惑，不一定每个人孟母三迁都会成功吧？我不知道，是不是现在每个孟母三迁都会成功，但是之前有看过，迁到融不进去的圈子，那怎么办？看到过一个月薪5000，想给娃上5万幼儿园的帖子，我不知道帖子的真实性，但是作为举例还是可以的，我能想象的到的是，父母只能靠各种借款来支撑这样的日子，除非月薪改成日薪或者时薪吧！再者，这个圈子里确实有优秀，但是，如果我们自己没有那么优秀的时候，能融进去么？别人上这个幼儿园的同时，也是花了重金和精力在外面有辅导的，我们还有额外精力和重金么？</p><p>乱七八糟的写，想想，不能排除学区房的优势，首先，符合孟母三迁的文化熏陶，毕竟，买学区房的都是相对比较重视的，学校师资力量相对也是优秀的，只是，学区房的前提是资本，我们只能在能力范围内，择优选择好的学区，言传身教，身教很重要～还有，能力范围内，尽量给予好的教育吧，不要说以前，以前与现在早就十万八千里的差距，我们出来都看到差距了，更何况他们的未来，谁看得清？现在吃的苦，才有以后的甜，可能～凡事没有一定，只能从概率上来说，是大概率～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;娃快两岁了，意味着快要开始他的求学生涯了，最近听的最多的就是教育，兴趣班，学区房……，烧钱的路感觉已经在眼前了，就看有没有了～&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情物语" scheme="https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"/>
    
    
      <category term="育儿" scheme="https://mojipanda.com/tags/%E8%82%B2%E5%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>简笔画-20200520</title>
    <link href="https://mojipanda.com/blog/57eb/"/>
    <id>https://mojipanda.com/blog/57eb/</id>
    <published>2020-05-20T09:24:26.000Z</published>
    <updated>2020-05-20T09:30:23.488Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/57eb/01.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/loading.svg&quot; data-original=&quot;https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/57eb/01.png&quot; alt&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="简笔画" scheme="https://mojipanda.com/categories/%E7%AE%80%E7%AC%94%E7%94%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>FireAlpaca-免费绘画软件</title>
    <link href="https://mojipanda.com/blog/d53d/"/>
    <id>https://mojipanda.com/blog/d53d/</id>
    <published>2020-05-20T03:34:08.000Z</published>
    <updated>2020-05-20T03:58:27.762Z</updated>
    
    <content type="html"><![CDATA[<p>推荐一款免费的轻量级图像编辑和图像绘画软件</p><a id="more"></a><blockquote><p>FireAlpaca,是款能立即「轻松且简单」使用的绘画软件。我们为了使世界上更多的人都能亲身体验，所以采用免费下载。当然，也不存在迄今令人困扰的麦金塔用户 / 微软用户的使用限制。希望在向人学习此软件前，您能爱用此软件到能教导他人程度。<br><em>– FireAlpaca</em></p></blockquote><p>先来看看软件首页截图<br><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/d53d/01.png" alt></p><p>这个软件的图标就是一只羊驼</p><p>百闻不如一见，百见不如一用。这款软件本来就是希望让小白都会使用，抖动修正功能还是不错的，手残党最容易手抖了。</p><p>接下来，我可能会使用这款软件试着创作一些漫画，教程就先不列举了，我也是新手小白，都要从头开始熟悉。加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐一款免费的轻量级图像编辑和图像绘画软件&lt;/p&gt;
    
    </summary>
    
    
      <category term="实用教程" scheme="https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="工具" scheme="https://mojipanda.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Nginx-记一次http转发https配置错误</title>
    <link href="https://mojipanda.com/blog/8e63/"/>
    <id>https://mojipanda.com/blog/8e63/</id>
    <published>2020-05-20T01:08:51.000Z</published>
    <updated>2020-05-20T03:16:53.072Z</updated>
    
    <content type="html"><![CDATA[<p>这是一次由于 nginx 配置错误导致的网页无法访问事故。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在浏览器通过 <code>http</code> 访问网址会在地址栏左边提示 <code>不安全</code> 字样，而通过 <code>https</code> 则会显示一个带 🔒 的图标。我的网站刚建的时候就已经可以同时支持 <code>http</code> 和 <code>https</code> 了。</p><p>由于百度收录站点要填写好多个人隐私信息，不高兴填，于是就只提交了首页地址，也没抱什么希望，有次搜索出了我的网站，不过是通过 <code>http</code>方式访问的，于是我就想能不能做个跳转，把 <code>http</code> 请求全部转发到 <code>https</code>上。</p><h2 id="搞事"><a href="#搞事" class="headerlink" title="搞事"></a>搞事</h2><p>我查到了下面的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^(.*)$ https:&#x2F;&#x2F;$host$1 permanent;</span><br></pre></td></tr></table></figure><p>然后我就直接复制到我的配置文件里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name mojipanda.com www.mojipanda.com;</span><br><span class="line">    rewrite ^(.*)$ https:&#x2F;&#x2F;$host$1 permanent;</span><br><span class="line">    ssl_certificate cert&#x2F;mojipanda.com_chain.crt;</span><br><span class="line">    ssl_certificate_key cert&#x2F;mojipanda.com_key.key;</span><br><span class="line">    ssl_session_timeout 4h;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    error_page 500 502 503 504 404 &#x2F;404.html;</span><br><span class="line">    location &#x2F; &#123; </span><br><span class="line">        alias &#x2F;mojipanda&#x2F;blog&#x2F;;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行一下 <code>nginx</code> 的热加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>从百度搜索 <code>磨叽熊猫</code> 然后点击我的主页地址 <a href="http://mojipanda.com">http://mojipanda.com</a> ，果然跳转到 <a href="https://mojipanda.com">https://mojipanda.com</a> 。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>这下可以休息一会了，于是我拿起手机，随手访问了一下我的网站，无法加载！！！</p><p>什么情况！微信试了，两个不同的手机浏览器也试了都不行，急忙打开电脑，电脑浏览器访问又是正常的。想想刚刚只改了那一个配置，赶紧先撤回修改查查原因。</p><p>恢复到之前版本之后，发现微信还是打开不了，不过手机浏览器已经可以访问了，这应该是微信缓存问题，先不管了，查查配置原因。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>原来 <code>http</code> 的 配置要和 <code>https</code> 的配置分开，在 <code>http</code> 的配置里做跳转到 <code>https</code> 就可以了。推荐使用 301 重定向方式，而不是 <code>rewrite</code> 网址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 301 https:&#x2F;&#x2F;mojipanda.com$request_uri;</span><br></pre></td></tr></table></figure><p>修改后的配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">    listen 80;</span><br><span class="line">    server_name mojipanda.com www.mojipanda.com;</span><br><span class="line">    return 301 https:&#x2F;&#x2F;mojipanda.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name mojipanda.com www.mojipanda.com;</span><br><span class="line">    ssl_certificate cert&#x2F;mojipanda.com_chain.crt;</span><br><span class="line">    ssl_certificate_key cert&#x2F;mojipanda.com_key.key;</span><br><span class="line">    ssl_session_timeout 4h;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    error_page 500 502 503 504 404 &#x2F;404.html;</span><br><span class="line">    location &#x2F; &#123; </span><br><span class="line">        alias &#x2F;mojipanda&#x2F;blog&#x2F;;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>首先电脑浏览器访问正常，<code>http</code> 请求也成功跳转到 <code>https</code> 了。</p><p>再试试手机浏览器访问也正常，<code>http</code> 请求也成功跳转到 <code>https</code> 了。</p><p>再打开微信，点一点以前的连接，发现还是不行，也没找到清缓存的地方，退出重启清后台，还是没有效果，最后只能等等看了。（当时应该找另外一个手机验证的）。等了一会，链接终于访问成功了，而分享的旧链接还不行，再等一会，终于恢复正常。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到问题不用慌，对于不熟悉的地方，多尝试，多找找资料，还有多备份。发现问题，先恢复，在收集信息查找原因，定位问题找到解决办法，最后充分验证。遇到问题并没有啥，发现问题解决问题之后，感觉自己又积累了一份经验啦～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一次由于 nginx 配置错误导致的网页无法访问事故。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="nginx" scheme="https://mojipanda.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-添加Gitalk评论系统</title>
    <link href="https://mojipanda.com/blog/da9d/"/>
    <id>https://mojipanda.com/blog/da9d/</id>
    <published>2020-05-19T13:17:23.000Z</published>
    <updated>2020-05-19T14:49:39.199Z</updated>
    
    <content type="html"><![CDATA[<p>Gitalk - 一个基于 Github Issue 和 Preact 开发的评论插件</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>静态博客其实有很多评论系统，每种评论系统都有自己各自的优势。我使用的这套主题已经可以支持下面这些评论系统了。</p><ul><li><a href="https://disqus.com/" target="_blank" rel="external nofollow noopener noreferrer">Disqus</a></li><li><a href="https://github.com/gitalk/gitalk" target="_blank" rel="external nofollow noopener noreferrer">Gitalk</a></li><li><a href="https://valine.js.org" target="_blank" rel="external nofollow noopener noreferrer">Valine</a></li><li><a href="https://github.com/MiniValine/MiniValine/" target="_blank" rel="external nofollow noopener noreferrer">MiniValine</a></li><li><a href="https://www.livere.com/" target="_blank" rel="external nofollow noopener noreferrer">Livere</a></li><li><a href="https://vssue.js.org/zh/" target="_blank" rel="external nofollow noopener noreferrer">Vssue</a></li></ul><h2 id="我为什么选择Gitalk"><a href="#我为什么选择Gitalk" class="headerlink" title="我为什么选择Gitalk"></a>我为什么选择Gitalk</h2><p><code>Disqus</code> 还是不错的，以前使用过，不过现在在国内访问不了。</p><p><code>Valine</code> 第一次看到的时候还是很惊艳的，我也发现有不少博客都在使用，在使用方面，支持 <code>markdown</code> 语法，可以发一些内置表情包，不需要登录认证就可以进行评论。最后一点我个人比较介意，所以忍痛放弃。</p><p><code>Gitalk</code> 是基于 <code>Github Issue</code> 的，评论必须使用 <code>Github</code> 账号登录。我这个博客目前技术内容偏多，所以受众也很明确。即使没有账号进行评论，还是可以通过微博，邮件或者公众号等方式进行联系。而且部署也比较简单，所以就选择它了，剩下几个也就没了解了，感兴趣的可以去看看。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先登录你的 <code>Github</code> 账号，直接访问下面的地址：</p><div class="note link"><p><a href="https://github.com/settings/applications/new" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/settings/applications/new</a></p></div><p>填写 <code>*</code> 号内容并提交，注意这两个 URL 是填写你要使用评论系统的网址。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/01.png" alt></p><p>提交完成你会获得 <code>Client ID</code> 和 <code>Client Secret</code>，这两个是用来填写在配置里的。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/02.png" alt></p><p>我用的主题配置文件 <code>themes/volantis/_config.yml</code> 修改下面几项。</p><ul><li><code>clientID</code> 和 <code>clientSecret</code> 是上面获取的</li><li><code>repo</code> 填写你的github建的仓库名称，因为要用到 <code>issues</code></li><li><code>owner</code>和 <code>admin</code> 写自己账号就行了，注意 <code>admin</code> 格式是数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># https:&#x2F;&#x2F;gitalk.github.io&#x2F;</span><br><span class="line">gitalk:</span><br><span class="line">  clientID: yourClientID</span><br><span class="line">  clientSecret: yourClientSecret</span><br><span class="line">  repo: blog</span><br><span class="line">  owner: cocosongying</span><br><span class="line">  admin: [cocosongying]</span><br></pre></td></tr></table></figure></li></ul><p>配置完成执行 <code>hexo clean &amp;&amp; hexo g</code> 来重新生成网站，<code>hexo s</code> 本地看一下效果。这个时候显示 <code>未找到相关的 Issues 进行评论</code> <code>请联系 @yourname 初始化创建</code>，点击 <code>使用 Github 登录</code> 会跳转到网站首页，没有用。</p><p>所以，这一步很重要，先执行 <code>hexo d</code> 把网站部署上去。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/03.png" alt></p><p>在部署到线上的网站点击 <code>使用 Github 登录</code> 会跳转到下面的页面提示你授权。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/04.png" alt></p><p>授权完成再看你的评论框就已经部署成功了。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/05.png" alt></p><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>部署起来还是挺简单的，而对于使用评论者而言，需要 <code>使用 Github 登录</code> 之后进行授权才可以评论。</p><p>我这个流量小的网站，评论可能会一直是 <code>0 条评论</code> 吧 😂</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gitalk - 一个基于 Github Issue 和 Preact 开发的评论插件&lt;/p&gt;
    
    </summary>
    
    
      <category term="实用教程" scheme="https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://mojipanda.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-如何使用MongoDB</title>
    <link href="https://mojipanda.com/blog/4ef0/"/>
    <id>https://mojipanda.com/blog/4ef0/</id>
    <published>2020-05-18T01:54:41.000Z</published>
    <updated>2020-05-18T02:10:31.658Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在 Nodejs 中如何连接并使用 MongoDB</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>我们需要安装 <code>mongoose</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose --save</span><br></pre></td></tr></table></figure><p>可以在项目中新建一个 <code>mongo</code> 文件夹用来管理 <code>mongodb</code> 的相关操作。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在 <code>mongo</code> 文件夹下新建 <code>connection.js</code>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> mongoUrl = <span class="string">"mongodb://username:123456@localhost:27017/demo"</span>;</span><br><span class="line"></span><br><span class="line">mongoose.Promise = global.Promise;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOptions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        useCreateIndex: <span class="literal">true</span>,</span><br><span class="line">        useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">        useFindAndModify: <span class="literal">false</span>,</span><br><span class="line">        useUnifiedTopology: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mongoose.connect(mongoUrl, getOptions());</span><br><span class="line"><span class="keyword">const</span> client = mongoose.connection;</span><br><span class="line">client.on(<span class="string">'connected'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"mongo connected"</span>) &#125;);</span><br><span class="line">client.on(<span class="string">'reconnected'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"mongo reconnected"</span>) &#125;);</span><br><span class="line">client.on(<span class="string">'disconnected'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"mongo disconnected"</span>) &#125;);</span><br><span class="line">client.on(<span class="string">'error'</span>, (error) =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"connect to "</span> + mongoUrl + <span class="string">"failed"</span>) &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    client,</span><br><span class="line">    close</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>mongo</code> 文件夹下创建文件夹 <code>model</code> 用来记录表定义，<code>mongo/model/demo.js</code> 举例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> demoSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    desc: <span class="built_in">String</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mongoose.model(<span class="string">'demo'</span>, demoSchema, <span class="string">'demo'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = db;</span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在需要操作 <code>mongodb</code> 的文件中先引入，如果是 web 接口服务，可以在主程序中引入一次，后面直接操作 <code>model</code> 就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const conn &#x3D; require(&#39;.&#x2F;connection&#39;);</span><br></pre></td></tr></table></figure><p>举一个查询的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const DemoDB &#x3D; require(&#39;.&#x2F;model&#x2F;demo&#39;);</span><br><span class="line">async function getAll() &#123;</span><br><span class="line">    let res &#x3D; await DemoDB.find();</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>推荐在 <code>mongo</code> 文件夹下编写数据库连接操作部分，为每个 <code>model</code> 编写好操作方法，统一管理，这样代码看起来更清晰，维护起来更方便。</p><p>在接口服务中使用 <code>mongodb</code> 操作按照上面操作就可以了，如果是脚本操作，使用完毕需要关闭连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍在 Nodejs 中如何连接并使用 MongoDB&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="mongodb" scheme="https://mojipanda.com/tags/mongodb/"/>
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-如何使用MySQL</title>
    <link href="https://mojipanda.com/blog/56c7/"/>
    <id>https://mojipanda.com/blog/56c7/</id>
    <published>2020-05-16T07:28:21.000Z</published>
    <updated>2020-05-16T07:50:05.394Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在 Nodejs 中如何连接并使用 MySQL</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>我们需要安装 <code>mysql2</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql2 --save</span><br></pre></td></tr></table></figure><p>可以在项目中新建一个 <code>mysql</code> 文件夹用来管理 <code>mysql</code> 的相关操作。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在 <code>mysql</code> 文件夹下新建 <code>connection.js</code>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql2'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>);</span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(config.mysql);</span><br><span class="line"><span class="keyword">const</span> client = pool.promise();</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    pool,</span><br><span class="line">    client</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里 <code>mysql</code> 的连接配置写在 <code>config.js</code> 文件中，示例配置项如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const initVal &#x3D; &#123;</span><br><span class="line">    mysql: &#123;</span><br><span class="line">        host: &#39;localhost&#39;,</span><br><span class="line">        port: 3306,</span><br><span class="line">        user: &#39;username&#39;,</span><br><span class="line">        password: &#39;123456&#39;,</span><br><span class="line">        database: &#39;demo&#39;,</span><br><span class="line">        charset: &#39;utf8mb4&#39;,</span><br><span class="line">        connectionLimit: 5,</span><br><span class="line">        dateStrings: true,</span><br><span class="line">        decimalNumbers: true,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; initVal;</span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在需要操作 <code>mysql</code> 的文件中先引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; client &#125; &#x3D; require(&#39;.&#x2F;connection&#39;);</span><br></pre></td></tr></table></figure><p>之后就可以使用 sql 语句进行愉快的操作了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">async function getById(id) &#123;</span><br><span class="line">    let sql &#x3D; &#96;select * from demo where id &#x3D; ?&#96;;</span><br><span class="line">    let args &#x3D; [id];</span><br><span class="line">    let res &#x3D; await client.query(sql, args);</span><br><span class="line">    return res[0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是 <code>return res[0]</code> 是返回的结果集，即对于查询有数据时，它返回的是数组。</p><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>推荐在 <code>mysql</code> 文件夹下编写数据库连接操作部分，这样代码看起来更清晰。</p><p>在接口服务中使用 <code>mysql</code> 操作按照上面操作就可以了，如果是脚本操作，使用完毕需要关闭连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.end();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍在 Nodejs 中如何连接并使用 MySQL&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="mysql" scheme="https://mojipanda.com/tags/mysql/"/>
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-如何使用Redis</title>
    <link href="https://mojipanda.com/blog/1ab7/"/>
    <id>https://mojipanda.com/blog/1ab7/</id>
    <published>2020-05-15T14:14:47.000Z</published>
    <updated>2020-05-16T07:43:40.700Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在 Nodejs 中如何连接并使用 Redis，通过 Nodejs 操作使用 Redis 还是相对比较简单的。</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>我们需要安装 <code>redis</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redis --save</span><br></pre></td></tr></table></figure><p>可以在项目中新建一个 <code>cache</code> 文件夹用来管理 <code>redis</code> 的相关操作。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在 <code>cache</code> 文件夹下新建 <code>connection.js</code>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">const</span> client = redis.createClient(&#123;</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    password: <span class="string">"123456"</span>,</span><br><span class="line">    db: <span class="number">1</span>,</span><br><span class="line">    retry_strategy: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (options.error &amp;&amp; options.error.code === <span class="string">'ECONNREFUSED'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'The server refused the connection'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.total_retry_time &gt; <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Retry time exhausted'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.attempt &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.min(options.attempt * <span class="number">100</span>, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> expire = promisify(client.expire).bind(client);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">get</span> = promisify(client.<span class="keyword">get</span>).bind(client);</span><br><span class="line">const <span class="keyword">set</span> = promisify(client.<span class="keyword">set</span>).bind(client);</span><br><span class="line">const del = promisify(client.del).bind(client);</span><br><span class="line"></span><br><span class="line">class Cache &#123;</span><br><span class="line">    Timeout = &#123;</span><br><span class="line">        Default: <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">get</span>(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">get</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    async <span class="keyword">set</span>(key, value, timeout) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">set</span>(key, value);</span><br><span class="line">        if (timeout) &#123;</span><br><span class="line">            <span class="keyword">await</span> expire(key, timeout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> del(key) &#123;</span><br><span class="line">        <span class="keyword">await</span> del(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> Cache();</span><br></pre></td></tr></table></figure><p>这里主要是 <code>redis</code> 的连接以及 <code>redis</code> 的几个简单操作，如获取，设置，删除，如果需要其他功能可以继续封装。</p><p>关于 <code>redis</code> 的连接配置可以单独写到配置文件里，这里为了方便介绍，把配置写死在示例代码里了。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在需要操作 <code>redis</code> 的文件中先引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Cache &#x3D; require(&#39;.&#x2F;connection&#39;);</span><br></pre></td></tr></table></figure><p>获取某个 key 对应的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await Cache.get(key);</span><br></pre></td></tr></table></figure><p>设置一个 key 对应的 value：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await Cache.set(key, value);</span><br></pre></td></tr></table></figure><p>如果需要指定缓存有效期限，比如 1 天：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await Cache.set(key, value, 24 * 60 * 60);</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>推荐在 <code>cache</code> 文件夹下为每个 <code>key</code> 新建对应的文件程序来操作 <code>redis</code>，把这个 <code>cache</code> 当成一个缓存模块，其他地方使用只要引入这个模块操作就好了。这样管理起来方便，代码看起来更清晰。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍在 Nodejs 中如何连接并使用 Redis，通过 Nodejs 操作使用 Redis 还是相对比较简单的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="redis" scheme="https://mojipanda.com/tags/redis/"/>
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-基于Koa框架写个简单的接口</title>
    <link href="https://mojipanda.com/blog/fb4f/"/>
    <id>https://mojipanda.com/blog/fb4f/</id>
    <published>2020-05-14T04:02:44.000Z</published>
    <updated>2020-05-14T04:39:16.701Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何使用 Nodejs 快速搭建服务端并提供简单的接口程序。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先我们创建一个项目文件夹 <code>demo</code>，进入这个文件夹，运行 <code>npm init</code> 初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>执行 <code>npm init</code> 命令会让你填写项目相关信息，可以一路默认，之后再改都可以。它主要就是在项目中新建一个 <code>package.json</code> 的文件并初始化一些项目信息。</p><p>其次需要安装 <code>Koa</code> 框架及一些插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install koa --save</span><br><span class="line">npm install koa-router --save</span><br><span class="line">npm install koa-bodyparser --save</span><br></pre></td></tr></table></figure><h2 id="编写主程序"><a href="#编写主程序" class="headerlink" title="编写主程序"></a>编写主程序</h2><p>新建文件 <code>index.js</code>，这个文件名可以修改，同步修改一下 <code>package.json</code> 里 <code>main</code>项对应的文件名，表示这个文件是启动入口。<code>index.js</code> 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const Koa &#x3D; require(&#39;koa&#39;);</span><br><span class="line">const router &#x3D; require(&#39;koa-router&#39;)();</span><br><span class="line">const bodyParser &#x3D; require(&#39;koa-bodyparser&#39;);</span><br><span class="line">const app &#x3D; new Koa();</span><br><span class="line"></span><br><span class="line">const index &#x3D; router.get(&#39;&#x2F;demo&#39;, ctx &#x3D;&gt; &#123;</span><br><span class="line">    ctx.response.body &#x3D; &#123; code: 0, data: &#39;Hello World!&#39; &#125;;</span><br><span class="line">&#125;).routes();</span><br><span class="line"></span><br><span class="line">app.use(index);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 捕获未定义路由</span><br><span class="line">app.use((ctx) &#x3D;&gt; &#123;</span><br><span class="line">    ctx.response.body &#x3D; &#123; code: 404 &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动项目</span><br><span class="line">app.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#96;Server is starting at port 3000&#96;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="运行使用"><a href="#运行使用" class="headerlink" title="运行使用"></a>运行使用</h2><p>在 node 环境中可以直接通过下面的命令启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>项目启动完毕就可以访问我们刚刚定义的接口 <code>http://localhost:3000/demo</code> 来查看返回信息了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;code: 0, data: &quot;Hello World!&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>前端页面调用接口可能会有跨域问题，解决方案有好几种，这里介绍简单一点的。</p><p>先安装一个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install koa2-cors --save</span><br></pre></td></tr></table></figure><p>在启动入口文件 <code>index.js</code> 加上这两句就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const cors = require(<span class="string">'koa2-cors'</span>);</span><br><span class="line">app.use(cors());</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>Nodejs 这个脚本语言还是很强大的，能写前端就算了，居然还能写服务端。想想之前用 java 的时候要写好多东西，还有各种配置，最后打包运行花费好长时间。</p><p>当然 java 有它的强大，如果只是学习写写简单的接口，像 <code>Nodejs</code> <code>Python</code> <code>Go</code> 都有很简单的操作方法，也够简单的使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍如何使用 Nodejs 快速搭建服务端并提供简单的接口程序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
</feed>
