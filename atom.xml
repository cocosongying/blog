<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>磨叽熊猫</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mojipanda.com/"/>
  <updated>2020-05-22T14:29:13.747Z</updated>
  <id>https://mojipanda.com/</id>
  
  <author>
    <name>宋颖</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如果A，那么B</title>
    <link href="https://mojipanda.com/blog/cee/"/>
    <id>https://mojipanda.com/blog/cee/</id>
    <published>2020-05-22T14:25:56.000Z</published>
    <updated>2020-05-22T14:29:13.747Z</updated>
    
    <content type="html"><![CDATA[<p>如果A那么B，本身很简单的一个句子，按照逻辑推理的分类，该属于充分条件的句子，只是，实践起来，不一定那么顺畅了～</p><a id="more"></a><p>既然是充分条件，并不是后者成败的关键，但往往生活中很多时候，这个充分条件没能成立，即便后者成立了，多多少少，感觉少了点啥，因为，有时候，你的关注点更在于前面的充分条件，名义上是充分条件句，实际想要成立的是A～</p><p>比如说，如果收入增长了，那么，我就买件漂亮的裙子～看起来是个充分条件的论述，实际上，收入即便不增长，你一定不买新裙子么？不会的，还是会，只是略略少了点啥而已，说这句话的同时，其实更想侧重的是前者😂～</p><p>不知道有没有注意过，有时候如果A那么B，很多时候，A就很不给面子，反而出来了C，当然，C也是你所期盼的，正是有心栽花花不开，无心插柳柳成荫～</p><p>比如说，最近一直想着探路线，虽说上班的路线本身挺简单的，无奈于公交永远是堵在路上的，当遇到同一个地段整整堵了一个小时时，心累了～不要说开车吧，路上跑的大车都躲不了堵车的尴尬～电动车应该是不堵的，无奈不太敢骑，也只能放弃～思来想去，小单车可行，刚好可以减肥了～在娃他爸的引路之下，找到了一条畅通的路线，刚好也绕过了堵车地段，可以顺利搭车～</p><p>路线是确定了，但是一直在想着另外一条路线，近不少，想着，如果走这条近路，那么应该会更快的到达～刚好，这天，小区门口没有小单车，于是搭车到了地铁站，开始尝试～但是很快，就见识到了弊端，车流太多，人流量太大，红绿灯也多，这条路线刚好是堵车的一个重要地段，没法畅快的骑行，只能兜兜转转，交叉路口还要停下来问个路～走走停停，总算通过了堵车地段，赶上了公交车～或许是太忘神了，一不小心，坐过了站台，兜兜转转，下了车，好在过的站不多～走到马路对面，突然发现，还有公共自行车，略惊喜，一直想着附近哪里有车，可以无缝对接上学校门口的公共自行车，这会可以如愿了～于是，快速取车，跨上，奔往学校～</p><p>没有实现“如果近一点，我就可以更快的到达目的地～”倒是，无意中，坐过了站，发现了无缝对接的公共自行车😂</p><p>所以，生活就是这样，没有应该怎么样，只有就是这样～</p><p>如果A那么B，只能是一种假设，假设就存在不确定性，就存在各种状况，所以，没有如果，只有这样～</p><p>想到了，就往前冲～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果A那么B，本身很简单的一个句子，按照逻辑推理的分类，该属于充分条件的句子，只是，实践起来，不一定那么顺畅了～&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情物语" scheme="https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"/>
    
    
      <category term="心情" scheme="https://mojipanda.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Vue-使用axios发起http请求</title>
    <link href="https://mojipanda.com/blog/9643/"/>
    <id>https://mojipanda.com/blog/9643/</id>
    <published>2020-05-22T02:24:25.000Z</published>
    <updated>2020-05-22T03:02:45.293Z</updated>
    
    <content type="html"><![CDATA[<p>服务端提供好接口，前端需要发起 http 请求调用服务端接口。本文介绍在 Vue 中如何使用 axios 发起 http 请求来调用服务端接口。</p><a id="more"></a><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br><span class="line">npm install vue-axios --save</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中引入 axios</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import VueAxios from &#39;vue-axios&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure><p>在 <code>component</code> 文件中可以通过下面的方式发起 <code>GET</code> 请求，<code>POST</code> 请求将 <code>get</code> 改成 <code>post</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.axios.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">this.axios.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">this.$http.get(api).then((response) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="我的写法"><a href="#我的写法" class="headerlink" title="我的写法"></a>我的写法</h2><p>首先在 <code>consts/api.js</code>里定义好接口名称地址常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const Api &#x3D; &#123;</span><br><span class="line">    BASE_URL: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">    USER_LIST: &#39;&#x2F;user&#x2F;list&#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Api</span><br></pre></td></tr></table></figure><p>可以在 <code>main.js</code> 里配置好全局 <code>baseURL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL &#x3D; consts.Api.BASE_URL;</span><br></pre></td></tr></table></figure><p>在 <code>common/user.js</code> 里封装好调用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import Consts from &#39;..&#x2F;consts&#39;</span><br><span class="line"></span><br><span class="line">const User &#x3D; &#123;</span><br><span class="line">    async list(params) &#123;</span><br><span class="line">        let res &#x3D; await axios.post(Consts.Api.USER_LIST, params);</span><br><span class="line">        return res.data;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default User</span><br></pre></td></tr></table></figure><p>在 <code>component</code> 里先引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import UserApi from &quot;..&#x2F;..&#x2F;common&#x2F;user&quot;;</span><br></pre></td></tr></table></figure><p>直接调用就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let res &#x3D; await UserApi.list(&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>这里先记录一下 Vue 调用服务端接口的方式，关于 <code>axios</code> 的高阶使用还是要看看官方文档的。目前的写法也够基本使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务端提供好接口，前端需要发起 http 请求调用服务端接口。本文介绍在 Vue 中如何使用 axios 发起 http 请求来调用服务端接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="https://mojipanda.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>孟母三迁都是为了娃</title>
    <link href="https://mojipanda.com/blog/73d4/"/>
    <id>https://mojipanda.com/blog/73d4/</id>
    <published>2020-05-21T02:03:31.000Z</published>
    <updated>2020-05-21T02:06:46.037Z</updated>
    
    <content type="html"><![CDATA[<p>娃快两岁了，意味着快要开始他的求学生涯了，最近听的最多的就是教育，兴趣班，学区房……，烧钱的路感觉已经在眼前了，就看有没有了～</p><a id="more"></a><p>虽说龙生龙凤生凤，但是，所有父母总归会有期盼，倒不是说一定成龙成凤，只是作为一个老母亲，希望他以后可以尽量生活的开心幸福～</p><p>闲来大概查了下南京的学区，价格就不说了，都是我这样的平民买不起的；其实都是双向的，能买在学区的，首先家庭起码有那个底子，其次家长重视子女教育，再次就是小孩本身资质不差。大概理了一下，嗯，学区房意味着大资本，重视意味着是有资本且舍得花心力财力投资的，至于孩子的资质，想来现在这个时代，除了个别的天才，那没的说，大部分孩子应该是差不多水平的，所以，大概率水平，还是要靠积累的资本，这里，资本不仅仅是经济上的，还有人脉上的以及精力上的，当然，都要排除一些个例，毕竟也会有天才的～</p><p>放眼现在我们自己，有时会想，我们那会都是自己上上学，也没花特别资本去做什么，现在也还好啊！但想想，时代早就不同了，我们父母那代，只要考上大学，就是一路前程似锦了，当然，能考上的，那会本身也是龙凤了，到了我们这代，已经没有分房分配工作啥的了，学业会划分层次，顺利完成学业只是完成了一部分任务而已，还有积累资本的工作还没完成，这个时候就是划分大层次的时候了，这里还是要排除那些特殊人物，毕竟，大部分还是我们这号普通人～但是学业好坏多多少少还是会与工作挂钩的，比如说，你是名校毕业，满身才华，意味着你已经积累了一部分资本，你是普通院校毕业，谁都看得出来差距了，不要较真说是北大也出来卖猪肉的，你想想，北大出来卖猪肉，他卖的水平也是不一样的，人家也开连锁创品牌了～</p><p>孟母三迁，还是有道理的，所谓近朱者赤，近墨者黑。只是有时也疑惑，不一定每个人孟母三迁都会成功吧？我不知道，是不是现在每个孟母三迁都会成功，但是之前有看过，迁到融不进去的圈子，那怎么办？看到过一个月薪5000，想给娃上5万幼儿园的帖子，我不知道帖子的真实性，但是作为举例还是可以的，我能想象的到的是，父母只能靠各种借款来支撑这样的日子，除非月薪改成日薪或者时薪吧！再者，这个圈子里确实有优秀，但是，如果我们自己没有那么优秀的时候，能融进去么？别人上这个幼儿园的同时，也是花了重金和精力在外面有辅导的，我们还有额外精力和重金么？</p><p>乱七八糟的写，想想，不能排除学区房的优势，首先，符合孟母三迁的文化熏陶，毕竟，买学区房的都是相对比较重视的，学校师资力量相对也是优秀的，只是，学区房的前提是资本，我们只能在能力范围内，择优选择好的学区，言传身教，身教很重要～还有，能力范围内，尽量给予好的教育吧，不要说以前，以前与现在早就十万八千里的差距，我们出来都看到差距了，更何况他们的未来，谁看得清？现在吃的苦，才有以后的甜，可能～凡事没有一定，只能从概率上来说，是大概率～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;娃快两岁了，意味着快要开始他的求学生涯了，最近听的最多的就是教育，兴趣班，学区房……，烧钱的路感觉已经在眼前了，就看有没有了～&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情物语" scheme="https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"/>
    
    
      <category term="育儿" scheme="https://mojipanda.com/tags/%E8%82%B2%E5%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>简笔画-20200520</title>
    <link href="https://mojipanda.com/blog/57eb/"/>
    <id>https://mojipanda.com/blog/57eb/</id>
    <published>2020-05-20T09:24:26.000Z</published>
    <updated>2020-05-20T09:30:23.488Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/57eb/01.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/loading.svg&quot; data-original=&quot;https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/57eb/01.png&quot; alt&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="简笔画" scheme="https://mojipanda.com/categories/%E7%AE%80%E7%AC%94%E7%94%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>FireAlpaca-免费绘画软件</title>
    <link href="https://mojipanda.com/blog/d53d/"/>
    <id>https://mojipanda.com/blog/d53d/</id>
    <published>2020-05-20T03:34:08.000Z</published>
    <updated>2020-05-20T03:58:27.762Z</updated>
    
    <content type="html"><![CDATA[<p>推荐一款免费的轻量级图像编辑和图像绘画软件</p><a id="more"></a><blockquote><p>FireAlpaca,是款能立即「轻松且简单」使用的绘画软件。我们为了使世界上更多的人都能亲身体验，所以采用免费下载。当然，也不存在迄今令人困扰的麦金塔用户 / 微软用户的使用限制。希望在向人学习此软件前，您能爱用此软件到能教导他人程度。<br><em>– FireAlpaca</em></p></blockquote><p>先来看看软件首页截图<br><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/d53d/01.png" alt></p><p>这个软件的图标就是一只羊驼</p><p>百闻不如一见，百见不如一用。这款软件本来就是希望让小白都会使用，抖动修正功能还是不错的，手残党最容易手抖了。</p><p>接下来，我可能会使用这款软件试着创作一些漫画，教程就先不列举了，我也是新手小白，都要从头开始熟悉。加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐一款免费的轻量级图像编辑和图像绘画软件&lt;/p&gt;
    
    </summary>
    
    
      <category term="实用教程" scheme="https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="工具" scheme="https://mojipanda.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Nginx-记一次http转发https配置错误</title>
    <link href="https://mojipanda.com/blog/8e63/"/>
    <id>https://mojipanda.com/blog/8e63/</id>
    <published>2020-05-20T01:08:51.000Z</published>
    <updated>2020-05-20T03:16:53.072Z</updated>
    
    <content type="html"><![CDATA[<p>这是一次由于 nginx 配置错误导致的网页无法访问事故。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在浏览器通过 <code>http</code> 访问网址会在地址栏左边提示 <code>不安全</code> 字样，而通过 <code>https</code> 则会显示一个带 🔒 的图标。我的网站刚建的时候就已经可以同时支持 <code>http</code> 和 <code>https</code> 了。</p><p>由于百度收录站点要填写好多个人隐私信息，不高兴填，于是就只提交了首页地址，也没抱什么希望，有次搜索出了我的网站，不过是通过 <code>http</code>方式访问的，于是我就想能不能做个跳转，把 <code>http</code> 请求全部转发到 <code>https</code>上。</p><h2 id="搞事"><a href="#搞事" class="headerlink" title="搞事"></a>搞事</h2><p>我查到了下面的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^(.*)$ https:&#x2F;&#x2F;$host$1 permanent;</span><br></pre></td></tr></table></figure><p>然后我就直接复制到我的配置文件里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name mojipanda.com www.mojipanda.com;</span><br><span class="line">    rewrite ^(.*)$ https:&#x2F;&#x2F;$host$1 permanent;</span><br><span class="line">    ssl_certificate cert&#x2F;mojipanda.com_chain.crt;</span><br><span class="line">    ssl_certificate_key cert&#x2F;mojipanda.com_key.key;</span><br><span class="line">    ssl_session_timeout 4h;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    error_page 500 502 503 504 404 &#x2F;404.html;</span><br><span class="line">    location &#x2F; &#123; </span><br><span class="line">        alias &#x2F;mojipanda&#x2F;blog&#x2F;;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行一下 <code>nginx</code> 的热加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>从百度搜索 <code>磨叽熊猫</code> 然后点击我的主页地址 <a href="http://mojipanda.com">http://mojipanda.com</a> ，果然跳转到 <a href="https://mojipanda.com">https://mojipanda.com</a> 。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>这下可以休息一会了，于是我拿起手机，随手访问了一下我的网站，无法加载！！！</p><p>什么情况！微信试了，两个不同的手机浏览器也试了都不行，急忙打开电脑，电脑浏览器访问又是正常的。想想刚刚只改了那一个配置，赶紧先撤回修改查查原因。</p><p>恢复到之前版本之后，发现微信还是打开不了，不过手机浏览器已经可以访问了，这应该是微信缓存问题，先不管了，查查配置原因。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>原来 <code>http</code> 的 配置要和 <code>https</code> 的配置分开，在 <code>http</code> 的配置里做跳转到 <code>https</code> 就可以了。推荐使用 301 重定向方式，而不是 <code>rewrite</code> 网址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 301 https:&#x2F;&#x2F;mojipanda.com$request_uri;</span><br></pre></td></tr></table></figure><p>修改后的配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">    listen 80;</span><br><span class="line">    server_name mojipanda.com www.mojipanda.com;</span><br><span class="line">    return 301 https:&#x2F;&#x2F;mojipanda.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name mojipanda.com www.mojipanda.com;</span><br><span class="line">    ssl_certificate cert&#x2F;mojipanda.com_chain.crt;</span><br><span class="line">    ssl_certificate_key cert&#x2F;mojipanda.com_key.key;</span><br><span class="line">    ssl_session_timeout 4h;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    error_page 500 502 503 504 404 &#x2F;404.html;</span><br><span class="line">    location &#x2F; &#123; </span><br><span class="line">        alias &#x2F;mojipanda&#x2F;blog&#x2F;;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>首先电脑浏览器访问正常，<code>http</code> 请求也成功跳转到 <code>https</code> 了。</p><p>再试试手机浏览器访问也正常，<code>http</code> 请求也成功跳转到 <code>https</code> 了。</p><p>再打开微信，点一点以前的连接，发现还是不行，也没找到清缓存的地方，退出重启清后台，还是没有效果，最后只能等等看了。（当时应该找另外一个手机验证的）。等了一会，链接终于访问成功了，而分享的旧链接还不行，再等一会，终于恢复正常。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到问题不用慌，对于不熟悉的地方，多尝试，多找找资料，还有多备份。发现问题，先恢复，在收集信息查找原因，定位问题找到解决办法，最后充分验证。遇到问题并没有啥，发现问题解决问题之后，感觉自己又积累了一份经验啦～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一次由于 nginx 配置错误导致的网页无法访问事故。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="nginx" scheme="https://mojipanda.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-添加Gitalk评论系统</title>
    <link href="https://mojipanda.com/blog/da9d/"/>
    <id>https://mojipanda.com/blog/da9d/</id>
    <published>2020-05-19T13:17:23.000Z</published>
    <updated>2020-05-19T14:49:39.199Z</updated>
    
    <content type="html"><![CDATA[<p>Gitalk - 一个基于 Github Issue 和 Preact 开发的评论插件</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>静态博客其实有很多评论系统，每种评论系统都有自己各自的优势。我使用的这套主题已经可以支持下面这些评论系统了。</p><ul><li><a href="https://disqus.com/" target="_blank" rel="external nofollow noopener noreferrer">Disqus</a></li><li><a href="https://github.com/gitalk/gitalk" target="_blank" rel="external nofollow noopener noreferrer">Gitalk</a></li><li><a href="https://valine.js.org" target="_blank" rel="external nofollow noopener noreferrer">Valine</a></li><li><a href="https://github.com/MiniValine/MiniValine/" target="_blank" rel="external nofollow noopener noreferrer">MiniValine</a></li><li><a href="https://www.livere.com/" target="_blank" rel="external nofollow noopener noreferrer">Livere</a></li><li><a href="https://vssue.js.org/zh/" target="_blank" rel="external nofollow noopener noreferrer">Vssue</a></li></ul><h2 id="我为什么选择Gitalk"><a href="#我为什么选择Gitalk" class="headerlink" title="我为什么选择Gitalk"></a>我为什么选择Gitalk</h2><p><code>Disqus</code> 还是不错的，以前使用过，不过现在在国内访问不了。</p><p><code>Valine</code> 第一次看到的时候还是很惊艳的，我也发现有不少博客都在使用，在使用方面，支持 <code>markdown</code> 语法，可以发一些内置表情包，不需要登录认证就可以进行评论。最后一点我个人比较介意，所以忍痛放弃。</p><p><code>Gitalk</code> 是基于 <code>Github Issue</code> 的，评论必须使用 <code>Github</code> 账号登录。我这个博客目前技术内容偏多，所以受众也很明确。即使没有账号进行评论，还是可以通过微博，邮件或者公众号等方式进行联系。而且部署也比较简单，所以就选择它了，剩下几个也就没了解了，感兴趣的可以去看看。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先登录你的 <code>Github</code> 账号，直接访问下面的地址：</p><div class="note link"><p><a href="https://github.com/settings/applications/new" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/settings/applications/new</a></p></div><p>填写 <code>*</code> 号内容并提交，注意这两个 URL 是填写你要使用评论系统的网址。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/01.png" alt></p><p>提交完成你会获得 <code>Client ID</code> 和 <code>Client Secret</code>，这两个是用来填写在配置里的。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/02.png" alt></p><p>我用的主题配置文件 <code>themes/volantis/_config.yml</code> 修改下面几项。</p><ul><li><code>clientID</code> 和 <code>clientSecret</code> 是上面获取的</li><li><code>repo</code> 填写你的github建的仓库名称，因为要用到 <code>issues</code></li><li><code>owner</code>和 <code>admin</code> 写自己账号就行了，注意 <code>admin</code> 格式是数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># https:&#x2F;&#x2F;gitalk.github.io&#x2F;</span><br><span class="line">gitalk:</span><br><span class="line">  clientID: yourClientID</span><br><span class="line">  clientSecret: yourClientSecret</span><br><span class="line">  repo: blog</span><br><span class="line">  owner: cocosongying</span><br><span class="line">  admin: [cocosongying]</span><br></pre></td></tr></table></figure></li></ul><p>配置完成执行 <code>hexo clean &amp;&amp; hexo g</code> 来重新生成网站，<code>hexo s</code> 本地看一下效果。这个时候显示 <code>未找到相关的 Issues 进行评论</code> <code>请联系 @yourname 初始化创建</code>，点击 <code>使用 Github 登录</code> 会跳转到网站首页，没有用。</p><p>所以，这一步很重要，先执行 <code>hexo d</code> 把网站部署上去。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/03.png" alt></p><p>在部署到线上的网站点击 <code>使用 Github 登录</code> 会跳转到下面的页面提示你授权。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/04.png" alt></p><p>授权完成再看你的评论框就已经部署成功了。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/da9d/05.png" alt></p><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>部署起来还是挺简单的，而对于使用评论者而言，需要 <code>使用 Github 登录</code> 之后进行授权才可以评论。</p><p>我这个流量小的网站，评论可能会一直是 <code>0 条评论</code> 吧 😂</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gitalk - 一个基于 Github Issue 和 Preact 开发的评论插件&lt;/p&gt;
    
    </summary>
    
    
      <category term="实用教程" scheme="https://mojipanda.com/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://mojipanda.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-如何使用MongoDB</title>
    <link href="https://mojipanda.com/blog/4ef0/"/>
    <id>https://mojipanda.com/blog/4ef0/</id>
    <published>2020-05-18T01:54:41.000Z</published>
    <updated>2020-05-18T02:10:31.658Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在 Nodejs 中如何连接并使用 MongoDB</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>我们需要安装 <code>mongoose</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose --save</span><br></pre></td></tr></table></figure><p>可以在项目中新建一个 <code>mongo</code> 文件夹用来管理 <code>mongodb</code> 的相关操作。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在 <code>mongo</code> 文件夹下新建 <code>connection.js</code>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> mongoUrl = <span class="string">"mongodb://username:123456@localhost:27017/demo"</span>;</span><br><span class="line"></span><br><span class="line">mongoose.Promise = global.Promise;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOptions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        useCreateIndex: <span class="literal">true</span>,</span><br><span class="line">        useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">        useFindAndModify: <span class="literal">false</span>,</span><br><span class="line">        useUnifiedTopology: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mongoose.connect(mongoUrl, getOptions());</span><br><span class="line"><span class="keyword">const</span> client = mongoose.connection;</span><br><span class="line">client.on(<span class="string">'connected'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"mongo connected"</span>) &#125;);</span><br><span class="line">client.on(<span class="string">'reconnected'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"mongo reconnected"</span>) &#125;);</span><br><span class="line">client.on(<span class="string">'disconnected'</span>, () =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"mongo disconnected"</span>) &#125;);</span><br><span class="line">client.on(<span class="string">'error'</span>, (error) =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"connect to "</span> + mongoUrl + <span class="string">"failed"</span>) &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    client,</span><br><span class="line">    close</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>mongo</code> 文件夹下创建文件夹 <code>model</code> 用来记录表定义，<code>mongo/model/demo.js</code> 举例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> demoSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    desc: <span class="built_in">String</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mongoose.model(<span class="string">'demo'</span>, demoSchema, <span class="string">'demo'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = db;</span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在需要操作 <code>mongodb</code> 的文件中先引入，如果是 web 接口服务，可以在主程序中引入一次，后面直接操作 <code>model</code> 就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const conn &#x3D; require(&#39;.&#x2F;connection&#39;);</span><br></pre></td></tr></table></figure><p>举一个查询的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const DemoDB &#x3D; require(&#39;.&#x2F;model&#x2F;demo&#39;);</span><br><span class="line">async function getAll() &#123;</span><br><span class="line">    let res &#x3D; await DemoDB.find();</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>推荐在 <code>mongo</code> 文件夹下编写数据库连接操作部分，为每个 <code>model</code> 编写好操作方法，统一管理，这样代码看起来更清晰，维护起来更方便。</p><p>在接口服务中使用 <code>mongodb</code> 操作按照上面操作就可以了，如果是脚本操作，使用完毕需要关闭连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍在 Nodejs 中如何连接并使用 MongoDB&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="mongodb" scheme="https://mojipanda.com/tags/mongodb/"/>
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-如何使用MySQL</title>
    <link href="https://mojipanda.com/blog/56c7/"/>
    <id>https://mojipanda.com/blog/56c7/</id>
    <published>2020-05-16T07:28:21.000Z</published>
    <updated>2020-05-16T07:50:05.394Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在 Nodejs 中如何连接并使用 MySQL</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>我们需要安装 <code>mysql2</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql2 --save</span><br></pre></td></tr></table></figure><p>可以在项目中新建一个 <code>mysql</code> 文件夹用来管理 <code>mysql</code> 的相关操作。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在 <code>mysql</code> 文件夹下新建 <code>connection.js</code>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql2'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>);</span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(config.mysql);</span><br><span class="line"><span class="keyword">const</span> client = pool.promise();</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    pool,</span><br><span class="line">    client</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里 <code>mysql</code> 的连接配置写在 <code>config.js</code> 文件中，示例配置项如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const initVal &#x3D; &#123;</span><br><span class="line">    mysql: &#123;</span><br><span class="line">        host: &#39;localhost&#39;,</span><br><span class="line">        port: 3306,</span><br><span class="line">        user: &#39;username&#39;,</span><br><span class="line">        password: &#39;123456&#39;,</span><br><span class="line">        database: &#39;demo&#39;,</span><br><span class="line">        charset: &#39;utf8mb4&#39;,</span><br><span class="line">        connectionLimit: 5,</span><br><span class="line">        dateStrings: true,</span><br><span class="line">        decimalNumbers: true,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; initVal;</span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在需要操作 <code>mysql</code> 的文件中先引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; client &#125; &#x3D; require(&#39;.&#x2F;connection&#39;);</span><br></pre></td></tr></table></figure><p>之后就可以使用 sql 语句进行愉快的操作了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">async function getById(id) &#123;</span><br><span class="line">    let sql &#x3D; &#96;select * from demo where id &#x3D; ?&#96;;</span><br><span class="line">    let args &#x3D; [id];</span><br><span class="line">    let res &#x3D; await client.query(sql, args);</span><br><span class="line">    return res[0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是 <code>return res[0]</code> 是返回的结果集，即对于查询有数据时，它返回的是数组。</p><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>推荐在 <code>mysql</code> 文件夹下编写数据库连接操作部分，这样代码看起来更清晰。</p><p>在接口服务中使用 <code>mysql</code> 操作按照上面操作就可以了，如果是脚本操作，使用完毕需要关闭连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.end();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍在 Nodejs 中如何连接并使用 MySQL&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="mysql" scheme="https://mojipanda.com/tags/mysql/"/>
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-如何使用Redis</title>
    <link href="https://mojipanda.com/blog/1ab7/"/>
    <id>https://mojipanda.com/blog/1ab7/</id>
    <published>2020-05-15T14:14:47.000Z</published>
    <updated>2020-05-16T07:43:40.700Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在 Nodejs 中如何连接并使用 Redis，通过 Nodejs 操作使用 Redis 还是相对比较简单的。</p><a id="more"></a><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>我们需要安装 <code>redis</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redis --save</span><br></pre></td></tr></table></figure><p>可以在项目中新建一个 <code>cache</code> 文件夹用来管理 <code>redis</code> 的相关操作。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在 <code>cache</code> 文件夹下新建 <code>connection.js</code>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">const</span> client = redis.createClient(&#123;</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    password: <span class="string">"123456"</span>,</span><br><span class="line">    db: <span class="number">1</span>,</span><br><span class="line">    retry_strategy: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (options.error &amp;&amp; options.error.code === <span class="string">'ECONNREFUSED'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'The server refused the connection'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.total_retry_time &gt; <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Retry time exhausted'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.attempt &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.min(options.attempt * <span class="number">100</span>, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> expire = promisify(client.expire).bind(client);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">get</span> = promisify(client.<span class="keyword">get</span>).bind(client);</span><br><span class="line">const <span class="keyword">set</span> = promisify(client.<span class="keyword">set</span>).bind(client);</span><br><span class="line">const del = promisify(client.del).bind(client);</span><br><span class="line"></span><br><span class="line">class Cache &#123;</span><br><span class="line">    Timeout = &#123;</span><br><span class="line">        Default: <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">get</span>(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">get</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    async <span class="keyword">set</span>(key, value, timeout) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">set</span>(key, value);</span><br><span class="line">        if (timeout) &#123;</span><br><span class="line">            <span class="keyword">await</span> expire(key, timeout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> del(key) &#123;</span><br><span class="line">        <span class="keyword">await</span> del(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> Cache();</span><br></pre></td></tr></table></figure><p>这里主要是 <code>redis</code> 的连接以及 <code>redis</code> 的几个简单操作，如获取，设置，删除，如果需要其他功能可以继续封装。</p><p>关于 <code>redis</code> 的连接配置可以单独写到配置文件里，这里为了方便介绍，把配置写死在示例代码里了。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在需要操作 <code>redis</code> 的文件中先引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Cache &#x3D; require(&#39;.&#x2F;connection&#39;);</span><br></pre></td></tr></table></figure><p>获取某个 key 对应的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await Cache.get(key);</span><br></pre></td></tr></table></figure><p>设置一个 key 对应的 value：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await Cache.set(key, value);</span><br></pre></td></tr></table></figure><p>如果需要指定缓存有效期限，比如 1 天：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await Cache.set(key, value, 24 * 60 * 60);</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>推荐在 <code>cache</code> 文件夹下为每个 <code>key</code> 新建对应的文件程序来操作 <code>redis</code>，把这个 <code>cache</code> 当成一个缓存模块，其他地方使用只要引入这个模块操作就好了。这样管理起来方便，代码看起来更清晰。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍在 Nodejs 中如何连接并使用 Redis，通过 Nodejs 操作使用 Redis 还是相对比较简单的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="redis" scheme="https://mojipanda.com/tags/redis/"/>
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs-基于Koa框架写个简单的接口</title>
    <link href="https://mojipanda.com/blog/fb4f/"/>
    <id>https://mojipanda.com/blog/fb4f/</id>
    <published>2020-05-14T04:02:44.000Z</published>
    <updated>2020-05-14T04:39:16.701Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何使用 Nodejs 快速搭建服务端并提供简单的接口程序。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先我们创建一个项目文件夹 <code>demo</code>，进入这个文件夹，运行 <code>npm init</code> 初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>执行 <code>npm init</code> 命令会让你填写项目相关信息，可以一路默认，之后再改都可以。它主要就是在项目中新建一个 <code>package.json</code> 的文件并初始化一些项目信息。</p><p>其次需要安装 <code>Koa</code> 框架及一些插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install koa --save</span><br><span class="line">npm install koa-router --save</span><br><span class="line">npm install koa-bodyparser --save</span><br></pre></td></tr></table></figure><h2 id="编写主程序"><a href="#编写主程序" class="headerlink" title="编写主程序"></a>编写主程序</h2><p>新建文件 <code>index.js</code>，这个文件名可以修改，同步修改一下 <code>package.json</code> 里 <code>main</code>项对应的文件名，表示这个文件是启动入口。<code>index.js</code> 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const Koa &#x3D; require(&#39;koa&#39;);</span><br><span class="line">const router &#x3D; require(&#39;koa-router&#39;)();</span><br><span class="line">const bodyParser &#x3D; require(&#39;koa-bodyparser&#39;);</span><br><span class="line">const app &#x3D; new Koa();</span><br><span class="line"></span><br><span class="line">const index &#x3D; router.get(&#39;&#x2F;demo&#39;, ctx &#x3D;&gt; &#123;</span><br><span class="line">    ctx.response.body &#x3D; &#123; code: 0, data: &#39;Hello World!&#39; &#125;;</span><br><span class="line">&#125;).routes();</span><br><span class="line"></span><br><span class="line">app.use(index);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 捕获未定义路由</span><br><span class="line">app.use((ctx) &#x3D;&gt; &#123;</span><br><span class="line">    ctx.response.body &#x3D; &#123; code: 404 &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动项目</span><br><span class="line">app.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#96;Server is starting at port 3000&#96;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="运行使用"><a href="#运行使用" class="headerlink" title="运行使用"></a>运行使用</h2><p>在 node 环境中可以直接通过下面的命令启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>项目启动完毕就可以访问我们刚刚定义的接口 <code>http://localhost:3000/demo</code> 来查看返回信息了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;code: 0, data: &quot;Hello World!&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>前端页面调用接口可能会有跨域问题，解决方案有好几种，这里介绍简单一点的。</p><p>先安装一个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install koa2-cors --save</span><br></pre></td></tr></table></figure><p>在启动入口文件 <code>index.js</code> 加上这两句就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const cors = require(<span class="string">'koa2-cors'</span>);</span><br><span class="line">app.use(cors());</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>Nodejs 这个脚本语言还是很强大的，能写前端就算了，居然还能写服务端。想想之前用 java 的时候要写好多东西，还有各种配置，最后打包运行花费好长时间。</p><p>当然 java 有它的强大，如果只是学习写写简单的接口，像 <code>Nodejs</code> <code>Python</code> <code>Go</code> 都有很简单的操作方法，也够简单的使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍如何使用 Nodejs 快速搭建服务端并提供简单的接口程序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Nodejs" scheme="https://mojipanda.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue-使用全局静态常量</title>
    <link href="https://mojipanda.com/blog/aa27/"/>
    <id>https://mojipanda.com/blog/aa27/</id>
    <published>2020-05-13T10:17:37.000Z</published>
    <updated>2020-05-14T04:39:58.152Z</updated>
    
    <content type="html"><![CDATA[<p>有很多共通的东西，需要我们使用全局静态常量。在 Vue 中是如何实现的呢？一起来看看吧～</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>服务端定义了接口给前端调用，各个模块可能会调用到相同的接口，即使是不同的接口，如果服务端修改了接口定义，前端就要跟着改，这个时候，如果这些定义在一个指定文件，那么我们只要修改这一个文件就好了，其他模块都可以调用到。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>首先在 <code>src</code> 目录新建文件夹 <code>consts</code> 并创建 <code>index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Api &#x3D;  &#123;</span><br><span class="line">    BASE_URL: &#39;https:&#x2F;&#x2F;mojipanda.com&#39;,</span><br><span class="line">    DEMO_SHOW: &#39;&#x2F;demo&#x2F;show&#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    Api</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line">import consts from &#39;.&#x2F;consts&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line">Vue.prototype.Global &#x3D; consts</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><p>主要是添加下面两行，这里 <code>Global</code> 的名字可以修改成其他命名，当然 <code>consts</code> 文件夹命名也可以修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import consts from &#39;.&#x2F;consts&#39;</span><br><span class="line">Vue.prototype.Global &#x3D; consts</span><br></pre></td></tr></table></figure><p>准备工作已经完成，接下来只要通过下面的语句就可以获取到我们在 <code>consts/index.js</code> 中定义的常量了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.Global.Api.BASE_URL</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>总体感觉还是比较简单的，对于 <code>consts/index.js</code>，当常量越来越多，也是不方便管理的，我们可以进行拆分。对例子中的 <code>Api</code> 来说，我们可以在 <code>consts</code> 文件夹新建一个 <code>api.js</code>，在这里定义常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const Api &#x3D; &#123;</span><br><span class="line">    BASE_URL: &#39;https:&#x2F;&#x2F;mojipanda.com&#39;,</span><br><span class="line">    DEMO_SHOW: &#39;&#x2F;demo&#x2F;show&#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Api</span><br></pre></td></tr></table></figure><p>修改 <code>consts/index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Api from &#39;@&#x2F;consts&#x2F;api&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    Api</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样拆分就完成了，当我们需要新增其他类型的常量，只要再新建一个文件并在 <code>consts/index.js</code> 引入就可以正常使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有很多共通的东西，需要我们使用全局静态常量。在 Vue 中是如何实现的呢？一起来看看吧～&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="https://mojipanda.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-状态管理模式Vuex</title>
    <link href="https://mojipanda.com/blog/6604/"/>
    <id>https://mojipanda.com/blog/6604/</id>
    <published>2020-05-13T08:35:32.000Z</published>
    <updated>2020-05-13T10:30:29.539Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一下在 Vue 项目中如何使用 Vuex 实现状态管理。比如我从服务端获取的个人信息，有很多模块都用到，这个时候相当于全局存储，方便各个模块调用。</p><a id="more"></a><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我在学习使用 <code>Vue</code> 的过程中，遇到了一个存储问题，在登录的时候获取到个人信息，我需要在多个模块展示，容易想到的就是弄个全局变量，各个模块都方便调用。这个时候我查到了 <code>Vuex</code>，下面我们就来看看如何使用。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p>为了结合 <code>cookie</code> 使用我们还可以安装一下 <code>vue-cookies</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cookies --save</span><br></pre></td></tr></table></figure><p>在 <code>src</code> 文件夹下创建文件夹 <code>store</code> 并新建文件 <code>index.js</code></p><p>举个例子用，先上代码，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import Vuex from &#39;vuex&#39;;</span><br><span class="line">import cookie from &#39;vue-cookies&#39;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        userInfo: &#123;&#125;,</span><br><span class="line">        isLogin: cookie.get(&#39;isLogin&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        userInfo: state &#x3D;&gt; state.userInfo,</span><br><span class="line">        isLogin: state &#x3D;&gt; state.isLogin</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        setUserInfo(state, data) &#123;</span><br><span class="line">            state.userInfo &#x3D; data;</span><br><span class="line">        &#125;,</span><br><span class="line">        setLoginState(state, data) &#123;</span><br><span class="line">            state.isLogin &#x3D; data;</span><br><span class="line">            cookie.set(&#39;isLogin&#39;, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        setUserInfo(&#123; commit &#125;, data) &#123;</span><br><span class="line">            commit(&#39;setUserInfo&#39;, data);</span><br><span class="line">        &#125;,</span><br><span class="line">        setLoginState(&#123; commit &#125;, data) &#123;</span><br><span class="line">            commit(&#39;setLoginState&#39;, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中将 <code>store</code> 引入进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>在 <code>store/index.js</code> 文件中</p><p><code>state</code> 表示要要管理的状态，以 key-value 键值对的形式存储。</p><p><code>getters</code> 是提供我们获取状态的入口。可以使用下面的语句获取信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let userInfo &#x3D; this.$store.getters.userInfo;</span><br></pre></td></tr></table></figure><p><code>mutations</code> 是用来修改 <code>state</code> 管理的值。</p><p><code>actions</code> 支持异步操作，官方简易通过这里提交修改信息，最终会调用 <code>mutations</code>。可以使用下面的语句修改信息，这里就是调用的 <code>actions</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.dispatch(&quot;setLoginState&quot;, true);</span><br></pre></td></tr></table></figure><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>使用上面的方法操作之后，我发现刷新一下页面就会导致之前存储的状态全部丢失。然后找到了下面的解决方案，就是在 <code>localStorage</code> 中存储 <code>store</code> 的值，创建的时候再获取。这样前端的状态信息就不会丢了。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    if (localStorage.getItem(&quot;store&quot;)) &#123;</span><br><span class="line">      this.$store.replaceState(</span><br><span class="line">        Object.assign(</span><br><span class="line">          &#123;&#125;,</span><br><span class="line">          this.$store.state,</span><br><span class="line">          JSON.parse(localStorage.getItem(&quot;store&quot;))</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    window.addEventListener(&quot;beforeunload&quot;, () &#x3D;&gt; &#123;</span><br><span class="line">      localStorage.setItem(&quot;store&quot;, JSON.stringify(this.$store.state));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>特性</th><th>数据生命周期</th><th>数据存放大小</th><th>与服务器通信</th></tr></thead><tbody><tr><td>cookie</td><td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td><td>4K左右</td><td>每次都会携带在HTTP头中，如果使用cookie保存过多数据，会带来性能问题</td></tr><tr><td>sessionStorage</td><td>仅在当前会话下有效，关闭页面或浏览器后被清除</td><td>一般5M</td><td>仅在浏览器中保存，不参与和服务器的通信</td></tr><tr><td>localStorage</td><td>除非被清除，否则永久保存</td><td>同上</td><td>同上</td></tr></tbody></table><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>当 <code>store/index.js</code> 管理的状态越来越多时，这个文件肯定会很长，不方便维护。可以将 <code>getters</code> <code>mutations</code> <code>actions</code> 单独拆分出来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍一下在 Vue 项目中如何使用 Vuex 实现状态管理。比如我从服务端获取的个人信息，有很多模块都用到，这个时候相当于全局存储，方便各个模块调用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="https://mojipanda.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-集成AdminLTE</title>
    <link href="https://mojipanda.com/blog/3c0d/"/>
    <id>https://mojipanda.com/blog/3c0d/</id>
    <published>2020-05-12T04:03:52.000Z</published>
    <updated>2020-05-13T08:36:05.272Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍使用 <code>vue-cli3</code> 集成 <code>AdminLTE-2.4.18</code></p><a id="more"></a><blockquote><p>AdminLTE 是基于 Bootstrap 的开源响应式前端模板。</p></blockquote><p>我个人比较喜欢这套模板的原因主要有：</p><ul><li>美观，众多模板中一眼就看中它了</li><li>开源免费</li><li>响应式支持很好</li></ul><p>我不是前端开发人员，搞样式这种繁琐的事情还是交给现成的吧。虽然 AdminLTE3 也发布了，但是看起来个人感觉没有 AdminLTE2好，响应式处理也有点问题。感兴趣可以去官网看看不同版本的效果。</p><h2 id="使用vue-cli3创建项目"><a href="#使用vue-cli3创建项目" class="headerlink" title="使用vue-cli3创建项目"></a>使用vue-cli3创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><p>初始化项目步骤就不介绍了，按照vue-cli一步步操作就完成了。</p><h2 id="引入AdminLTE"><a href="#引入AdminLTE" class="headerlink" title="引入AdminLTE"></a>引入AdminLTE</h2><p>接下来我们先安装 <code>admin-lte</code> 依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i admin-lte@2.4.18 --save</span><br></pre></td></tr></table></figure><p>修改 <code>public/index.html</code> 给 body 加上样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body class&#x3D;&quot;hold-transition skin-blue sidebar-mini&quot;&gt;</span><br></pre></td></tr></table></figure><p>修改 <code>src/main.js</code></p><figure class="highlight plain"><figcaption><span>src/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line"></span><br><span class="line">import &#39;admin-lte&#x2F;bower_components&#x2F;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.min.css&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;bower_components&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;bower_components&#x2F;Ionicons&#x2F;css&#x2F;ionicons.min.css&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;dist&#x2F;css&#x2F;skins&#x2F;_all-skins.min.css&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;dist&#x2F;css&#x2F;AdminLTE.min.css&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;bower_components&#x2F;bootstrap&#x2F;dist&#x2F;js&#x2F;bootstrap.min.js&#39;</span><br><span class="line">import &#39;admin-lte&#x2F;dist&#x2F;js&#x2F;adminlte.min.js&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><p>修改 <code>src/App.vue</code></p><figure class="highlight plain"><figcaption><span>src/App.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>引入部分到这里就完成了，新页面需要新建模板文件，对照源码复制就好了。<br>空白模板可以查看 admin-lte 源码包里的 <code>starter.html</code>，把 body 里面的 <code>&lt;div class=&quot;wrapper&quot;&gt;...&lt;/div&gt;</code> 部分拷贝到新建的页面 <code>&lt;template&gt;&lt;/template&gt;</code> 中。</p><h2 id="启动预览"><a href="#启动预览" class="headerlink" title="启动预览"></a>启动预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>这个时候网页还有错误，Bootstrap 需要引入 JQuery，新建一个文件 <code>vue.config.js</code> 配置一下就行了。</p><figure class="highlight plain"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">            new webpack.ProvidePlugin(&#123;</span><br><span class="line">                $: &#39;jquery&#39;,</span><br><span class="line">                jQuery: &#39;jquery&#39;,</span><br><span class="line">                &#39;window.jQuery&#39;: &#39;jquery&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h2><p>由于要对照预览样式来查看自己想要的组件，我先下载了一份源码，在浏览器中打开 <code>index.html</code>，这个时候可以看到官方提供的所有的组件样式，然后浏览器右键显示网页源代码，就可以找到需要的组件的代码是怎么写的了。</p><p>为了后续使用方便，因为有不少组件都是通用的，所以我将各部分组件拆开了，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;Header &#x2F;&gt;</span><br><span class="line">    &lt;MainSidebar &#x2F;&gt;</span><br><span class="line">    &lt;ContentWrapper &#x2F;&gt;</span><br><span class="line">    &lt;Footer &#x2F;&gt;</span><br><span class="line">    &lt;ControlSidebar &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>由于 ContentWrapper 部分是每个页面独有的，可以做成路由，这样新写页面时只要写这部分就行了，头部底部，菜单导航之类的都不用修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- Content Wrapper. Contains page content --&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;content-wrapper&quot;&gt;</span><br><span class="line">    &lt;router-view &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;!-- &#x2F;.content-wrapper --&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍使用 &lt;code&gt;vue-cli3&lt;/code&gt; 集成 &lt;code&gt;AdminLTE-2.4.18&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Vue" scheme="https://mojipanda.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>胡言乱语</title>
    <link href="https://mojipanda.com/blog/8827/"/>
    <id>https://mojipanda.com/blog/8827/</id>
    <published>2020-05-10T15:45:21.000Z</published>
    <updated>2020-05-19T08:05:33.109Z</updated>
    
    <content type="html"><![CDATA[<p>母亲节快乐～</p><a id="more"></a><p>一晃，工作已经快5年了，算得上是中长的工作年龄了吧！疫情的原因，今年过年休息了1个多月，3月份回南京，原先安排的同事有其他工作，临时被作为替补的，安排跟了审计厅的项目，工作也渐渐忙碌起来了</p><p>按理，应该是休息期间写点啥的，只是，啥都没写，你说期间都干了啥，我也不知道，好像就是吃饭，睡觉，带娃，有时工作，一天天也都过去了，最近工作忙碌起来了，反而想写点啥</p><p>一直在学校，接触外界不多，加上工作性质原因，见世面相对更窄了～很多时候，感觉已经像温水煮青蛙，我就是那只青蛙🐸；啥都没变，只是，少了当初刚开始的激情和动力，不得不说，这是可耻的，也是恐怖的，不折不扣的成了一个没有情调、没有梦想的行尸走肉～</p><p>海豚宝宝已经快两岁了，如果说父母的高度决定子女的高度，似乎已经想象到他的未来，有点恐慌；再回头看看自己，不知觉中，很多都已经失去了兴趣，夸张点，与社会似乎脱节了已经，要资产，不好意思，木的；要底蕴，不好意思，木的；要能力，不好意思，还是木的……别人增长的是知识与阅历，而我唯一增长的是渐渐上调的年龄数字，这么多年，我都干什么了？</p><p>或许以前一直是那只青蛙，没有太察觉落差，而这次出来，接触到了不同的人，接触到了不同的事，这种对比和落差更加暴露无遗，相形见绌～</p><p>且不说资本的差距，也不说业务能力的差距，单论最直白的沟通交流能力吧，每个人的行事作风或许都不一致，但是，的确符合一个定律，当你的知识面够广时，你可以带动话题的走向，可以从他人的叙述中择取到你想要的信息，筛选出有用的信息；而当你的知识积累及专业水平远远超越对方时，或许不能实现每一句都是真理，但是至少可以实现即便你是在挑对方的错，也可以让对方心悦诚服的认理～很多时候，盲目的聊天，我听不到啥或者都听到了，却不知道是啥，但是他们却可以敏锐的提炼出有用的信息，这是落差之一；有时候与他人沟通，我完全盲目应该如何带动话题，只能听着，或者，就此沉默，而他们，可以让话题一直不停，这是落差之二；有时候提出对方不足，我可能最后是被说服的一方或者是提高音量的一方，而他们可以做到一直是平淡温和的语气，带动对方跟上他们的思路，这是落差之三……比如说，经常会被审计单位是带着一肚子的不满和理由过来的，有时候阵势挺大，甚至有点教训的气场，但最后都被他们以云淡风轻的气场和温润如玉的语句给说服了～想想如果是我，很多时候，要么是被对方说服，要么是与对方争吵，我所能做的往往是无话可说或者是提升音量，落差着实大～</p><p>很多时候，我们之所以迷茫、彷徨，只是因为能力欠佳、欲望太多，想想，确实有点符合自己的现状～传说中的：能力撑不起野心～心思涌动，能力欠缺～</p><p>现在的自己已经是三个身份：一个是女儿，一个是母亲，一个是妻子～于女儿，要有孝，于母亲，要担责，于妻子，要有责～如果说信命，那么，也就认了；但是，真心是没有拿的出手的亮点，明显是自己失责……嗯，还是应该做点啥吧，可以想想～</p><p>当然，今天是母亲节，还是要说一句，所有妈妈们，母亲节快乐！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;母亲节快乐～&lt;/p&gt;
    
    </summary>
    
    
      <category term="心情物语" scheme="https://mojipanda.com/categories/%E5%BF%83%E6%83%85%E7%89%A9%E8%AF%AD/"/>
    
    
      <category term="心情" scheme="https://mojipanda.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>宝宝教爸爸快捷输入</title>
    <link href="https://mojipanda.com/blog/7055/"/>
    <id>https://mojipanda.com/blog/7055/</id>
    <published>2020-05-09T12:53:45.000Z</published>
    <updated>2020-05-19T08:05:04.008Z</updated>
    
    <content type="html"><![CDATA[<p>宝宝在爸爸的电脑上随便乱按，意外教会了爸爸一种快捷输入方式。</p><a id="more"></a><p>事情上这样的，我的苹果笔记本打开在一旁，开着一个浏览器的空白页，正在思索着查点资料，然后临时有事离开了座位。</p><p>刚走出房门没一会，就看见宝宝兴冲冲的趴上我的电脑，一边喊着“帮忙，帮忙”，一边在键盘上随便乱按。接着就看到了下面这个样子。</p><p><img src="/img/loading.svg" data-original="https://cdn.jsdelivr.net/gh/cocosongying/cdn-assets/blog/7055/01.png" alt></p><p>好像也没啥是吧，就是浏览器里输入里几个字符而已。再仔细看看，这个大于等于号，还有这个除号是怎么敲出来的。</p><p>我思索了一会，因为我并不知道这个快捷键，而且输入法并不是智能模式，于是我尝试输入了一下，可单个按键的敲怎么也敲不出来这种组合符号啊。那么只能是组合按键了，最终被我试出来了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * ┌────────┐   ┌─────┐ </span><br><span class="line"> * │ option │ + │ &gt; . │ &#x3D; ≥</span><br><span class="line"> * └────────┘   └─────┘ </span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * ┌────────┐   ┌─────┐ </span><br><span class="line"> * │ option │ + │ ? &#x2F; │ &#x3D; ÷</span><br><span class="line"> * └────────┘   └─────┘ </span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p>仔细看看这三个键确实在一块呢，也难怪宝宝这小手还能按出组合快捷键来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * ┬─┴─┬─┴─┬</span><br><span class="line"> * │&gt; .│? &#x2F;│</span><br><span class="line"> * ┼───┴──┬┴</span><br><span class="line"> * │option│</span><br><span class="line"> * └──────┘</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p>好吧，宝宝你让爸爸奇奇怪怪的知识点又增加了呢。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***</span><br><span class="line"> * ┌───────┐   ┌────────┐   ┌─────┐ </span><br><span class="line"> * │ shift │ + │ option │ + │  K  │ &#x3D; </span><br><span class="line"> * └───────┘   └────────┘   └─────┘ </span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;宝宝在爸爸的电脑上随便乱按，意外教会了爸爸一种快捷输入方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常生活" scheme="https://mojipanda.com/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker安装MongoDB</title>
    <link href="https://mojipanda.com/blog/ac76/"/>
    <id>https://mojipanda.com/blog/ac76/</id>
    <published>2020-05-08T09:00:00.000Z</published>
    <updated>2020-05-10T16:02:55.960Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下如何通过 docker 安装 mongodb</p><a id="more"></a><p>MongoDB 是一个基于分布式文件存储的数据库。这里介绍一下如何通过 docker 来安装。</p><h2 id="查看可用版本"><a href="#查看可用版本" class="headerlink" title="查看可用版本"></a>查看可用版本</h2><p>我们首先通过 MongoDB 镜像库来查询有哪些可用版本。</p><div class="note link"><p><a href="https://hub.docker.com/_/mongo?tab=tags" target="_blank" rel="external nofollow noopener noreferrer">MongoDB 镜像库</a></p></div><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>可以通过下面的命令获取最新版本的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo:latest</span><br></pre></td></tr></table></figure><p>往往我们需要知道版本号，可以通过指定版本号的方式获取指定镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo:4.2</span><br></pre></td></tr></table></figure><h2 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h2><p>下面两种执行命令都可以查看本地获取的镜像列表，检查一下是否获取成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>镜像获取完毕就可以启动容器了，下面是我安装的时候使用的执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 27017:27017 \</span><br><span class="line">    -v /mojipanda/docker/mongo/conf:/data/configdb \</span><br><span class="line">    -v /mojipanda/docker/mongo/data:/data/db \</span><br><span class="line">    --name mongo \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -d mongo:4.2 \</span><br><span class="line">    --auth</span><br></pre></td></tr></table></figure><p>介绍一下主要执行参数：</p><table><thead><tr><th align="left">执行参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-p 27017:27017</code></td><td align="left">指定端口号</td></tr><tr><td align="left"><code>-v</code></td><td align="left">挂载本地目录</td></tr><tr><td align="left"><code>--name mongo</code></td><td align="left">设置容器名称为 mongo</td></tr><tr><td align="left"><code>--restart=always</code></td><td align="left">设置容器重启后自动启动</td></tr><tr><td align="left"><code>-d mongo:4.2</code></td><td align="left">指定镜像</td></tr><tr><td align="left"><code>--auth</code></td><td align="left">设置访问需要授权</td></tr></tbody></table><h2 id="启动成功"><a href="#启动成功" class="headerlink" title="启动成功"></a>启动成功</h2><p>通过下面的命令查看容器的运行信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="创建用户和设置密码"><a href="#创建用户和设置密码" class="headerlink" title="创建用户和设置密码"></a>创建用户和设置密码</h2><p>首先执行下面的命令行进入到容器里并使用 MongoDB 的 shell 连接到 admin 数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mongo mongo admin</span><br></pre></td></tr></table></figure><p>执行语句创建一个用户名为 <code>root</code>，密码为 <code>123456</code> 的用户，并授权可以操作所有数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; user:&#39;root&#39;,pwd:&#39;123456&#39;,roles:[ &#123; role:&#39;userAdminAnyDatabase&#39;, db: &#39;admin&#39;&#125;]&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>到这里我们的 mongodb 就已经成功安装部署好了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一下如何通过 docker 安装 mongodb&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="https://mojipanda.com/tags/docker/"/>
    
      <category term="mongodb" scheme="https://mojipanda.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装MySQL</title>
    <link href="https://mojipanda.com/blog/ef32/"/>
    <id>https://mojipanda.com/blog/ef32/</id>
    <published>2020-05-08T08:00:00.000Z</published>
    <updated>2020-05-10T16:03:11.556Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下如何通过 docker 安装 mysql</p><a id="more"></a><p>MySQL 是最流行的关系型数据库管理系统。这里介绍一下如何通过 docker 来安装。</p><h2 id="查看可用版本"><a href="#查看可用版本" class="headerlink" title="查看可用版本"></a>查看可用版本</h2><p>我们首先通过 MySQL 镜像库来查询有哪些可用版本。</p><div class="note link"><p><a href="https://hub.docker.com/_/mysql?tab=tags" target="_blank" rel="external nofollow noopener noreferrer">MySQL 镜像库</a></p></div><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>可以通过下面的命令获取最新版本的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure><p>往往我们需要知道版本号，可以通过指定版本号的方式获取指定镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br></pre></td></tr></table></figure><h2 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h2><p>下面两种执行命令都可以查看本地获取的镜像列表，检查一下是否获取成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>镜像获取完毕就可以启动容器了，下面是我安装的时候使用的执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 3306:3306 \</span><br><span class="line">    -v /mojipanda/docker/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">    -v /mojipanda/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">    --name mysql \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -d mysql:8.0</span><br></pre></td></tr></table></figure><p>介绍一下主要执行参数：</p><table><thead><tr><th align="left">执行参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-p 3306:3306</code></td><td align="left">指定端口号</td></tr><tr><td align="left"><code>-v</code></td><td align="left">挂载本地目录</td></tr><tr><td align="left"><code>-e MYSQL_ROOT_PASSWORD=123456</code></td><td align="left">设置root用户的密码 123456</td></tr><tr><td align="left"><code>--name mysql</code></td><td align="left">设置容器名称为 mysql</td></tr><tr><td align="left"><code>--restart=always</code></td><td align="left">设置容器重启后自动启动</td></tr><tr><td align="left"><code>-d mysql:8.0</code></td><td align="left">指定镜像</td></tr></tbody></table><h2 id="启动成功"><a href="#启动成功" class="headerlink" title="启动成功"></a>启动成功</h2><p>通过下面的命令查看容器的运行信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><blockquote><p>到这里我们的 mysql 就已经成功安装部署好了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一下如何通过 docker 安装 mysql&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="https://mojipanda.com/tags/docker/"/>
    
      <category term="mysql" scheme="https://mojipanda.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装Redis</title>
    <link href="https://mojipanda.com/blog/a342/"/>
    <id>https://mojipanda.com/blog/a342/</id>
    <published>2020-05-08T07:00:00.000Z</published>
    <updated>2020-05-10T16:03:26.748Z</updated>
    
    <content type="html"><![CDATA[<p>介绍一下如何通过 docker 安装 redis</p><a id="more"></a><p>Redis 是一个高性能的 <code>key-value</code> 数据库。这里介绍一下如何通过 docker 来安装。</p><h2 id="查看可用版本"><a href="#查看可用版本" class="headerlink" title="查看可用版本"></a>查看可用版本</h2><p>我们首先通过 Redis 镜像库来查询有哪些可用版本。</p><div class="note link"><p><a href="https://hub.docker.com/_/redis?tab=tags" target="_blank" rel="external nofollow noopener noreferrer">Redis 镜像库</a></p></div><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>可以通过下面的命令获取最新版本的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p>往往我们需要知道版本号，可以通过指定版本号的方式获取指定镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:6.0</span><br></pre></td></tr></table></figure><h2 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h2><p>下面两种执行命令都可以查看本地获取的镜像列表，检查一下是否获取成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>镜像获取完毕就可以启动容器了，下面是我安装的时候使用的执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 6379:6379 \</span><br><span class="line">    -v /mojipanda/docker/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">    -v /mojipanda/docker/redis/data:/data \</span><br><span class="line">    --name redis \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -d redis:6.0 \</span><br><span class="line">    redis-server --appendonly yes --requirepass <span class="string">"123456"</span></span><br></pre></td></tr></table></figure><p>介绍一下主要执行参数：</p><table><thead><tr><th align="left">执行参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>-p 6379:6379</code></td><td align="left">指定端口号</td></tr><tr><td align="left"><code>-v</code></td><td align="left">挂载本地目录</td></tr><tr><td align="left"><code>--name redis</code></td><td align="left">设置容器名称为 redis</td></tr><tr><td align="left"><code>--restart=always</code></td><td align="left">设置容器重启后自动启动</td></tr><tr><td align="left"><code>-d redis:6.0</code></td><td align="left">指定镜像</td></tr><tr><td align="left"><code>--appendonly yes</code></td><td align="left">数据持久化</td></tr><tr><td align="left"><code>--requirepass &quot;123456&quot;</code></td><td align="left">设置访问需要的密码 123456</td></tr></tbody></table><h2 id="启动成功"><a href="#启动成功" class="headerlink" title="启动成功"></a>启动成功</h2><p>通过下面的命令查看容器的运行信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><blockquote><p>到这里我们的 redis 就已经成功安装部署好了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍一下如何通过 docker 安装 redis&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程学习" scheme="https://mojipanda.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="https://mojipanda.com/tags/docker/"/>
    
      <category term="redis" scheme="https://mojipanda.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>记录一下阿里云服务器和域名购买以及备案</title>
    <link href="https://mojipanda.com/blog/ef9e/"/>
    <id>https://mojipanda.com/blog/ef9e/</id>
    <published>2020-05-08T01:20:24.000Z</published>
    <updated>2020-05-10T16:02:08.415Z</updated>
    
    <content type="html"><![CDATA[<p>从 <code>2020-05-01</code> 购买阿里云服务器及域名到 <code>2020-05-08</code> 备案成功。记录一下其中的历程。</p><a id="more"></a><blockquote><p>问：为什么突然想要购买服务器和域名搭建网站？</p></blockquote><blockquote><p>答：作为一名开发人员，我觉得能够拥有属于自己的网站是一件很酷的事情。可以搭建博客来记录我想记录的，可以自己实现有趣的内容分享给朋友，可以更加深入的去学习，总之，就是这样了。</p></blockquote><blockquote><p>问：怎么选择的云服务器和域名？</p></blockquote><blockquote><p>答：目前使用阿里云服务器比较普遍，厂商方面就没有特别挑选了。起步阶段除了搭建博客还没想到可以做别的什么，因此配置上不用太挑剔。至于域名，随便搜索了一下 <code>mojipanda</code>，看到还有 <code>.com</code> 域名，那就这样吧。</p></blockquote><table><thead><tr><th align="left">名称</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">实例规格</td><td align="left">ecs.s6-c1m1.small</td></tr><tr><td align="left">CPU</td><td align="left">1核</td></tr><tr><td align="left">内存</td><td align="left">1G</td></tr><tr><td align="left">操作系统</td><td align="left">Ubuntu 18.04 64位</td></tr><tr><td align="left">贷款</td><td align="left">固定带宽 1M</td></tr></tbody></table><blockquote><p>问：一共花费了多少钱？</p></blockquote><blockquote><p>答：听说是购买的年限越长越优惠，阿里云还有券之类的，还有新人优惠，看网上别人在双十一购买的比较便宜，我这个呢，服务器和域名都是买了3年，云服务器 <code>¥937.6</code>，英文域名 <code>¥193.0</code>，因此一共 <code>¥1130.6</code>，差不多一天一块钱的样子。</p></blockquote><blockquote><p>问：从购买到备案成功需要多久？</p></blockquote><blockquote><p>答：感觉比预想中的要快，从 <code>05-01</code> 上午 到 <code>05-08</code> 上午一共 7 整天。</p></blockquote><blockquote><p>问：都是什么流程？</p></blockquote><blockquote><p>答：购买域名需要填写实名认证信息，这个填一下很快就好了，审核也快，之后购买域名，购买云服务器，选好下单付钱就行了。然后把域名绑定到服务器（操作步骤有点忘记了，总之不复杂，就是填信息）。这个时候可以去服务器上随便部署个 <code>Hello World</code> 看看能不能访问。由于域名没有备案，因此只能通过公网IP访问。所以接下来就是备案，在阿里云App搜索备案，然后按照实际信息填吧。由于域名信息需要2-3天才能同步到阿里这边，然后在 <code>05-03</code> 早上我发现可以提交初审了，果断提交，说是24h内有阿里工作人员电话核实备案信息，果然才刚到中午就接到了电话，核实了一下个人信息，网站信息。初审之后阿里自己会复核之后提交到管局，6-20个工作日通知审核结果，本来以为会很长，结果 <code>05-08</code> 上午就收到备案成功的短信了，收到短信之后需要再等一会阿里同步到备案信息，网站域名就可以正式访问了。</p></blockquote><blockquote><p>问：网站如何支持https访问？</p></blockquote><blockquote><p>答：购买阿里云的SSL服务好像有点贵，然后网上搜索了一下免费的，用这个填写下网站信息，下载证书，先提交到阿里云后台（这个网站提供了一键操作），再放到服务器里配置一下。</p></blockquote><div class="note link"><p><a href="https://freessl.cn/" target="_blank" rel="external nofollow noopener noreferrer">免费 SSL</a></p></div><blockquote><p>问：备案成功之后需要做什么？</p></blockquote><blockquote><p>答：我收到备案成功通知之后，先把备案号按照要求放到网页底部链接到备案系统网站，部署到服务器，正好这个时候阿里云已收到备案信息，域名正式可以访问了，然后通知好友网站上线啦，最后写下了这篇博文。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 &lt;code&gt;2020-05-01&lt;/code&gt; 购买阿里云服务器及域名到 &lt;code&gt;2020-05-08&lt;/code&gt; 备案成功。记录一下其中的历程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验小结" scheme="https://mojipanda.com/categories/%E7%BB%8F%E9%AA%8C%E5%B0%8F%E7%BB%93/"/>
    
    
  </entry>
  
</feed>
